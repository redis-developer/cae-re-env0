# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from env0_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class BlueprintApiExistingModule(BaseModel):
    """
    BlueprintApiExistingModule
    """ # noqa: E501
    module_name: Annotated[str, Field(strict=True)] = Field(description="Module Name. Can be made of up to 64 characters, containing alphanumeric, hyphens and underscores. Must not contain leading/trailing hyphens/underscores.", alias="moduleName")
    module_provider: Annotated[str, Field(strict=True)] = Field(description="Module Provider. Can be made of up to 64 characters, containing lowercase alphanumeric characters only.", alias="moduleProvider")
    module_test_enabled: Optional[StrictBool] = Field(default=None, alias="moduleTestEnabled")
    repository: StrictStr
    description: Optional[StrictStr] = None
    token_id: Optional[StrictStr] = Field(default=None, alias="tokenId")
    token_name: Optional[StrictStr] = Field(default=None, alias="tokenName")
    github_installation_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="githubInstallationId")
    bitbucket_client_key: Optional[StrictStr] = Field(default=None, alias="bitbucketClientKey")
    is_git_lab: Optional[StrictBool] = Field(default=None, alias="isGitLab")
    is_azure_dev_ops: Optional[StrictBool] = Field(default=None, alias="isAzureDevOps")
    is_bitbucket_server: Optional[StrictBool] = Field(default=None, alias="isBitbucketServer")
    is_git_hub_enterprise: Optional[StrictBool] = Field(default=None, alias="isGitHubEnterprise")
    gitlab_project_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="gitlabProjectId")
    path: Optional[StrictStr] = None
    run_tests_on_pull_request: Optional[StrictBool] = Field(default=None, alias="runTestsOnPullRequest")
    opentofu_version: Optional[StrictStr] = Field(default=None, alias="opentofuVersion")
    tag_prefix: Optional[StrictStr] = Field(default=None, alias="tagPrefix")
    type: StrictStr
    testing_environment_id: Optional[StrictStr] = Field(default=None, alias="testingEnvironmentId")
    id: Optional[StrictStr] = None
    organization_id: StrictStr = Field(alias="organizationId")
    author: Optional[User] = None
    author_id: Optional[StrictStr] = Field(default=None, alias="authorId")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    is_deleted: Optional[StrictBool] = Field(default=None, alias="isDeleted")
    __properties: ClassVar[List[str]] = ["moduleName", "moduleProvider", "moduleTestEnabled", "repository", "description", "tokenId", "tokenName", "githubInstallationId", "bitbucketClientKey", "isGitLab", "isAzureDevOps", "isBitbucketServer", "isGitHubEnterprise", "gitlabProjectId", "path", "runTestsOnPullRequest", "opentofuVersion", "tagPrefix", "type", "testingEnvironmentId", "id", "organizationId", "author", "authorId", "createdAt", "updatedAt", "isDeleted"]

    @field_validator('module_name')
    def module_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ *", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ */")
        return value

    @field_validator('module_provider')
    def module_provider_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9a-z]{0,64}$ *", value):
            raise ValueError(r"must validate the regular expression /^[0-9a-z]{0,64}$ */")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlueprintApiExistingModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # set to None if github_installation_id (nullable) is None
        # and model_fields_set contains the field
        if self.github_installation_id is None and "github_installation_id" in self.model_fields_set:
            _dict['githubInstallationId'] = None

        # set to None if bitbucket_client_key (nullable) is None
        # and model_fields_set contains the field
        if self.bitbucket_client_key is None and "bitbucket_client_key" in self.model_fields_set:
            _dict['bitbucketClientKey'] = None

        # set to None if gitlab_project_id (nullable) is None
        # and model_fields_set contains the field
        if self.gitlab_project_id is None and "gitlab_project_id" in self.model_fields_set:
            _dict['gitlabProjectId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlueprintApiExistingModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "moduleName": obj.get("moduleName"),
            "moduleProvider": obj.get("moduleProvider"),
            "moduleTestEnabled": obj.get("moduleTestEnabled"),
            "repository": obj.get("repository"),
            "description": obj.get("description"),
            "tokenId": obj.get("tokenId"),
            "tokenName": obj.get("tokenName"),
            "githubInstallationId": obj.get("githubInstallationId"),
            "bitbucketClientKey": obj.get("bitbucketClientKey"),
            "isGitLab": obj.get("isGitLab"),
            "isAzureDevOps": obj.get("isAzureDevOps"),
            "isBitbucketServer": obj.get("isBitbucketServer"),
            "isGitHubEnterprise": obj.get("isGitHubEnterprise"),
            "gitlabProjectId": obj.get("gitlabProjectId"),
            "path": obj.get("path"),
            "runTestsOnPullRequest": obj.get("runTestsOnPullRequest"),
            "opentofuVersion": obj.get("opentofuVersion"),
            "tagPrefix": obj.get("tagPrefix"),
            "type": obj.get("type"),
            "testingEnvironmentId": obj.get("testingEnvironmentId"),
            "id": obj.get("id"),
            "organizationId": obj.get("organizationId"),
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "authorId": obj.get("authorId"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "isDeleted": obj.get("isDeleted")
        })
        return _obj


