# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.configuration_scope import ConfigurationScope
from env0_client.models.configuration_type import ConfigurationType
from env0_client.models.partial_json_schema7 import PartialJSONSchema7
from typing import Optional, Set
from typing_extensions import Self

class ConfigurationPropertyResponse(BaseModel):
    """
    ConfigurationPropertyResponse
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    name: Optional[StrictStr] = None
    value: Optional[StrictStr] = None
    id: Optional[StrictStr] = Field(default=None, description="The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created.")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    is_sensitive: Optional[StrictBool] = Field(default=None, alias="isSensitive")
    is_readonly: Optional[StrictBool] = Field(default=None, alias="isReadonly")
    is_required: Optional[StrictBool] = Field(default=None, alias="isRequired")
    regex: Optional[StrictStr] = None
    scope_id: Optional[StrictStr] = Field(default=None, description="The ID of the entity of the provided `scope`. e.g. a project's ID when the provided `scope` is `PROJECT`. Inapplicable for `GLOBAL` scope, as it has no specific entity.", alias="scopeId")
    scope: Optional[ConfigurationScope] = None
    type: Optional[ConfigurationType] = Field(default=None, description="Whether it is an Environment or Terraform variable 0 value maps to an Environment variable 1 value maps to an Terraform variable")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    var_schema: Optional[PartialJSONSchema7] = Field(default=None, description="If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type. ENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}", alias="schema")
    description: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["createdAt", "name", "value", "id", "userId", "isSensitive", "isReadonly", "isRequired", "regex", "scopeId", "scope", "type", "projectId", "organizationId", "schema", "description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigurationPropertyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigurationPropertyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAt": obj.get("createdAt"),
            "name": obj.get("name"),
            "value": obj.get("value"),
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "isSensitive": obj.get("isSensitive"),
            "isReadonly": obj.get("isReadonly"),
            "isRequired": obj.get("isRequired"),
            "regex": obj.get("regex"),
            "scopeId": obj.get("scopeId"),
            "scope": obj.get("scope"),
            "type": obj.get("type"),
            "projectId": obj.get("projectId"),
            "organizationId": obj.get("organizationId"),
            "schema": PartialJSONSchema7.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "description": obj.get("description")
        })
        return _obj


