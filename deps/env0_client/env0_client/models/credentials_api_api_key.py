# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.api_key_user import ApiKeyUser
from typing import Optional, Set
from typing_extensions import Self

class CredentialsApiApiKey(BaseModel):
    """
    CredentialsApiApiKey
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    api_key_id: StrictStr = Field(alias="apiKeyId")
    last_used_at: StrictStr = Field(alias="lastUsedAt")
    organization_id: StrictStr = Field(alias="organizationId")
    created_at: StrictStr = Field(alias="createdAt")
    created_by: StrictStr = Field(alias="createdBy")
    created_by_user: Optional[ApiKeyUser] = Field(default=None, alias="createdByUser")
    api_key_secret: Optional[StrictStr] = Field(default=None, alias="apiKeySecret")
    organization_role: StrictStr = Field(alias="organizationRole")
    is_blocked: Optional[StrictBool] = Field(default=None, alias="isBlocked")
    __properties: ClassVar[List[str]] = ["id", "name", "apiKeyId", "lastUsedAt", "organizationId", "createdAt", "createdBy", "createdByUser", "apiKeySecret", "organizationRole", "isBlocked"]

    @field_validator('organization_role')
    def organization_role_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['User', 'Admin']):
            raise ValueError("must be one of enum values ('User', 'Admin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CredentialsApiApiKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by_user
        if self.created_by_user:
            _dict['createdByUser'] = self.created_by_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CredentialsApiApiKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "apiKeyId": obj.get("apiKeyId"),
            "lastUsedAt": obj.get("lastUsedAt"),
            "organizationId": obj.get("organizationId"),
            "createdAt": obj.get("createdAt"),
            "createdBy": obj.get("createdBy"),
            "createdByUser": ApiKeyUser.from_dict(obj["createdByUser"]) if obj.get("createdByUser") is not None else None,
            "apiKeySecret": obj.get("apiKeySecret"),
            "organizationRole": obj.get("organizationRole"),
            "isBlocked": obj.get("isBlocked")
        })
        return _obj


