# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomEnv0EnvironmentVariables(BaseModel):
    """
    CustomEnv0EnvironmentVariables
    """ # noqa: E501
    environment_id: Optional[StrictStr] = Field(default=None, description="The deployed Environment ID", alias="environmentId")
    project_id: Optional[StrictStr] = Field(default=None, description="ENV0_PROJECT_ID", alias="projectId")
    project_name: Optional[StrictStr] = Field(default=None, description="The Project Name of the deployed Environment", alias="projectName")
    deployment_log_id: Optional[StrictStr] = Field(default=None, description="The deployment ID", alias="deploymentLogId")
    deployment_type: Optional[StrictStr] = Field(default=None, description="The deployment type.", alias="deploymentType")
    deployment_revision: Optional[StrictStr] = Field(default=None, description="Available only when deployment revision defined", alias="deploymentRevision")
    workspace_name: Optional[StrictStr] = Field(default=None, description="The Terraform Workspace name used in the Environment", alias="workspaceName")
    root_dir: Optional[StrictStr] = Field(default=None, description="The root repository path", alias="rootDir")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    template_id: Optional[StrictStr] = Field(default=None, alias="templateId")
    template_dir: Optional[StrictStr] = Field(default=None, alias="templateDir")
    template_name: Optional[StrictStr] = Field(default=None, alias="templateName")
    environment_name: Optional[StrictStr] = Field(default=None, alias="environmentName")
    environment_creator_name: Optional[StrictStr] = Field(default=None, alias="environmentCreatorName")
    environment_creator_email: Optional[StrictStr] = Field(default=None, alias="environmentCreatorEmail")
    deployer_name: Optional[StrictStr] = Field(default=None, alias="deployerName")
    deployer_email: Optional[StrictStr] = Field(default=None, alias="deployerEmail")
    reviewer_name: Optional[StrictStr] = Field(default=None, alias="reviewerName")
    reviewer_email: Optional[StrictStr] = Field(default=None, alias="reviewerEmail")
    pr_author: Optional[StrictStr] = Field(default=None, description="pr author. available only in PR Plan", alias="prAuthor")
    pr_source_branch: Optional[StrictStr] = Field(default=None, description="the source branch. available only in PR Plan", alias="prSourceBranch")
    pr_target_branch: Optional[StrictStr] = Field(default=None, description="the target branch. available only in PR Plan", alias="prTargetBranch")
    commit_hash: Optional[StrictStr] = Field(default=None, description="the commit hash", alias="commitHash")
    commit_url: Optional[StrictStr] = Field(default=None, description="the commit url", alias="commitUrl")
    oidc_token: Optional[StrictStr] = Field(default=None, description="The OIDC Token - read more here(https://docs.env0.com/docs/oidc-integrations) on how to enable it and use it", alias="oidcToken")
    vcs_access_token: Optional[StrictStr] = Field(default=None, description="When using a native VCS integration, this will represent the access token we use to clone the repository", alias="vcsAccessToken")
    tf_plan_json: Optional[StrictStr] = Field(default=None, description="The file path to a JSON representation of a Terraform Plan file", alias="tfPlanJson")
    cli_args_plan: Optional[StrictStr] = Field(default=None, description="add additional cli arguments when running a plan", alias="cliArgsPlan")
    cli_args_apply: Optional[StrictStr] = Field(default=None, description="add additional cli arguments when running the `apply` command", alias="cliArgsApply")
    __properties: ClassVar[List[str]] = ["environmentId", "projectId", "projectName", "deploymentLogId", "deploymentType", "deploymentRevision", "workspaceName", "rootDir", "organizationId", "templateId", "templateDir", "templateName", "environmentName", "environmentCreatorName", "environmentCreatorEmail", "deployerName", "deployerEmail", "reviewerName", "reviewerEmail", "prAuthor", "prSourceBranch", "prTargetBranch", "commitHash", "commitUrl", "oidcToken", "vcsAccessToken", "tfPlanJson", "cliArgsPlan", "cliArgsApply"]

    @field_validator('deployment_type')
    def deployment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['prPlan', 'deploy', 'destroy']):
            raise ValueError("must be one of enum values ('prPlan', 'deploy', 'destroy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomEnv0EnvironmentVariables from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomEnv0EnvironmentVariables from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environmentId": obj.get("environmentId"),
            "projectId": obj.get("projectId"),
            "projectName": obj.get("projectName"),
            "deploymentLogId": obj.get("deploymentLogId"),
            "deploymentType": obj.get("deploymentType"),
            "deploymentRevision": obj.get("deploymentRevision"),
            "workspaceName": obj.get("workspaceName"),
            "rootDir": obj.get("rootDir"),
            "organizationId": obj.get("organizationId"),
            "templateId": obj.get("templateId"),
            "templateDir": obj.get("templateDir"),
            "templateName": obj.get("templateName"),
            "environmentName": obj.get("environmentName"),
            "environmentCreatorName": obj.get("environmentCreatorName"),
            "environmentCreatorEmail": obj.get("environmentCreatorEmail"),
            "deployerName": obj.get("deployerName"),
            "deployerEmail": obj.get("deployerEmail"),
            "reviewerName": obj.get("reviewerName"),
            "reviewerEmail": obj.get("reviewerEmail"),
            "prAuthor": obj.get("prAuthor"),
            "prSourceBranch": obj.get("prSourceBranch"),
            "prTargetBranch": obj.get("prTargetBranch"),
            "commitHash": obj.get("commitHash"),
            "commitUrl": obj.get("commitUrl"),
            "oidcToken": obj.get("oidcToken"),
            "vcsAccessToken": obj.get("vcsAccessToken"),
            "tfPlanJson": obj.get("tfPlanJson"),
            "cliArgsPlan": obj.get("cliArgsPlan"),
            "cliArgsApply": obj.get("cliArgsApply")
        })
        return _obj


