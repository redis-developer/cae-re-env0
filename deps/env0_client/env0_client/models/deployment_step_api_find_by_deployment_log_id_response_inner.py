# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from env0_client.models.deployment_step_api_deployment_step_status import DeploymentStepApiDeploymentStepStatus
from typing import Optional, Set
from typing_extensions import Self

class DeploymentStepApiFindByDeploymentLogIdResponseInner(BaseModel):
    """
    DeploymentStepApiFindByDeploymentLogIdResponseInner
    """ # noqa: E501
    id: Optional[StrictStr] = None
    deployment_log_id: StrictStr = Field(alias="deploymentLogId")
    name: StrictStr
    order: Union[StrictFloat, StrictInt]
    environment_id: Optional[StrictStr] = Field(default=None, alias="environmentId")
    project_id: StrictStr = Field(alias="projectId")
    organization_id: StrictStr = Field(alias="organizationId")
    status: DeploymentStepApiDeploymentStepStatus
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    completed_at: Optional[datetime] = Field(default=None, alias="completedAt")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    retry_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="retryCount")
    __properties: ClassVar[List[str]] = ["id", "deploymentLogId", "name", "order", "environmentId", "projectId", "organizationId", "status", "startedAt", "completedAt", "displayName", "retryCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeploymentStepApiFindByDeploymentLogIdResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeploymentStepApiFindByDeploymentLogIdResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "deploymentLogId": obj.get("deploymentLogId"),
            "name": obj.get("name"),
            "order": obj.get("order"),
            "environmentId": obj.get("environmentId"),
            "projectId": obj.get("projectId"),
            "organizationId": obj.get("organizationId"),
            "status": obj.get("status"),
            "startedAt": obj.get("startedAt"),
            "completedAt": obj.get("completedAt"),
            "displayName": obj.get("displayName"),
            "retryCount": obj.get("retryCount")
        })
        return _obj


