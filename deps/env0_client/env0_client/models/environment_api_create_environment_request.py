# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from env0_client.models.deploy_request import DeployRequest
from env0_client.models.environment_api_configuration_changes import EnvironmentApiConfigurationChanges
from env0_client.models.environment_api_drift_detection_request import EnvironmentApiDriftDetectionRequest
from env0_client.models.environment_api_ttl_request import EnvironmentApiTTLRequest
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiCreateEnvironmentRequest(BaseModel):
    """
    EnvironmentApiCreateEnvironmentRequest
    """ # noqa: E501
    name: StrictStr
    project_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="projectId")
    workspace_name: Optional[StrictStr] = Field(default=None, alias="workspaceName")
    requires_approval: Optional[StrictBool] = Field(default=None, alias="requiresApproval")
    ttl: Optional[EnvironmentApiTTLRequest] = None
    configuration_changes: Optional[EnvironmentApiConfigurationChanges] = Field(default=None, alias="configurationChanges")
    vcs_commands_alias: Optional[StrictStr] = Field(default=None, alias="vcsCommandsAlias")
    deploy_request: DeployRequest = Field(alias="deployRequest")
    continuous_deployment: Optional[StrictBool] = Field(default=None, alias="continuousDeployment")
    pull_request_plan_deployments: Optional[StrictBool] = Field(default=None, alias="pullRequestPlanDeployments")
    drift_detection_request: Optional[EnvironmentApiDriftDetectionRequest] = Field(default=None, alias="driftDetectionRequest")
    auto_deploy_on_path_changes_only: Optional[StrictBool] = Field(default=None, alias="autoDeployOnPathChangesOnly")
    auto_deploy_by_custom_glob: Optional[StrictStr] = Field(default=None, alias="autoDeployByCustomGlob")
    terragrunt_working_directory: Optional[StrictStr] = Field(default=None, alias="terragruntWorkingDirectory")
    is_remote_backend: Optional[StrictBool] = Field(default=None, alias="isRemoteBackend")
    k8s_namespace: Optional[StrictStr] = Field(default=None, alias="k8sNamespace")
    prevent_auto_deploy: Optional[StrictBool] = Field(default=None, alias="preventAutoDeploy")
    __properties: ClassVar[List[str]] = ["name", "projectId", "workspaceName", "requiresApproval", "ttl", "configurationChanges", "vcsCommandsAlias", "deployRequest", "continuousDeployment", "pullRequestPlanDeployments", "driftDetectionRequest", "autoDeployOnPathChangesOnly", "autoDeployByCustomGlob", "terragruntWorkingDirectory", "isRemoteBackend", "k8sNamespace", "preventAutoDeploy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiCreateEnvironmentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ttl
        if self.ttl:
            _dict['ttl'] = self.ttl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration_changes
        if self.configuration_changes:
            _dict['configurationChanges'] = self.configuration_changes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deploy_request
        if self.deploy_request:
            _dict['deployRequest'] = self.deploy_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drift_detection_request
        if self.drift_detection_request:
            _dict['driftDetectionRequest'] = self.drift_detection_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiCreateEnvironmentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "projectId": obj.get("projectId"),
            "workspaceName": obj.get("workspaceName"),
            "requiresApproval": obj.get("requiresApproval"),
            "ttl": EnvironmentApiTTLRequest.from_dict(obj["ttl"]) if obj.get("ttl") is not None else None,
            "configurationChanges": EnvironmentApiConfigurationChanges.from_dict(obj["configurationChanges"]) if obj.get("configurationChanges") is not None else None,
            "vcsCommandsAlias": obj.get("vcsCommandsAlias"),
            "deployRequest": DeployRequest.from_dict(obj["deployRequest"]) if obj.get("deployRequest") is not None else None,
            "continuousDeployment": obj.get("continuousDeployment"),
            "pullRequestPlanDeployments": obj.get("pullRequestPlanDeployments"),
            "driftDetectionRequest": EnvironmentApiDriftDetectionRequest.from_dict(obj["driftDetectionRequest"]) if obj.get("driftDetectionRequest") is not None else None,
            "autoDeployOnPathChangesOnly": obj.get("autoDeployOnPathChangesOnly"),
            "autoDeployByCustomGlob": obj.get("autoDeployByCustomGlob"),
            "terragruntWorkingDirectory": obj.get("terragruntWorkingDirectory"),
            "isRemoteBackend": obj.get("isRemoteBackend"),
            "k8sNamespace": obj.get("k8sNamespace"),
            "preventAutoDeploy": obj.get("preventAutoDeploy")
        })
        return _obj


