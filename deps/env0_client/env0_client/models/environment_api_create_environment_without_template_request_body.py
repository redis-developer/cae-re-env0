# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.blueprint_api_retry import BlueprintApiRetry
from env0_client.models.blueprint_api_ssh_key import BlueprintApiSshKey
from env0_client.models.blueprint_api_terraform_version import BlueprintApiTerraformVersion
from env0_client.models.blueprint_api_terragrunt_tf_binary import BlueprintApiTerragruntTfBinary
from env0_client.models.blueprint_type import BlueprintType
from env0_client.models.environment_api_configuration_changes import EnvironmentApiConfigurationChanges
from env0_client.models.environment_api_create_environment_without_template_request_body_deploy_request import EnvironmentApiCreateEnvironmentWithoutTemplateRequestBodyDeployRequest
from env0_client.models.environment_api_drift_detection_request import EnvironmentApiDriftDetectionRequest
from env0_client.models.environment_api_ttl_request import EnvironmentApiTTLRequest
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiCreateEnvironmentWithoutTemplateRequestBody(BaseModel):
    """
    EnvironmentApiCreateEnvironmentWithoutTemplateRequestBody
    """ # noqa: E501
    deploy_request: Optional[EnvironmentApiCreateEnvironmentWithoutTemplateRequestBodyDeployRequest] = Field(default=None, alias="deployRequest")
    name: StrictStr
    project_id: Optional[Any] = Field(alias="projectId")
    workspace_name: Optional[StrictStr] = Field(default=None, alias="workspaceName")
    requires_approval: Optional[StrictBool] = Field(default=None, alias="requiresApproval")
    ttl: Optional[EnvironmentApiTTLRequest] = None
    configuration_changes: Optional[EnvironmentApiConfigurationChanges] = Field(default=None, alias="configurationChanges")
    vcs_commands_alias: Optional[StrictStr] = Field(default=None, alias="vcsCommandsAlias")
    continuous_deployment: Optional[StrictBool] = Field(default=None, alias="continuousDeployment")
    pull_request_plan_deployments: Optional[StrictBool] = Field(default=None, alias="pullRequestPlanDeployments")
    drift_detection_request: Optional[EnvironmentApiDriftDetectionRequest] = Field(default=None, alias="driftDetectionRequest")
    auto_deploy_on_path_changes_only: Optional[StrictBool] = Field(default=None, alias="autoDeployOnPathChangesOnly")
    auto_deploy_by_custom_glob: Optional[StrictStr] = Field(default=None, alias="autoDeployByCustomGlob")
    terragrunt_working_directory: Optional[StrictStr] = Field(default=None, alias="terragruntWorkingDirectory")
    is_remote_backend: Optional[StrictBool] = Field(default=None, alias="isRemoteBackend")
    k8s_namespace: Optional[StrictStr] = Field(default=None, alias="k8sNamespace")
    prevent_auto_deploy: Optional[StrictBool] = Field(default=None, alias="preventAutoDeploy")
    organization_id: StrictStr = Field(alias="organizationId")
    description: Optional[StrictStr] = None
    retry: Optional[BlueprintApiRetry] = None
    run_tests_on_pull_request: Optional[StrictBool] = Field(default=None, alias="runTestsOnPullRequest")
    is_terragrunt_run_all: Optional[StrictBool] = Field(default=None, alias="isTerragruntRunAll")
    project_ids: Optional[List[StrictStr]] = Field(default=None, alias="projectIds")
    tag_prefix: Optional[StrictStr] = Field(default=None, alias="tagPrefix")
    repository: StrictStr
    revision: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    file_name: Optional[StrictStr] = Field(default=None, alias="fileName")
    helm_chart_name: Optional[StrictStr] = Field(default=None, alias="helmChartName")
    terraform_version: Optional[BlueprintApiTerraformVersion] = Field(default=None, description="A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform.", alias="terraformVersion")
    opentofu_version: Optional[StrictStr] = Field(default=None, alias="opentofuVersion")
    terragrunt_version: Optional[StrictStr] = Field(default=None, alias="terragruntVersion")
    terragrunt_tf_binary: Optional[BlueprintApiTerragruntTfBinary] = Field(default=None, alias="terragruntTfBinary")
    pulumi_version: Optional[StrictStr] = Field(default=None, alias="pulumiVersion")
    type: BlueprintType
    gitlab_project_id: Optional[Any] = Field(default=None, alias="gitlabProjectId")
    token_name: Optional[StrictStr] = Field(default=None, alias="tokenName")
    token_id: Optional[StrictStr] = Field(default=None, alias="tokenId")
    ssh_keys: Optional[List[BlueprintApiSshKey]] = Field(default=None, alias="sshKeys")
    github_installation_id: Optional[Any] = Field(default=None, alias="githubInstallationId")
    bitbucket_client_key: Optional[StrictStr] = Field(default=None, alias="bitbucketClientKey")
    is_bitbucket_server: Optional[StrictBool] = Field(default=None, alias="isBitbucketServer")
    is_git_lab_enterprise: Optional[StrictBool] = Field(default=None, alias="isGitLabEnterprise")
    is_git_hub_enterprise: Optional[StrictBool] = Field(default=None, alias="isGitHubEnterprise")
    is_git_lab: Optional[StrictBool] = Field(default=None, alias="isGitLab")
    is_azure_dev_ops: Optional[StrictBool] = Field(default=None, alias="isAzureDevOps")
    is_helm_repository: Optional[StrictBool] = Field(default=None, alias="isHelmRepository")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["deployRequest", "name", "projectId", "workspaceName", "requiresApproval", "ttl", "configurationChanges", "vcsCommandsAlias", "continuousDeployment", "pullRequestPlanDeployments", "driftDetectionRequest", "autoDeployOnPathChangesOnly", "autoDeployByCustomGlob", "terragruntWorkingDirectory", "isRemoteBackend", "k8sNamespace", "preventAutoDeploy", "organizationId", "description", "retry", "runTestsOnPullRequest", "isTerragruntRunAll", "projectIds", "tagPrefix", "repository", "revision", "path", "fileName", "helmChartName", "terraformVersion", "opentofuVersion", "terragruntVersion", "terragruntTfBinary", "pulumiVersion", "type", "gitlabProjectId", "tokenName", "tokenId", "sshKeys", "githubInstallationId", "bitbucketClientKey", "isBitbucketServer", "isGitLabEnterprise", "isGitHubEnterprise", "isGitLab", "isAzureDevOps", "isHelmRepository"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiCreateEnvironmentWithoutTemplateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deploy_request
        if self.deploy_request:
            _dict['deployRequest'] = self.deploy_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ttl
        if self.ttl:
            _dict['ttl'] = self.ttl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of configuration_changes
        if self.configuration_changes:
            _dict['configurationChanges'] = self.configuration_changes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drift_detection_request
        if self.drift_detection_request:
            _dict['driftDetectionRequest'] = self.drift_detection_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry
        if self.retry:
            _dict['retry'] = self.retry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terraform_version
        if self.terraform_version:
            _dict['terraformVersion'] = self.terraform_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ssh_keys (list)
        _items = []
        if self.ssh_keys:
            for _item in self.ssh_keys:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sshKeys'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if project_id (nullable) is None
        # and model_fields_set contains the field
        if self.project_id is None and "project_id" in self.model_fields_set:
            _dict['projectId'] = None

        # set to None if gitlab_project_id (nullable) is None
        # and model_fields_set contains the field
        if self.gitlab_project_id is None and "gitlab_project_id" in self.model_fields_set:
            _dict['gitlabProjectId'] = None

        # set to None if github_installation_id (nullable) is None
        # and model_fields_set contains the field
        if self.github_installation_id is None and "github_installation_id" in self.model_fields_set:
            _dict['githubInstallationId'] = None

        # set to None if bitbucket_client_key (nullable) is None
        # and model_fields_set contains the field
        if self.bitbucket_client_key is None and "bitbucket_client_key" in self.model_fields_set:
            _dict['bitbucketClientKey'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiCreateEnvironmentWithoutTemplateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployRequest": EnvironmentApiCreateEnvironmentWithoutTemplateRequestBodyDeployRequest.from_dict(obj["deployRequest"]) if obj.get("deployRequest") is not None else None,
            "name": obj.get("name"),
            "projectId": obj.get("projectId"),
            "workspaceName": obj.get("workspaceName"),
            "requiresApproval": obj.get("requiresApproval"),
            "ttl": EnvironmentApiTTLRequest.from_dict(obj["ttl"]) if obj.get("ttl") is not None else None,
            "configurationChanges": EnvironmentApiConfigurationChanges.from_dict(obj["configurationChanges"]) if obj.get("configurationChanges") is not None else None,
            "vcsCommandsAlias": obj.get("vcsCommandsAlias"),
            "continuousDeployment": obj.get("continuousDeployment"),
            "pullRequestPlanDeployments": obj.get("pullRequestPlanDeployments"),
            "driftDetectionRequest": EnvironmentApiDriftDetectionRequest.from_dict(obj["driftDetectionRequest"]) if obj.get("driftDetectionRequest") is not None else None,
            "autoDeployOnPathChangesOnly": obj.get("autoDeployOnPathChangesOnly"),
            "autoDeployByCustomGlob": obj.get("autoDeployByCustomGlob"),
            "terragruntWorkingDirectory": obj.get("terragruntWorkingDirectory"),
            "isRemoteBackend": obj.get("isRemoteBackend"),
            "k8sNamespace": obj.get("k8sNamespace"),
            "preventAutoDeploy": obj.get("preventAutoDeploy"),
            "organizationId": obj.get("organizationId"),
            "description": obj.get("description"),
            "retry": BlueprintApiRetry.from_dict(obj["retry"]) if obj.get("retry") is not None else None,
            "runTestsOnPullRequest": obj.get("runTestsOnPullRequest"),
            "isTerragruntRunAll": obj.get("isTerragruntRunAll"),
            "projectIds": obj.get("projectIds"),
            "tagPrefix": obj.get("tagPrefix"),
            "repository": obj.get("repository"),
            "revision": obj.get("revision"),
            "path": obj.get("path"),
            "fileName": obj.get("fileName"),
            "helmChartName": obj.get("helmChartName"),
            "terraformVersion": BlueprintApiTerraformVersion.from_dict(obj["terraformVersion"]) if obj.get("terraformVersion") is not None else None,
            "opentofuVersion": obj.get("opentofuVersion"),
            "terragruntVersion": obj.get("terragruntVersion"),
            "terragruntTfBinary": obj.get("terragruntTfBinary"),
            "pulumiVersion": obj.get("pulumiVersion"),
            "type": obj.get("type"),
            "gitlabProjectId": obj.get("gitlabProjectId"),
            "tokenName": obj.get("tokenName"),
            "tokenId": obj.get("tokenId"),
            "sshKeys": [BlueprintApiSshKey.from_dict(_item) for _item in obj["sshKeys"]] if obj.get("sshKeys") is not None else None,
            "githubInstallationId": obj.get("githubInstallationId"),
            "bitbucketClientKey": obj.get("bitbucketClientKey"),
            "isBitbucketServer": obj.get("isBitbucketServer"),
            "isGitLabEnterprise": obj.get("isGitLabEnterprise"),
            "isGitHubEnterprise": obj.get("isGitHubEnterprise"),
            "isGitLab": obj.get("isGitLab"),
            "isAzureDevOps": obj.get("isAzureDevOps"),
            "isHelmRepository": obj.get("isHelmRepository")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


