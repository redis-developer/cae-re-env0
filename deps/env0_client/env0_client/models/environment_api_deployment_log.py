# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from env0_client.models.custom_env0_environment_variables import CustomEnv0EnvironmentVariables
from env0_client.models.deployable_type import DeployableType
from env0_client.models.deployment_api_plan_plan_summary import DeploymentApiPlanPlanSummary
from env0_client.models.environment_api_deployment_log_output import EnvironmentApiDeploymentLogOutput
from env0_client.models.environment_api_deployment_log_plan import EnvironmentApiDeploymentLogPlan
from env0_client.models.environment_api_deployment_log_status import EnvironmentApiDeploymentLogStatus
from env0_client.models.environment_api_deployment_type import EnvironmentApiDeploymentType
from env0_client.models.environment_api_environment_resource import EnvironmentApiEnvironmentResource
from env0_client.models.environment_api_reviewer import EnvironmentApiReviewer
from env0_client.models.environment_api_reviewer_user import EnvironmentApiReviewerUser
from env0_client.models.environment_api_workflow_environments_workflow_file import EnvironmentApiWorkflowEnvironmentsWorkflowFile
from env0_client.models.infracost_total_output import InfracostTotalOutput
from env0_client.models.trigger_name import TriggerName
from env0_client.models.user import User
from env0_client.models.workflow_deployment_options import WorkflowDeploymentOptions
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiDeploymentLog(BaseModel):
    """
    EnvironmentApiDeploymentLog
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    type: EnvironmentApiDeploymentType
    started_by: Optional[StrictStr] = Field(default=None, alias="startedBy")
    queued_at: Optional[datetime] = Field(default=None, alias="queuedAt")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    finished_at: Optional[datetime] = Field(default=None, alias="finishedAt")
    output: Optional[EnvironmentApiDeploymentLogOutput] = None
    error: Optional[Dict[str, Any]] = None
    custom_env0_environment_variables: Optional[CustomEnv0EnvironmentVariables] = Field(default=None, alias="customEnv0EnvironmentVariables")
    cost_estimation: Optional[InfracostTotalOutput] = Field(default=None, alias="costEstimation")
    status: Optional[EnvironmentApiDeploymentLogStatus] = None
    blueprint_id: Optional[StrictStr] = Field(default=None, alias="blueprintId")
    blueprint_name: Optional[StrictStr] = Field(default=None, alias="blueprintName")
    blueprint_repository: Optional[StrictStr] = Field(default=None, alias="blueprintRepository")
    blueprint_revision: Optional[StrictStr] = Field(default=None, alias="blueprintRevision")
    blueprint_path: Optional[StrictStr] = Field(default=None, alias="blueprintPath")
    blueprint_type: Optional[DeployableType] = Field(default=None, alias="blueprintType")
    comment: Optional[StrictStr] = None
    environment_id: Optional[StrictStr] = Field(default=None, alias="environmentId")
    resource_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="resourceCount")
    resources: Optional[List[EnvironmentApiEnvironmentResource]] = None
    started_by_user: Optional[User] = Field(default=None, alias="startedByUser")
    is_scheduled_run: Optional[StrictBool] = Field(default=None, alias="isScheduledRun")
    aborted_by: Optional[StrictStr] = Field(default=None, alias="abortedBy")
    aborted_by_user: Optional[User] = Field(default=None, alias="abortedByUser")
    git_user: Optional[StrictStr] = Field(default=None, alias="gitUser")
    git_avatar_url: Optional[StrictStr] = Field(default=None, alias="gitAvatarUrl")
    pr_number: Optional[StrictStr] = Field(default=None, alias="prNumber")
    trigger_name: Optional[TriggerName] = Field(default=None, alias="triggerName")
    drift_detected: Optional[StrictBool] = Field(default=None, alias="driftDetected")
    plan: Optional[EnvironmentApiDeploymentLogPlan] = None
    plan_summary: Optional[DeploymentApiPlanPlanSummary] = Field(default=None, alias="planSummary")
    is_skipped_apply: Optional[StrictBool] = Field(default=None, alias="isSkippedApply")
    workflow_deployment_id: Optional[StrictStr] = Field(default=None, alias="workflowDeploymentId")
    workflow_file: Optional[EnvironmentApiWorkflowEnvironmentsWorkflowFile] = Field(default=None, alias="workflowFile")
    workflow_deployment_options: Optional[WorkflowDeploymentOptions] = Field(default=None, alias="workflowDeploymentOptions")
    state_version_id: Optional[StrictStr] = Field(default=None, alias="stateVersionId")
    reviewers_users: Optional[List[EnvironmentApiReviewerUser]] = Field(default=None, alias="reviewersUsers")
    reviewers: Optional[List[EnvironmentApiReviewer]] = None
    reviewed_by: Optional[StrictStr] = Field(default=None, alias="reviewedBy")
    reviewed_by_user: Optional[User] = Field(default=None, alias="reviewedByUser")
    targets: Optional[List[StrictStr]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "createdAt", "updatedAt", "type", "startedBy", "queuedAt", "startedAt", "finishedAt", "output", "error", "customEnv0EnvironmentVariables", "costEstimation", "status", "blueprintId", "blueprintName", "blueprintRepository", "blueprintRevision", "blueprintPath", "blueprintType", "comment", "environmentId", "resourceCount", "resources", "startedByUser", "isScheduledRun", "abortedBy", "abortedByUser", "gitUser", "gitAvatarUrl", "prNumber", "triggerName", "driftDetected", "plan", "planSummary", "isSkippedApply", "workflowDeploymentId", "workflowFile", "workflowDeploymentOptions", "stateVersionId", "reviewersUsers", "reviewers", "reviewedBy", "reviewedByUser", "targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiDeploymentLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output
        if self.output:
            _dict['output'] = self.output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_env0_environment_variables
        if self.custom_env0_environment_variables:
            _dict['customEnv0EnvironmentVariables'] = self.custom_env0_environment_variables.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cost_estimation
        if self.cost_estimation:
            _dict['costEstimation'] = self.cost_estimation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of started_by_user
        if self.started_by_user:
            _dict['startedByUser'] = self.started_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aborted_by_user
        if self.aborted_by_user:
            _dict['abortedByUser'] = self.aborted_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan
        if self.plan:
            _dict['plan'] = self.plan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plan_summary
        if self.plan_summary:
            _dict['planSummary'] = self.plan_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_file
        if self.workflow_file:
            _dict['workflowFile'] = self.workflow_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_deployment_options
        if self.workflow_deployment_options:
            _dict['workflowDeploymentOptions'] = self.workflow_deployment_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reviewers_users (list)
        _items = []
        if self.reviewers_users:
            for _item in self.reviewers_users:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviewersUsers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviewers (list)
        _items = []
        if self.reviewers:
            for _item in self.reviewers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviewers'] = _items
        # override the default output from pydantic by calling `to_dict()` of reviewed_by_user
        if self.reviewed_by_user:
            _dict['reviewedByUser'] = self.reviewed_by_user.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiDeploymentLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "type": obj.get("type"),
            "startedBy": obj.get("startedBy"),
            "queuedAt": obj.get("queuedAt"),
            "startedAt": obj.get("startedAt"),
            "finishedAt": obj.get("finishedAt"),
            "output": EnvironmentApiDeploymentLogOutput.from_dict(obj["output"]) if obj.get("output") is not None else None,
            "error": obj.get("error"),
            "customEnv0EnvironmentVariables": CustomEnv0EnvironmentVariables.from_dict(obj["customEnv0EnvironmentVariables"]) if obj.get("customEnv0EnvironmentVariables") is not None else None,
            "costEstimation": InfracostTotalOutput.from_dict(obj["costEstimation"]) if obj.get("costEstimation") is not None else None,
            "status": obj.get("status"),
            "blueprintId": obj.get("blueprintId"),
            "blueprintName": obj.get("blueprintName"),
            "blueprintRepository": obj.get("blueprintRepository"),
            "blueprintRevision": obj.get("blueprintRevision"),
            "blueprintPath": obj.get("blueprintPath"),
            "blueprintType": obj.get("blueprintType"),
            "comment": obj.get("comment"),
            "environmentId": obj.get("environmentId"),
            "resourceCount": obj.get("resourceCount"),
            "resources": [EnvironmentApiEnvironmentResource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "startedByUser": User.from_dict(obj["startedByUser"]) if obj.get("startedByUser") is not None else None,
            "isScheduledRun": obj.get("isScheduledRun"),
            "abortedBy": obj.get("abortedBy"),
            "abortedByUser": User.from_dict(obj["abortedByUser"]) if obj.get("abortedByUser") is not None else None,
            "gitUser": obj.get("gitUser"),
            "gitAvatarUrl": obj.get("gitAvatarUrl"),
            "prNumber": obj.get("prNumber"),
            "triggerName": obj.get("triggerName"),
            "driftDetected": obj.get("driftDetected"),
            "plan": EnvironmentApiDeploymentLogPlan.from_dict(obj["plan"]) if obj.get("plan") is not None else None,
            "planSummary": DeploymentApiPlanPlanSummary.from_dict(obj["planSummary"]) if obj.get("planSummary") is not None else None,
            "isSkippedApply": obj.get("isSkippedApply"),
            "workflowDeploymentId": obj.get("workflowDeploymentId"),
            "workflowFile": EnvironmentApiWorkflowEnvironmentsWorkflowFile.from_dict(obj["workflowFile"]) if obj.get("workflowFile") is not None else None,
            "workflowDeploymentOptions": WorkflowDeploymentOptions.from_dict(obj["workflowDeploymentOptions"]) if obj.get("workflowDeploymentOptions") is not None else None,
            "stateVersionId": obj.get("stateVersionId"),
            "reviewersUsers": [EnvironmentApiReviewerUser.from_dict(_item) for _item in obj["reviewersUsers"]] if obj.get("reviewersUsers") is not None else None,
            "reviewers": [EnvironmentApiReviewer.from_dict(_item) for _item in obj["reviewers"]] if obj.get("reviewers") is not None else None,
            "reviewedBy": obj.get("reviewedBy"),
            "reviewedByUser": User.from_dict(obj["reviewedByUser"]) if obj.get("reviewedByUser") is not None else None,
            "targets": obj.get("targets")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


