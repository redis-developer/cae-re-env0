# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.auto_destroy_status import AutoDestroyStatus
from env0_client.models.environment_api_deployment_log import EnvironmentApiDeploymentLog
from env0_client.models.environment_api_drift_status import EnvironmentApiDriftStatus
from env0_client.models.environment_api_environment_lock_status import EnvironmentApiEnvironmentLockStatus
from env0_client.models.environment_api_environment_next_scheduled_dates import EnvironmentApiEnvironmentNextScheduledDates
from env0_client.models.environment_api_environment_status import EnvironmentApiEnvironmentStatus
from env0_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiEnvironment(BaseModel):
    """
    EnvironmentApiEnvironment
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    name: StrictStr
    organization_id: StrictStr = Field(alias="organizationId")
    project_id: StrictStr = Field(alias="projectId")
    user_id: StrictStr = Field(alias="userId")
    workspace_name: StrictStr = Field(alias="workspaceName")
    user: Optional[User] = None
    requires_approval: StrictBool = Field(alias="requiresApproval")
    status: EnvironmentApiEnvironmentStatus
    latest_deployment_log_id: StrictStr = Field(alias="latestDeploymentLogId")
    latest_deployment_log: EnvironmentApiDeploymentLog = Field(alias="latestDeploymentLog")
    lifespan_end_at: datetime = Field(alias="lifespanEndAt")
    marked_for_auto_destroy: AutoDestroyStatus = Field(alias="markedForAutoDestroy")
    is_archived: StrictBool = Field(description="Mark the environment as inactive", alias="isArchived")
    next_scheduled_dates: Optional[EnvironmentApiEnvironmentNextScheduledDates] = Field(default=None, alias="nextScheduledDates")
    vcs_commands_alias: Optional[StrictStr] = Field(default=None, alias="vcsCommandsAlias")
    continuous_deployment: StrictBool = Field(alias="continuousDeployment")
    pull_request_plan_deployments: StrictBool = Field(alias="pullRequestPlanDeployments")
    auto_deploy_on_path_changes_only: StrictBool = Field(alias="autoDeployOnPathChangesOnly")
    auto_deploy_by_custom_glob: Optional[StrictStr] = Field(default=None, alias="autoDeployByCustomGlob")
    terragrunt_working_directory: Optional[StrictStr] = Field(default=None, alias="terragruntWorkingDirectory")
    is_single_use_blueprint: Optional[StrictBool] = Field(default=None, alias="isSingleUseBlueprint")
    workflow_environment_id: Optional[StrictStr] = Field(default=None, alias="workflowEnvironmentId")
    is_remote_backend: StrictBool = Field(alias="isRemoteBackend")
    is_locked: StrictBool = Field(alias="isLocked")
    lock_status: Optional[EnvironmentApiEnvironmentLockStatus] = Field(default=None, alias="lockStatus")
    k8s_namespace: Optional[StrictStr] = Field(default=None, alias="k8sNamespace")
    is_remote_apply_enabled: Optional[StrictBool] = Field(default=None, alias="isRemoteApplyEnabled")
    drift_status: EnvironmentApiDriftStatus = Field(alias="driftStatus")
    __properties: ClassVar[List[str]] = ["id", "createdAt", "updatedAt", "name", "organizationId", "projectId", "userId", "workspaceName", "user", "requiresApproval", "status", "latestDeploymentLogId", "latestDeploymentLog", "lifespanEndAt", "markedForAutoDestroy", "isArchived", "nextScheduledDates", "vcsCommandsAlias", "continuousDeployment", "pullRequestPlanDeployments", "autoDeployOnPathChangesOnly", "autoDeployByCustomGlob", "terragruntWorkingDirectory", "isSingleUseBlueprint", "workflowEnvironmentId", "isRemoteBackend", "isLocked", "lockStatus", "k8sNamespace", "isRemoteApplyEnabled", "driftStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_deployment_log
        if self.latest_deployment_log:
            _dict['latestDeploymentLog'] = self.latest_deployment_log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_scheduled_dates
        if self.next_scheduled_dates:
            _dict['nextScheduledDates'] = self.next_scheduled_dates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lock_status
        if self.lock_status:
            _dict['lockStatus'] = self.lock_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "name": obj.get("name"),
            "organizationId": obj.get("organizationId"),
            "projectId": obj.get("projectId"),
            "userId": obj.get("userId"),
            "workspaceName": obj.get("workspaceName"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "requiresApproval": obj.get("requiresApproval"),
            "status": obj.get("status"),
            "latestDeploymentLogId": obj.get("latestDeploymentLogId"),
            "latestDeploymentLog": EnvironmentApiDeploymentLog.from_dict(obj["latestDeploymentLog"]) if obj.get("latestDeploymentLog") is not None else None,
            "lifespanEndAt": obj.get("lifespanEndAt"),
            "markedForAutoDestroy": obj.get("markedForAutoDestroy"),
            "isArchived": obj.get("isArchived"),
            "nextScheduledDates": EnvironmentApiEnvironmentNextScheduledDates.from_dict(obj["nextScheduledDates"]) if obj.get("nextScheduledDates") is not None else None,
            "vcsCommandsAlias": obj.get("vcsCommandsAlias"),
            "continuousDeployment": obj.get("continuousDeployment"),
            "pullRequestPlanDeployments": obj.get("pullRequestPlanDeployments"),
            "autoDeployOnPathChangesOnly": obj.get("autoDeployOnPathChangesOnly"),
            "autoDeployByCustomGlob": obj.get("autoDeployByCustomGlob"),
            "terragruntWorkingDirectory": obj.get("terragruntWorkingDirectory"),
            "isSingleUseBlueprint": obj.get("isSingleUseBlueprint"),
            "workflowEnvironmentId": obj.get("workflowEnvironmentId"),
            "isRemoteBackend": obj.get("isRemoteBackend"),
            "isLocked": obj.get("isLocked"),
            "lockStatus": EnvironmentApiEnvironmentLockStatus.from_dict(obj["lockStatus"]) if obj.get("lockStatus") is not None else None,
            "k8sNamespace": obj.get("k8sNamespace"),
            "isRemoteApplyEnabled": obj.get("isRemoteApplyEnabled"),
            "driftStatus": obj.get("driftStatus")
        })
        return _obj


