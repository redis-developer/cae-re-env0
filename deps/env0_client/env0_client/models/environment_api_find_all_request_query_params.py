# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiFindAllRequestQueryParams(BaseModel):
    """
    EnvironmentApiFindAllRequestQueryParams
    """ # noqa: E501
    limit: Optional[StrictStr] = None
    offset: Optional[StrictStr] = None
    only_my: Optional[StrictStr] = Field(default=None, alias="onlyMy")
    is_active: Optional[StrictStr] = Field(default=None, alias="isActive")
    include_sub_environments: Optional[StrictStr] = Field(default=None, alias="includeSubEnvironments")
    name: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    workspace_name: Optional[StrictStr] = Field(default=None, alias="workspaceName")
    workspace_name_prefix: Optional[Any] = Field(default=None, description="filter by prefix of workspaceName, ignored when workspaceName is sent", alias="workspaceNamePrefix")
    is_remote_backend: Optional[StrictStr] = Field(default=None, alias="isRemoteBackend")
    search_text: Optional[StrictStr] = Field(default=None, alias="searchText")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["limit", "offset", "onlyMy", "isActive", "includeSubEnvironments", "name", "organizationId", "projectId", "workspaceName", "workspaceNamePrefix", "isRemoteBackend", "searchText"]

    @field_validator('only_my')
    def only_my_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    @field_validator('is_active')
    def is_active_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    @field_validator('include_sub_environments')
    def include_sub_environments_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    @field_validator('is_remote_backend')
    def is_remote_backend_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true']):
            raise ValueError("must be one of enum values ('false', 'true')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiFindAllRequestQueryParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if workspace_name_prefix (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_name_prefix is None and "workspace_name_prefix" in self.model_fields_set:
            _dict['workspaceNamePrefix'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiFindAllRequestQueryParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "onlyMy": obj.get("onlyMy"),
            "isActive": obj.get("isActive"),
            "includeSubEnvironments": obj.get("includeSubEnvironments"),
            "name": obj.get("name"),
            "organizationId": obj.get("organizationId"),
            "projectId": obj.get("projectId"),
            "workspaceName": obj.get("workspaceName"),
            "workspaceNamePrefix": obj.get("workspaceNamePrefix"),
            "isRemoteBackend": obj.get("isRemoteBackend"),
            "searchText": obj.get("searchText")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


