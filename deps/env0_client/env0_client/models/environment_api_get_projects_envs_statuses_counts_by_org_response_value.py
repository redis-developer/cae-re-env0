# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from env0_client.models.environment_api_get_projects_envs_statuses_counts_by_org_response_value_drift_status import EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValueDriftStatus
from typing import Optional, Set
from typing_extensions import Self

class EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValue(BaseModel):
    """
    EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValue
    """ # noqa: E501
    drift_status: EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValueDriftStatus = Field(alias="driftStatus")
    created: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CREATED")
    inactive: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="INACTIVE")
    active: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ACTIVE")
    failed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FAILED")
    timeout: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TIMEOUT")
    waiting_for_user: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="WAITING_FOR_USER")
    deploy_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DEPLOY_IN_PROGRESS")
    destroy_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DESTROY_IN_PROGRESS")
    pr_plan_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PR_PLAN_IN_PROGRESS")
    remote_plan_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="REMOTE_PLAN_IN_PROGRESS")
    drift_detection_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DRIFT_DETECTION_IN_PROGRESS")
    task_in_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TASK_IN_PROGRESS")
    aborting: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ABORTING")
    aborted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ABORTED")
    never_deployed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="NEVER_DEPLOYED")
    drifted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DRIFTED")
    total: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["driftStatus", "CREATED", "INACTIVE", "ACTIVE", "FAILED", "TIMEOUT", "WAITING_FOR_USER", "DEPLOY_IN_PROGRESS", "DESTROY_IN_PROGRESS", "PR_PLAN_IN_PROGRESS", "REMOTE_PLAN_IN_PROGRESS", "DRIFT_DETECTION_IN_PROGRESS", "TASK_IN_PROGRESS", "ABORTING", "ABORTED", "NEVER_DEPLOYED", "DRIFTED", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drift_status
        if self.drift_status:
            _dict['driftStatus'] = self.drift_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "driftStatus": EnvironmentApiGetProjectsEnvsStatusesCountsByOrgResponseValueDriftStatus.from_dict(obj["driftStatus"]) if obj.get("driftStatus") is not None else None,
            "CREATED": obj.get("CREATED"),
            "INACTIVE": obj.get("INACTIVE"),
            "ACTIVE": obj.get("ACTIVE"),
            "FAILED": obj.get("FAILED"),
            "TIMEOUT": obj.get("TIMEOUT"),
            "WAITING_FOR_USER": obj.get("WAITING_FOR_USER"),
            "DEPLOY_IN_PROGRESS": obj.get("DEPLOY_IN_PROGRESS"),
            "DESTROY_IN_PROGRESS": obj.get("DESTROY_IN_PROGRESS"),
            "PR_PLAN_IN_PROGRESS": obj.get("PR_PLAN_IN_PROGRESS"),
            "REMOTE_PLAN_IN_PROGRESS": obj.get("REMOTE_PLAN_IN_PROGRESS"),
            "DRIFT_DETECTION_IN_PROGRESS": obj.get("DRIFT_DETECTION_IN_PROGRESS"),
            "TASK_IN_PROGRESS": obj.get("TASK_IN_PROGRESS"),
            "ABORTING": obj.get("ABORTING"),
            "ABORTED": obj.get("ABORTED"),
            "NEVER_DEPLOYED": obj.get("NEVER_DEPLOYED"),
            "DRIFTED": obj.get("DRIFTED"),
            "total": obj.get("total")
        })
        return _obj


