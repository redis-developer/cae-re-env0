# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.organization_api_organization_mode import OrganizationApiOrganizationMode
from env0_client.models.organization_api_project_custom_flows_policy import OrganizationApiProjectCustomFlowsPolicy
from typing import Optional, Set
from typing_extensions import Self

class OrganizationApiOrganization(BaseModel):
    """
    OrganizationApiOrganization
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    max_ttl: Optional[StrictStr] = Field(default=None, alias="maxTtl")
    default_ttl: Optional[StrictStr] = Field(default=None, alias="defaultTtl")
    do_not_report_skipped_status_checks: Optional[StrictBool] = Field(default=None, alias="doNotReportSkippedStatusChecks")
    do_not_consider_merge_commits_for_pr_plans: Optional[StrictBool] = Field(default=None, alias="doNotConsiderMergeCommitsForPrPlans")
    enable_oidc: Optional[StrictBool] = Field(default=None, alias="enableOidc")
    description: Optional[StrictStr] = None
    photo_url: Optional[StrictStr] = Field(default=None, alias="photoUrl")
    created_by: StrictStr = Field(alias="createdBy")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    mode: OrganizationApiOrganizationMode
    trial_end: Optional[datetime] = Field(default=None, alias="trialEnd")
    enforce_pr_commenter_permissions: Optional[StrictBool] = Field(default=None, alias="enforcePrCommenterPermissions")
    project_custom_flows_policy: OrganizationApiProjectCustomFlowsPolicy = Field(alias="projectCustomFlowsPolicy")
    role: StrictStr
    is_self_hosted_k8s: Optional[StrictBool] = Field(default=None, alias="isSelfHostedK8s")
    __properties: ClassVar[List[str]] = ["id", "name", "maxTtl", "defaultTtl", "doNotReportSkippedStatusChecks", "doNotConsiderMergeCommitsForPrPlans", "enableOidc", "description", "photoUrl", "createdBy", "createdAt", "updatedAt", "mode", "trialEnd", "enforcePrCommenterPermissions", "projectCustomFlowsPolicy", "role", "isSelfHostedK8s"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationApiOrganization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if max_ttl (nullable) is None
        # and model_fields_set contains the field
        if self.max_ttl is None and "max_ttl" in self.model_fields_set:
            _dict['maxTtl'] = None

        # set to None if default_ttl (nullable) is None
        # and model_fields_set contains the field
        if self.default_ttl is None and "default_ttl" in self.model_fields_set:
            _dict['defaultTtl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationApiOrganization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "maxTtl": obj.get("maxTtl"),
            "defaultTtl": obj.get("defaultTtl"),
            "doNotReportSkippedStatusChecks": obj.get("doNotReportSkippedStatusChecks"),
            "doNotConsiderMergeCommitsForPrPlans": obj.get("doNotConsiderMergeCommitsForPrPlans"),
            "enableOidc": obj.get("enableOidc"),
            "description": obj.get("description"),
            "photoUrl": obj.get("photoUrl"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "mode": obj.get("mode"),
            "trialEnd": obj.get("trialEnd"),
            "enforcePrCommenterPermissions": obj.get("enforcePrCommenterPermissions"),
            "projectCustomFlowsPolicy": obj.get("projectCustomFlowsPolicy"),
            "role": obj.get("role"),
            "isSelfHostedK8s": obj.get("isSelfHostedK8s")
        })
        return _obj


