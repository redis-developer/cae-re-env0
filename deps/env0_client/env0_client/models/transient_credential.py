# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from env0_client.models.credential_type import CredentialType
from env0_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class TransientCredential(BaseModel):
    """
    TransientCredential
    """ # noqa: E501
    type: CredentialType
    created_by_user: Optional[User] = Field(default=None, alias="createdByUser")
    value: Dict[str, Any] = Field(description="A JSON string representation of the provider credentials. - For AWS_ASSUMED_ROLE_FOR_DEPLOYMENT and AWS_ASSUMED_ROLE types use: { roleArn: \"your-role-arn\", duration?: \"duration-in-seconds\" }  - For GCP_CREDENTIALS type use: { tableId: \"your-table-id\", secret: \"your-secret\" }  - For AZURE_CREDENTIALS type use: { clientId: \"your-clientId\", clientSecret: \"your-clientSecret\", tenantId: \"your-tenantId\", subscriptionId: \"your-subscriptionId\" }")
    encryption_method: Optional[StrictStr] = Field(default=None, alias="encryptionMethod")
    name: StrictStr
    organization_id: StrictStr = Field(alias="organizationId")
    __properties: ClassVar[List[str]] = ["type", "createdByUser", "value", "encryptionMethod", "name", "organizationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransientCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_by_user
        if self.created_by_user:
            _dict['createdByUser'] = self.created_by_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransientCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "createdByUser": User.from_dict(obj["createdByUser"]) if obj.get("createdByUser") is not None else None,
            "value": obj.get("value"),
            "encryptionMethod": obj.get("encryptionMethod"),
            "name": obj.get("name"),
            "organizationId": obj.get("organizationId")
        })
        return _obj


