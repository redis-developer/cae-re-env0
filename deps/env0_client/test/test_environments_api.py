# coding: utf-8

"""
    env0 API

    This document describes the resources that make up the official env0 REST API  ### BaseURL https://api.env0.com/  ### Content Types All requests should be in JSON format, and include the `accept: application/json` header 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from env0_client.api.environments_api import EnvironmentsApi


class TestEnvironmentsApi(unittest.TestCase):
    """EnvironmentsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = EnvironmentsApi()

    def tearDown(self) -> None:
        pass

    def test_environments_abort(self) -> None:
        """Test case for environments_abort

        Abort Deployment
        """
        pass

    def test_environments_batch_cancel(self) -> None:
        """Test case for environments_batch_cancel

        Batch Cancel Deployments
        """
        pass

    def test_environments_cancel(self) -> None:
        """Test case for environments_cancel

        Cancel Deployment
        """
        pass

    def test_environments_check_limit(self) -> None:
        """Test case for environments_check_limit

        Check Environment meets Project limits
        """
        pass

    def test_environments_count_by_project(self) -> None:
        """Test case for environments_count_by_project

        Count Environments
        """
        pass

    def test_environments_create(self) -> None:
        """Test case for environments_create

        Create Environment
        """
        pass

    def test_environments_create_environment_without_template(self) -> None:
        """Test case for environments_create_environment_without_template

        Create an Environment Without Template
        """
        pass

    def test_environments_deploy(self) -> None:
        """Test case for environments_deploy

        Deploy Environment
        """
        pass

    def test_environments_destroy(self) -> None:
        """Test case for environments_destroy

        Destroy Environment
        """
        pass

    def test_environments_find_all(self) -> None:
        """Test case for environments_find_all

        List Environments
        """
        pass

    def test_environments_find_by_id(self) -> None:
        """Test case for environments_find_by_id

        Get Environment
        """
        pass

    def test_environments_find_deployment_log_by_id(self) -> None:
        """Test case for environments_find_deployment_log_by_id

        Get Deployment
        """
        pass

    def test_environments_find_deployment_logs_by_environment_id(self) -> None:
        """Test case for environments_find_deployment_logs_by_environment_id

        List Deployments
        """
        pass

    def test_environments_find_downstream_environments(self) -> None:
        """Test case for environments_find_downstream_environments

        Get downstream environments that will be triggered by this environment deployment
        """
        pass

    def test_environments_find_resources(self) -> None:
        """Test case for environments_find_resources

        List Resources
        """
        pass

    def test_environments_find_sub_deployment_log(self) -> None:
        """Test case for environments_find_sub_deployment_log

        Get Sub Deployment Log In A Workflow By Workflow Deployment Id And Environment Id
        """
        pass

    def test_environments_get_environments_outputs(self) -> None:
        """Test case for environments_get_environments_outputs

        Get Environments Outputs
        """
        pass

    def test_environments_get_projects_envs_statuses_counts_by_org(self) -> None:
        """Test case for environments_get_projects_envs_statuses_counts_by_org

        Counts all selected statuses of organization projects
        """
        pass

    def test_environments_rerun_deployment(self) -> None:
        """Test case for environments_rerun_deployment

        Rerun PR plan
        """
        pass

    def test_environments_resume(self) -> None:
        """Test case for environments_resume

        Resume Deployment
        """
        pass

    def test_environments_save_as_template(self) -> None:
        """Test case for environments_save_as_template

        Save VCS environment as a template
        """
        pass

    def test_environments_subscribe_downstream_environments(self) -> None:
        """Test case for environments_subscribe_downstream_environments

        Subscribe environments as workflow-trigger
        """
        pass

    def test_environments_ttl(self) -> None:
        """Test case for environments_ttl

        Update Environment TTL
        """
        pass

    def test_environments_unsubscribe_downstream_environments(self) -> None:
        """Test case for environments_unsubscribe_downstream_environments

        Unsubscribe environments as workflow-trigger
        """
        pass

    def test_environments_update(self) -> None:
        """Test case for environments_update

        Update Environment
        """
        pass

    def test_environments_update_downstream_environments(self) -> None:
        """Test case for environments_update_downstream_environments

        Create or Update Workflow Trigger
        """
        pass

    def test_environments_update_environment_lock(self) -> None:
        """Test case for environments_update_environment_lock

        Lock/Unlock environment
        """
        pass


if __name__ == '__main__':
    unittest.main()
