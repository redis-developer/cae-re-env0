{
    "openapi": "3.1.0",
    "components": {
        "securitySchemes": {
            "env0_API_Key": {
                "type": "http",
                "scheme": "basic",
                "description": "\nAuthentication against the env0 API is done via API Keys.\n\nAn API Key is created by an organization administrator, but is not connected to any specific user when it's being used.\n\n### Creating an API Key With a Specific Role\n- Once you've created your own organization, you can create and manage API Keys.\n- Navigate to the Organization Settings page and click the API Keys tab.\n- Click Add API Key, and enter a name for your key in the Name field. This name is for your reference and isn't used directly in authentication.\n\n  > \u2757\ufe0fSave Your API Key ID & Secret\n  > The secret will not be available after you close this modal\n\n### Creating a Personal API Key\n- Click on your avatar (located on the top right of the screen)\n- Click on Personal Settings\n- Select the API Keys tab\n- Click Add API Key, and enter a name for your key in the Name field.\nThis name is for your reference and isn't used directly in authentication.\n\n  > \u2757\ufe0fSave Your API Key ID & Secret\n  > The secret will not be available after you close this modal\n\n### Using an API Key to Authenticate\nAuthentication to the env0 API is done using the Basic Authentication method.\nEach request made should include the API Key ID as the username, and the API Key Secret as the password.\nFor example - when Using curl, we can include these parameters using the flag --user {API Key ID}:{API Key Secret}.\n\n### API Key Permissions\nAPI Keys are given the role of an Organization Admin, meaning they can be used to perform any action, in any project, under the scope of the organization.\n"
            }
        },
        "schemas": {
            "AccountApi.VcsProviderUserMapping": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "vcsProviderUserId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "userId",
                    "vcsProviderUserId",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AccountApi.GetVcsProviderUserMappings.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AccountApi.VcsProviderUserMapping"
                }
            },
            "AccountApi.UpdateVcsProviderUserMappings.Request.Body": {
                "type": "object",
                "properties": {
                    "vcsProviderUserId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "vcsProviderUserId",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AccountApi.UpdateVcsProviderUserMappings.Response": {
                "$ref": "#/components/schemas/AccountApi.VcsProviderUserMapping"
            },
            "AccountApi.UpdateVcsProviderUserMappings.Request.PathParams": {
                "type": "object",
                "properties": {
                    "mappingId": {
                        "type": "string"
                    }
                },
                "required": [
                    "mappingId"
                ],
                "additionalProperties": false
            },
            "AccountApi.CreateVcsProviderUserMapping.Request.Body": {
                "type": "object",
                "properties": {
                    "vcsProviderUserId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "vcsProviderUserId",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AccountApi.CreateVcsProviderUserMapping.Response": {
                "$ref": "#/components/schemas/AccountApi.VcsProviderUserMapping"
            },
            "AgentSettingsApi.AgentMonitoringDetails": {
                "type": "object",
                "properties": {
                    "agentKey": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/AgentSettingsApi.AgentStatus"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "agentKey",
                    "status"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.AgentStatus": {
                "type": "string",
                "enum": [
                    "INACTIVE",
                    "ACTIVE",
                    "DEGRADED"
                ]
            },
            "AgentSettingsApi.ListAgents.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AgentSettingsApi.AgentMonitoringDetails"
                }
            },
            "AgentSettingsApi.ListAgents.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.GetAgentValues.Response": {
                "type": "string"
            },
            "AgentSettingsApi.GetAgentValues.Request.PathParams": {
                "type": "object",
                "properties": {
                    "agentKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "agentKey"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.GetDockerAgentDotEnv.Response": {
                "type": "string"
            },
            "AgentSettingsApi.GetDockerAgentDotEnv.Request.PathParams": {
                "type": "object",
                "properties": {
                    "agentKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "agentKey"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.ProjectIdToAgentKeyMap": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                }
            },
            "AgentSettingsApi.GetAgentAssignments.Response": {
                "type": "object",
                "properties": {
                    "defaultAgent": {
                        "type": "string"
                    },
                    "projectsAgents": {
                        "$ref": "#/components/schemas/AgentSettingsApi.ProjectIdToAgentKeyMap"
                    }
                },
                "required": [
                    "defaultAgent",
                    "projectsAgents"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.GetAgentAssignments.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AgentSettingsApi.AssignAgents.Request.Body": {
                "$ref": "#/components/schemas/AgentSettingsApi.ProjectIdToAgentKeyMap"
            },
            "AgentSettingsApi.AssignAgents.Response": {
                "$ref": "#/components/schemas/AgentSettingsApi.GetAgentAssignments.Response"
            },
            "AgentSettingsApi.AssignAgents.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "AuditEventApi.AuditLog": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "actor": {
                        "$ref": "#/components/schemas/User"
                    },
                    "actorId": {
                        "type": "string"
                    },
                    "actionName": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "payload": {
                        "type": "object"
                    }
                },
                "required": [
                    "actionName",
                    "actorId",
                    "timestamp"
                ]
            },
            "User": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "app_metadata": {
                        "type": "object"
                    },
                    "picture": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "last_login": {
                        "type": "string"
                    },
                    "given_name": {
                        "type": "string"
                    },
                    "family_name": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "AuditEventApi.FetchAuditLogs.Response": {
                "type": "object",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditEventApi.AuditLog"
                        }
                    },
                    "nextPageKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "events",
                    "nextPageKey"
                ],
                "additionalProperties": false
            },
            "AuditEventApi.FetchAuditLogs.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "from": {
                        "type": "string"
                    },
                    "to": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ]
            },
            "BlueprintApi.Retry": {
                "type": "object",
                "properties": {
                    "onDestroy": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BlueprintApi.RetryDeployOrDestroyConfig"
                            },
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/BlueprintApi.RetryDeployOrDestroyConfig"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "onDeploy": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/BlueprintApi.RetryDeployOrDestroyConfig"
                            },
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/BlueprintApi.RetryDeployOrDestroyConfig"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": false
            },
            "BlueprintApi.RetryDeployOrDestroyConfig": {
                "type": "object",
                "properties": {
                    "times": {
                        "type": "number"
                    },
                    "errorRegex": {
                        "type": "string"
                    }
                },
                "required": [
                    "times",
                    "times"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.TerraformVersion": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "const": "RESOLVE_FROM_TERRAFORM_CODE"
                    },
                    {
                        "$ref": "#/components/schemas/BlueprintApi.BackwardCompatibleTFVersionType"
                    },
                    {
                        "type": "string",
                        "const": "latest"
                    },
                    {
                        "type": "string"
                    },
                    {
                        "type": "string",
                        "const": "RESOLVE_FROM_TERRAFORM_CODE"
                    },
                    {
                        "$ref": "#/components/schemas/BlueprintApi.BackwardCompatibleTFVersionType"
                    },
                    {
                        "type": "string",
                        "const": "latest"
                    }
                ]
            },
            "BlueprintApi.BackwardCompatibleTFVersionType": {
                "type": "null"
            },
            "BlueprintApi.OpentofuVersion": {
                "type": "string"
            },
            "BlueprintApi.TerragruntTfBinary": {
                "type": "string",
                "enum": [
                    "terraform",
                    "opentofu"
                ]
            },
            "BlueprintApi.PulumiVersionType": {
                "type": "string"
            },
            "BlueprintApi.BlueprintType": {
                "$ref": "#/components/schemas/BlueprintType"
            },
            "BlueprintType": {
                "type": "string",
                "enum": [
                    "cloudformation",
                    "terraform",
                    "approval-policy",
                    "opentofu",
                    "custom-flow",
                    "helm",
                    "module",
                    "environment-discovery",
                    "workflow",
                    "pulumi",
                    "terragrunt",
                    "k8s"
                ]
            },
            "BlueprintApi.SshKey": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "id",
                    "name"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.CreateBlueprint.Request.Body": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BlueprintApi.Retry"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "isTerragruntRunAll": {
                        "type": "boolean"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.Blueprint": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BlueprintApi.Retry"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "isTerragruntRunAll": {
                        "type": "boolean"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "isSingleUse": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.CreateBlueprint.Response": {
                "$ref": "#/components/schemas/BlueprintApi.Blueprint"
            },
            "BlueprintApi.BlueprintUserFields": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BlueprintApi.Retry"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "isTerragruntRunAll": {
                        "type": "boolean"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.UpdateBlueprint.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.BlueprintUserFields"
            },
            "BlueprintApi.UpdateBlueprint.Response": {
                "$ref": "#/components/schemas/BlueprintApi.Blueprint"
            },
            "BlueprintApi.GetBlueprintById.Response": {
                "$ref": "#/components/schemas/BlueprintApi.Blueprint"
            },
            "RevisionsNamesResponse": {
                "type": "object",
                "properties": {
                    "heads": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "heads",
                    "tags"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetVcsRepositoryRevisions.Response": {
                "$ref": "#/components/schemas/RevisionsNamesResponse"
            },
            "BlueprintApi.VcsQueryParams": {
                "type": "object",
                "properties": {
                    "repository": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": "string"
                    },
                    "sshKeyIds": {
                        "type": "string"
                    },
                    "bitbucketClientKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetVcsRepositoryRevisions.Request.QueryParams": {
                "$ref": "#/components/schemas/BlueprintApi.VcsQueryParams"
            },
            "BlueprintApi.FindAll.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.Blueprint"
                }
            },
            "BlueprintApi.AddBlueprintToProject.Request.Body": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.AddBlueprintToProject.Response": {
                "$ref": "#/components/schemas/BlueprintApi.Blueprint"
            },
            "BlueprintApi.GetVariablesFromRepository.RepositoryVariable": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created."
                    },
                    "isSensitive": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "regex": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationScope"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ConfigurationType",
                        "description": "Whether it is an Environment or Terraform variable\n0 value maps to an Environment variable\n1 value maps to an Terraform variable"
                    },
                    "toDelete": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/PartialJSONSchema7",
                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "scope",
                    "type"
                ],
                "additionalProperties": false
            },
            "ConfigurationScope": {
                "type": "string",
                "enum": [
                    "WORKFLOW",
                    "ENVIRONMENT",
                    "DEPLOYMENT",
                    "GLOBAL",
                    "SET",
                    "PROJECT",
                    "BLUEPRINT"
                ]
            },
            "ConfigurationType": {
                "type": "number",
                "enum": [
                    0,
                    1
                ]
            },
            "PartialJSONSchema7": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "const": "string"
                    },
                    "enum": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "format": {
                        "type": "string",
                        "enum": [
                            "JSON",
                            "ENVIRONMENT_OUTPUT",
                            "HCL"
                        ]
                    }
                },
                "additionalProperties": false
            },
            "BlueprintApi.GetVariablesFromRepository.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.GetVariablesFromRepository.RepositoryVariable"
                }
            },
            "BlueprintApi.GetVariablesFromRepository.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": "string"
                    },
                    "sshKeyIds": {
                        "type": "string"
                    },
                    "bitbucketClientKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "repository"
                ]
            },
            "BlueprintApi.ExistingModule": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "Module Name. Can be made of up to 64 characters, containing alphanumeric, hyphens and underscores. Must not contain leading/trailing hyphens/underscores.",
                        "pattern": "^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ *"
                    },
                    "moduleProvider": {
                        "type": "string",
                        "description": "Module Provider. Can be made of up to 64 characters, containing lowercase alphanumeric characters only.",
                        "pattern": "^[0-9a-z]{0,64}$ *"
                    },
                    "moduleTestEnabled": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ModuleType"
                    },
                    "testingEnvironmentId": {
                        "type": "string"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "moduleName",
                    "moduleProvider",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.ModuleType": {
                "$ref": "#/components/schemas/ModuleType"
            },
            "ModuleType": {
                "type": "string",
                "const": "module"
            },
            "BlueprintApi.FindAllModules.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.ExistingModule"
                }
            },
            "BlueprintApi.FindAllModules.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetModuleVersions.ModuleVersionMetadata": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    },
                    "gitTag": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "version",
                    "gitTag",
                    "createdAt"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetModuleVersions.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.GetModuleVersions.ModuleVersionMetadata"
                }
            },
            "BlueprintApi.GetModuleReadme.Response": {
                "type": [
                    "string",
                    "null"
                ]
            },
            "BlueprintApi.CreateModule.Request.Body": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ModuleType"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "moduleName": {
                        "type": "string",
                        "description": "Module Name. Can be made of up to 64 characters, containing alphanumeric, hyphens and underscores. Must not contain leading/trailing hyphens/underscores.",
                        "pattern": "^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ *"
                    },
                    "moduleProvider": {
                        "type": "string",
                        "description": "Module Provider. Can be made of up to 64 characters, containing lowercase alphanumeric characters only.",
                        "pattern": "^[0-9a-z]{0,64}$ *"
                    },
                    "moduleTestEnabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "organizationId",
                    "type",
                    "repository",
                    "moduleName",
                    "moduleProvider"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.CreateModule.Response": {
                "$ref": "#/components/schemas/BlueprintApi.ExistingModule"
            },
            "BlueprintApi.Module": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "moduleName": {
                        "type": "string",
                        "description": "Module Name. Can be made of up to 64 characters, containing alphanumeric, hyphens and underscores. Must not contain leading/trailing hyphens/underscores.",
                        "pattern": "^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ *"
                    },
                    "moduleProvider": {
                        "type": "string",
                        "description": "Module Provider. Can be made of up to 64 characters, containing lowercase alphanumeric characters only.",
                        "pattern": "^[0-9a-z]{0,64}$ *"
                    },
                    "moduleTestEnabled": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ModuleType"
                    },
                    "testingEnvironmentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "moduleName",
                    "moduleProvider",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.GetModule.Response": {
                "$ref": "#/components/schemas/BlueprintApi.Module"
            },
            "BlueprintApi.GetModule.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.ModuleUserFields": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "moduleName": {
                        "type": "string",
                        "description": "Module Name. Can be made of up to 64 characters, containing alphanumeric, hyphens and underscores. Must not contain leading/trailing hyphens/underscores.",
                        "pattern": "^[0-9A-Za-z](?:[0-9A-Za-z-_]{0,62}[0-9A-Za-z])?$ *"
                    },
                    "moduleProvider": {
                        "type": "string",
                        "description": "Module Provider. Can be made of up to 64 characters, containing lowercase alphanumeric characters only.",
                        "pattern": "^[0-9a-z]{0,64}$ *"
                    },
                    "moduleTestEnabled": {
                        "type": "boolean"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "path": {
                        "type": "string"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "tagPrefix": {
                        "type": "string"
                    }
                },
                "required": [
                    "moduleName",
                    "moduleProvider",
                    "repository"
                ]
            },
            "BlueprintApi.UpdateModule.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.ModuleUserFields"
            },
            "BlueprintApi.UpdateModule.Response": {
                "$ref": "#/components/schemas/BlueprintApi.ExistingModule"
            },
            "BlueprintApi.UpdateModule.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.CustomFlowAssignmentRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/Scope"
                    },
                    "order": {
                        "type": "number",
                        "description": "Determines the execution order of the assigned custom flow, with lower numbers being executed first. If not provided, the assigned custom flow will be executed last. If multiple assignments have the same order number, their custom flows execution order is chosen randomly."
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "blueprintId": {
                        "type": "string"
                    }
                },
                "required": [
                    "blueprintId",
                    "scope",
                    "scopeId"
                ]
            },
            "BlueprintApi.CustomFlowScope": {
                "$ref": "#/components/schemas/Scope"
            },
            "Scope": {
                "type": "string",
                "enum": [
                    "BLUEPRINT",
                    "PROJECT",
                    "ORGANIZATION"
                ]
            },
            "BlueprintApi.AssignCustomFlow.Request.Body": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.CustomFlowAssignmentRequest"
                }
            },
            "BlueprintApi.AssignCustomFlow.Response": {
                "type": "null"
            },
            "BlueprintApi.UnassignCustomFlow.Request.Body": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.CustomFlowAssignmentRequest"
                }
            },
            "BlueprintApi.UnassignCustomFlow.Response": {
                "type": "null"
            },
            "BlueprintApi.ModuleRegistryDownloadSource.Response": {
                "type": "null"
            },
            "BlueprintApi.ModuleRegistryDownloadSource.Request.PathParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "moduleName": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "moduleName",
                    "providerName",
                    "version"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.Workflows.WorkflowFile": {
                "$ref": "#/components/schemas/WorkflowFile"
            },
            "WorkflowFile": {
                "type": "object",
                "properties": {
                    "environments": {
                        "$ref": "#/components/schemas/WorkflowSubEnvironmentsMapping"
                    },
                    "settings": {
                        "type": "object",
                        "properties": {
                            "environmentRemovalStrategy": {
                                "type": "string",
                                "enum": [
                                    "destroy",
                                    "detach"
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "required": [
                    "environments"
                ],
                "additionalProperties": false
            },
            "WorkflowSubEnvironmentsMapping": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/WorkflowSubEnvironment"
                }
            },
            "WorkflowSubEnvironment": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "templateType": {
                        "$ref": "#/components/schemas/IacType"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "workspace": {
                        "type": "string"
                    },
                    "needs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": [
                            "string",
                            "boolean"
                        ]
                    }
                },
                "required": [
                    "name",
                    "templateName",
                    "templateId",
                    "templateType"
                ],
                "additionalProperties": false
            },
            "IacType": {
                "type": "string",
                "enum": [
                    "cloudformation",
                    "terraform",
                    "opentofu",
                    "helm",
                    "pulumi",
                    "terragrunt",
                    "k8s"
                ]
            },
            "BlueprintApi.GetWorkflowFile.Response": {
                "$ref": "#/components/schemas/WorkflowFile"
            },
            "BlueprintApi.GetWorkflowFile.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "blueprintId": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    }
                },
                "required": [
                    "blueprintId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.CustomFlowTemplate": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/CustomFlowType"
                            },
                            {
                                "$ref": "#/components/schemas/ApprovalPolicyType"
                            }
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.CustomFlowType": {
                "$ref": "#/components/schemas/CustomFlowType"
            },
            "CustomFlowType": {
                "type": "string",
                "const": "custom-flow"
            },
            "BlueprintApi.ApprovalPolicyType": {
                "$ref": "#/components/schemas/ApprovalPolicyType"
            },
            "ApprovalPolicyType": {
                "type": "string",
                "const": "approval-policy"
            },
            "BlueprintApi.FindCustomFlows.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
                }
            },
            "BlueprintApi.FindCustomFlows.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "name"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.CreateConfigurationTemplate": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "repository"
                ]
            },
            "BlueprintApi.CreateCustomFlow.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.CreateConfigurationTemplate"
            },
            "BlueprintApi.CreateCustomFlow.Response": {
                "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
            },
            "BlueprintApi.UpdateConfigurationTemplateBody": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "repository"
                ]
            },
            "BlueprintApi.UpdateCustomFlow.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.UpdateConfigurationTemplateBody"
            },
            "BlueprintApi.UpdateCustomFlow.Response": {
                "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
            },
            "BlueprintApi.GetCustomFlowAssignments.Request.Body": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "scope": {
                            "$ref": "#/components/schemas/Scope"
                        },
                        "scopeId": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "scope",
                        "scopeId"
                    ],
                    "additionalProperties": false
                }
            },
            "BlueprintApi.RichCustomFlowAssigment": {
                "type": "object",
                "properties": {
                    "scopeId": {
                        "type": "string"
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/Scope"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "order": {
                        "type": "number"
                    },
                    "customFlowTemplate": {
                        "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
                    }
                },
                "required": [
                    "blueprintId",
                    "customFlowTemplate",
                    "organizationId",
                    "scope",
                    "scopeId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetCustomFlowAssignments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.RichCustomFlowAssigment"
                }
            },
            "BlueprintApi.CreateApprovalPolicy.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.CreateConfigurationTemplate"
            },
            "BlueprintApi.ApprovalPolicyTemplate": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "type": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/CustomFlowType"
                            },
                            {
                                "$ref": "#/components/schemas/ApprovalPolicyType"
                            }
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "repository",
                    "type"
                ]
            },
            "BlueprintApi.CreateApprovalPolicy.Response": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
            },
            "BlueprintApi.UpdateApprovalPolicy.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.UpdateConfigurationTemplateBody"
            },
            "BlueprintApi.UpdateApprovalPolicy.Response": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
            },
            "BlueprintApi.ApprovalPolicyTemplateWithScope": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyScope"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "blueprint": {
                        "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
                    },
                    "createdAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "scope",
                    "scopeId",
                    "blueprint",
                    "createdAt"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.ApprovalPolicyScope": {
                "type": "string",
                "enum": [
                    "PROJECT",
                    "BLUEPRINT"
                ]
            },
            "BlueprintApi.GetApprovalPolicyByScope.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplateWithScope"
                }
            },
            "BlueprintApi.ApprovalPolicyQuery": {
                "type": "object",
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyScope"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "required": [
                    "scope",
                    "scopeId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.GetApprovalPolicyByScope.Request.PathParams": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyQuery"
            },
            "BlueprintApi.GetApprovalPolicyByName.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
                }
            },
            "BlueprintApi.GetApprovalPolicyByName.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.UnassignApprovalPolicy.Request.PathParams": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyQuery"
            },
            "BlueprintApi.UnassignApprovalPolicyById.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.DeleteApprovalPolicy.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.ApprovalPolicyAssignmentRequest": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyScope"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "blueprintId": {
                        "type": "string"
                    }
                },
                "required": [
                    "blueprintId",
                    "scope",
                    "scopeId"
                ]
            },
            "BlueprintApi.AssignApprovalPolicy.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyAssignmentRequest"
            },
            "BlueprintApi.ApprovalPolicyAssignment": {
                "type": "object",
                "properties": {
                    "scopeId": {
                        "type": "string"
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "hash": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyScope"
                    }
                },
                "required": [
                    "blueprintId",
                    "scope",
                    "scopeId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.AssignApprovalPolicy.Response": {
                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyAssignment"
            },
            "BlueprintApi.EnvironmentDiscovery": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "globPattern": {
                        "type": "string"
                    },
                    "environmentPlacement": {
                        "$ref": "#/components/schemas/BlueprintApi.EnvironmentPlacement"
                    },
                    "workspaceNaming": {
                        "$ref": "#/components/schemas/BlueprintApi.WorkspaceNaming"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "rootPath": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "environmentPlacement",
                    "globPattern",
                    "repository",
                    "type",
                    "workspaceNaming"
                ]
            },
            "BlueprintApi.EnvironmentPlacement": {
                "type": "string",
                "enum": [
                    "topProject",
                    "existingSubProject"
                ]
            },
            "BlueprintApi.WorkspaceNaming": {
                "type": "string",
                "enum": [
                    "environmentName",
                    "default"
                ]
            },
            "BlueprintApi.EnableEnvironmentDiscovery.Request.Body": {
                "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscovery"
            },
            "BlueprintApi.EnvironmentDiscoveryResponse": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "globPattern": {
                        "type": "string"
                    },
                    "environmentPlacement": {
                        "$ref": "#/components/schemas/BlueprintApi.EnvironmentPlacement"
                    },
                    "workspaceNaming": {
                        "$ref": "#/components/schemas/BlueprintApi.WorkspaceNaming"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "rootPath": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BlueprintApi.Retry"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "isTerragruntRunAll": {
                        "type": "boolean"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "author": {
                        "$ref": "#/components/schemas/User"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isDeleted": {
                        "type": "boolean"
                    },
                    "authorId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "isSingleUse": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "environmentPlacement",
                    "globPattern",
                    "name",
                    "organizationId",
                    "repository",
                    "type",
                    "workspaceNaming"
                ]
            },
            "BlueprintApi.EnableEnvironmentDiscovery.Response": {
                "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscoveryResponse"
            },
            "BlueprintApi.GetEnvironmentDiscovery.Response": {
                "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscoveryResponse"
            },
            "BlueprintApi.GetEnvironmentDiscovery.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "BlueprintApi.DeleteEnvironmentDiscovery.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkDeploy.Request.Body": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "userRequiresApproval": {
                                "type": "boolean"
                            },
                            "comment": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "required": [
                    "data",
                    "environmentIds",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BaseResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BulkOperationsApi.SingleResult"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "data",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.SingleResult": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "failed",
                            "success"
                        ]
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId",
                    "status"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkDeploy.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkDestroy.Request.Body": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                            "skipStateRefresh": {
                                "type": "boolean"
                            },
                            "comment": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "data",
                    "environmentIds",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkDestroy.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BasePayload": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentIds",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkApprove.Request.Body": {
                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
            },
            "BulkOperationsApi.BulkApprove.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkCancel.Request.Body": {
                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
            },
            "BulkOperationsApi.BulkCancel.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkArchive.Request.Body": {
                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
            },
            "BulkOperationsApi.BulkArchive.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkCancelQueuedDeployments.Request.Body": {
                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
            },
            "BulkOperationsApi.BulkCancelQueuedDeployments.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkLock.Request.Body": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "required": [
                    "data",
                    "environmentIds",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkLock.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkUnlock.Request.Body": {
                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
            },
            "BulkOperationsApi.BulkUnlock.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "BulkOperationsApi.BulkRunTask.Request.Body": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "comment": {
                                "type": "string"
                            },
                            "taskPayload": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                },
                "required": [
                    "data",
                    "environmentIds",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "BulkOperationsApi.BulkRunTask.Response": {
                "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
            },
            "ConfigurationPropertyResponse": {
                "type": "object",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created."
                    },
                    "userId": {
                        "type": "string"
                    },
                    "isSensitive": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "regex": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The ID of the entity of the provided `scope`. e.g. a project's ID when the provided `scope` is `PROJECT`.\nInapplicable for `GLOBAL` scope, as it has no specific entity."
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationScope"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ConfigurationType",
                        "description": "Whether it is an Environment or Terraform variable\n0 value maps to an Environment variable\n1 value maps to an Terraform variable"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/PartialJSONSchema7",
                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationApi.FindVariableById.Response": {
                "$ref": "#/components/schemas/ConfigurationPropertyResponse"
            },
            "ConfigurationApi.FindVariableById.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.SshKey": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "organizationId",
                    "userId",
                    "value"
                ],
                "additionalProperties": false
            },
            "EncryptionMethod": {
                "type": "string",
                "const": "kms"
            },
            "ConfigurationApi.FindSshKeysByOrganization.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationApi.SshKey"
                }
            },
            "ConfigurationApi.CreateSshKey.Request.Body": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "value",
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.CreateSshKey.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.SshKey_"
            },
            "ConfigurationApi.UpdateSshKey.Request.Body": {
                "type": "object",
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    }
                },
                "required": [
                    "value"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.UpdateSshKey.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.SshKey_"
            },
            "TokenTypes": {
                "type": "string",
                "enum": [
                    "GitLab",
                    "AzureDevOps",
                    "GIT"
                ]
            },
            "ConfigurationApi.FindTokenByType.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
            },
            "ConfigurationApi.FindTokenById.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
            },
            "ConfigurationApi.Token": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/TokenTypes"
                    }
                },
                "required": [
                    "name",
                    "value",
                    "organizationId",
                    "type"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.CreateToken.Request.Body": {
                "$ref": "#/components/schemas/ConfigurationApi.Token"
            },
            "ConfigurationApi.CreateToken.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
            },
            "ConfigurationApi.FindVariablesByScope.OverridingConfigurationProperty": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "overwrites": {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "scope": {
                                        "$ref": "#/components/schemas/ConfigurationScope"
                                    },
                                    "scopeId": {
                                        "type": "string",
                                        "description": "The ID of the entity of the provided `scope`. e.g. a project's ID when the provided `scope` is `PROJECT`.\nInapplicable for `GLOBAL` scope, as it has no specific entity."
                                    },
                                    "value": {
                                        "type": "string"
                                    },
                                    "schema": {
                                        "$ref": "#/components/schemas/PartialJSONSchema7",
                                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                                    },
                                    "isReadonly": {
                                        "type": "boolean"
                                    },
                                    "isRequired": {
                                        "type": "boolean"
                                    },
                                    "isSensitive": {
                                        "type": "boolean"
                                    },
                                    "regex": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "scope"
                                ],
                                "additionalProperties": false
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created."
                    },
                    "userId": {
                        "type": "string"
                    },
                    "isSensitive": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "regex": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The ID of the entity of the provided `scope`. e.g. a project's ID when the provided `scope` is `PROJECT`.\nInapplicable for `GLOBAL` scope, as it has no specific entity."
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationScope"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ConfigurationType",
                        "description": "Whether it is an Environment or Terraform variable\n0 value maps to an Environment variable\n1 value maps to an Terraform variable"
                    },
                    "toDelete": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/PartialJSONSchema7",
                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "overwrites",
                    "scope",
                    "type"
                ]
            },
            "ConfigurationApi.FindVariablesByScope.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationApi.FindVariablesByScope.OverridingConfigurationProperty"
                }
            },
            "ConfigurationApi.FindVariablesByScope.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "setId": {
                        "type": "string"
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "workflowEnvironmentId": {
                        "type": "string"
                    },
                    "deploymentLogId": {
                        "type": "string"
                    },
                    "workflowBlueprintId": {
                        "type": "string"
                    }
                }
            },
            "ConfigurationPropertyRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created."
                    },
                    "isSensitive": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "regex": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "string",
                        "description": "The ID of the entity of the provided `scope`. e.g. a project's ID when the provided `scope` is `PROJECT`.\nInapplicable for `GLOBAL` scope, as it has no specific entity."
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationScope"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ConfigurationType",
                        "description": "Whether it is an Environment or Terraform variable\n0 value maps to an Environment variable\n1 value maps to an Terraform variable"
                    },
                    "toDelete": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/PartialJSONSchema7",
                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "scope",
                    "type",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.CreateOrUpdateVariable.Request.Body": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationPropertyRequest"
                }
            },
            "ConfigurationApi.CreateOrUpdateVariable.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationPropertyResponse"
                }
            },
            "TransientCredential": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/CredentialType"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "value": {
                        "type": "object",
                        "description": "A JSON string representation of the provider credentials.\n- For AWS_ASSUMED_ROLE_FOR_DEPLOYMENT and AWS_ASSUMED_ROLE types use:\n{ roleArn: \"your-role-arn\", duration?: \"duration-in-seconds\" }\n\n- For GCP_CREDENTIALS type use:\n{ tableId: \"your-table-id\", secret: \"your-secret\" }\n\n- For AZURE_CREDENTIALS type use:\n{ clientId: \"your-clientId\", clientSecret: \"your-clientSecret\", tenantId: \"your-tenantId\", subscriptionId: \"your-subscriptionId\" }"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "value",
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "CredentialType": {
                "type": "string",
                "enum": [
                    "GCP_SERVICE_ACCOUNT_FOR_DEPLOYMENT",
                    "AWS_ASSUMED_ROLE_FOR_DEPLOYMENT",
                    "GCP_OIDC",
                    "AWS_ACCESS_KEYS_FOR_DEPLOYMENT",
                    "K8S_KUBECONFIG_FILE",
                    "VAULT_OIDC",
                    "AZURE_CREDENTIALS",
                    "AWS_ASSUMED_ROLE",
                    "AWS_OIDC",
                    "K8S_AZURE_AKS_AUTH",
                    "AZURE_SERVICE_PRINCIPAL_FOR_DEPLOYMENT",
                    "AZURE_OIDC",
                    "K8S_EKS_AUTH",
                    "K8S_GCP_GKE_AUTH",
                    "GCP_CREDENTIALS"
                ]
            },
            "ConfigurationApi.CreateCredential.Request.Body": {
                "$ref": "#/components/schemas/TransientCredential"
            },
            "CredentialWithoutValue": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "value": {
                        "type": "null"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CredentialType"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "organizationId",
                    "type",
                    "updatedAt",
                    "value"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.CreateCredential.Response": {
                "$ref": "#/components/schemas/CredentialWithoutValue"
            },
            "ConfigurationApi.UpdateCredential.Request.Body": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/CredentialType"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "value": {
                        "type": "object",
                        "description": "A JSON string representation of the provider credentials.\n- For AWS_ASSUMED_ROLE_FOR_DEPLOYMENT and AWS_ASSUMED_ROLE types use:\n{ roleArn: \"your-role-arn\", duration?: \"duration-in-seconds\" }\n\n- For GCP_CREDENTIALS type use:\n{ tableId: \"your-table-id\", secret: \"your-secret\" }\n\n- For AZURE_CREDENTIALS type use:\n{ clientId: \"your-clientId\", clientSecret: \"your-clientSecret\", tenantId: \"your-tenantId\", subscriptionId: \"your-subscriptionId\" }"
                    },
                    "encryptionMethod": {
                        "$ref": "#/components/schemas/EncryptionMethod"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationApi.UpdateCredential.Response": {
                "$ref": "#/components/schemas/CredentialWithoutValue"
            },
            "ConfigurationApi.UpdateCredential.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.FindCredentials.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CredentialWithoutValue"
                }
            },
            "ConfigurationApi.AddDeployCredsToProject.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "ConfigurationApi.DeploymentCredentialToProject": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "credentialId": {
                        "type": "string"
                    },
                    "createdByUserId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId",
                    "credentialId",
                    "createdByUserId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.AddDeployCredsToProject.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.DeploymentCredentialToProject"
            },
            "ConfigurationApi.DeploymentCredentialsToProject": {
                "type": "object",
                "properties": {
                    "credentialIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "credentialIds"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.GetDeployCredsForProject.Response": {
                "$ref": "#/components/schemas/ConfigurationApi.DeploymentCredentialsToProject"
            },
            "ConfigurationApi.GetDeployCredsForProject.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "SetCreationScope": {
                "type": "string",
                "enum": [
                    "project",
                    "organization"
                ]
            },
            "ConfigurationApi.CreateConfigurationSet.Request.Body": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/SetCreationScope"
                    },
                    "scopeId": {
                        "type": "string"
                    },
                    "configurationProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfigurationPropertyRequest"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "scope",
                    "scopeId"
                ]
            },
            "ConfigurationSet": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "assignmentScopeId": {
                        "type": "string"
                    },
                    "assignmentScope": {
                        "$ref": "#/components/schemas/ConfigurationSetAssignmentScope"
                    },
                    "creationScopeId": {
                        "type": "string"
                    },
                    "creationScope": {
                        "$ref": "#/components/schemas/SetCreationScope"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "toDelete": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "name",
                    "assignmentScopeId",
                    "creationScopeId",
                    "creationScope",
                    "organizationId",
                    "createdBy"
                ],
                "additionalProperties": false
            },
            "ConfigurationSetAssignmentScope": {
                "type": "string",
                "enum": [
                    "template",
                    "project",
                    "organization",
                    "module",
                    "environment"
                ]
            },
            "ConfigurationApi.CreateConfigurationSet.Response": {
                "$ref": "#/components/schemas/ConfigurationSet"
            },
            "ConfigurationApi.FindConfigurationSetById.Response": {
                "$ref": "#/components/schemas/ConfigurationSet"
            },
            "ConfigurationApi.FindConfigurationSetById.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.AssignConfigurationSetToScope.Request.Body": {
                "not": {}
            },
            "ConfigurationApi.AssignConfigurationSetToScope.Response": {
                "type": "null"
            },
            "ConfigurationApi.AssignConfigurationSetToScope.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationSetAssignmentScope"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "scope",
                    "scopeId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.FindSetAssignmentsByScope.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationSet"
                }
            },
            "ConfigurationApi.FindSetAssignmentsByScope.Request.PathParams": {
                "type": "object",
                "properties": {
                    "scope": {
                        "$ref": "#/components/schemas/ConfigurationSetAssignmentScope"
                    },
                    "scopeId": {
                        "type": "string"
                    }
                },
                "required": [
                    "scope",
                    "scopeId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.FindSetsByCreationScope.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ConfigurationSet"
                }
            },
            "ConfigurationApi.FindSetsByCreationScope.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ConfigurationApi.DeleteConfigurationSet.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.UpdateConfigurationSet.Request.Body": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "configurationPropertiesChanges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ConfigurationPropertyRequest"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "ConfigurationApi.UpdateConfigurationSet.Response": {
                "$ref": "#/components/schemas/ConfigurationSet"
            },
            "ConfigurationApi.UpdateConfigurationSet.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.AbstractSecretResponse_ConfigurationApi.SshKey_": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "minLength": 1
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "userId",
                    "value",
                    "id",
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/TokenTypes"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "value",
                    "organizationId",
                    "type",
                    "id"
                ],
                "additionalProperties": false
            },
            "CostApi.AddProjectCostsCredentials.Request.Body": {
                "type": "object",
                "properties": {
                    "credentialsId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    }
                },
                "required": [
                    "credentialsId"
                ],
                "additionalProperties": false
            },
            "CostApi.ProjectCostsCredentials": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "credentialsId": {
                        "type": "string"
                    },
                    "credentialsType": {
                        "$ref": "#/components/schemas/CredentialType"
                    }
                },
                "required": [
                    "projectId",
                    "credentialsId"
                ],
                "additionalProperties": false
            },
            "CostApi.AddProjectCostsCredentials.Response": {
                "$ref": "#/components/schemas/CostApi.ProjectCostsCredentials"
            },
            "CostApi.GetProjectCostsCredentials.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CostApi.ProjectCostsCredentials"
                }
            },
            "CostApi.GetCosts.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "timespan": {
                        "$ref": "#/components/schemas/CostApi.Timespan"
                    },
                    "granularity": {
                        "$ref": "#/components/schemas/CostApi.Granularity"
                    }
                },
                "additionalProperties": false
            },
            "CostApi.Timespan": {
                "type": "string",
                "enum": [
                    "MONTH",
                    "WEEK",
                    "YEAR",
                    "DAY",
                    "QUARTER"
                ]
            },
            "CostApi.Granularity": {
                "type": "string",
                "enum": [
                    "DAILY",
                    "HOURLY"
                ]
            },
            "CostApi.GetProjectCostsCredentials.Request.QueryParams": {
                "$ref": "#/components/schemas/CostApi.GetCosts.Request.QueryParams"
            },
            "CostApi.GetProjectsWithCostCredentials.Response": {
                "type": "array",
                "items": {
                    "type": "string"
                }
            },
            "CostApi.IsCostEnabled.Response": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "additionalProperties": false
            },
            "CostApi.CostQueryResponse": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "total": {
                            "type": "object",
                            "properties": {
                                "AWS": {
                                    "type": "number"
                                },
                                "GCP": {
                                    "type": "number"
                                },
                                "AZURE": {
                                    "type": "number"
                                }
                            },
                            "additionalProperties": false
                        },
                        "id": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "total"
                    ],
                    "additionalProperties": false
                }
            },
            "CostApi.GetEnvironmentCosts.Response": {
                "$ref": "#/components/schemas/CostApi.CostQueryResponse"
            },
            "CostApi.GetEnvironmentCosts.Request.QueryParams": {
                "$ref": "#/components/schemas/CostApi.GetCosts.Request.QueryParams"
            },
            "CostApi.WeeklyCostsResponse": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/CostApi.WeeklyCostEntry"
                }
            },
            "CostApi.WeeklyCostEntry": {
                "type": "object",
                "properties": {
                    "cost": {
                        "type": "number"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": [
                    "cost"
                ],
                "additionalProperties": false
            },
            "CostApi.GetWeeklyCosts.Response": {
                "$ref": "#/components/schemas/CostApi.WeeklyCostsResponse"
            },
            "CostApi.GetWeeklyCosts.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "environmentIds": {
                        "type": "string"
                    },
                    "projectIds": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "CostApi.GetProjectCosts.Response": {
                "$ref": "#/components/schemas/CostApi.CostQueryResponse"
            },
            "CostApi.GetProjectCosts.Request.QueryParams": {
                "$ref": "#/components/schemas/CostApi.GetCosts.Request.QueryParams"
            },
            "CostApi.CostQueryResponseV2": {
                "type": "object",
                "properties": {
                    "costDataPoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CostApi.GroupedCloudCost"
                        }
                    },
                    "errors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CostApi.CostError"
                        }
                    }
                },
                "required": [
                    "costDataPoints",
                    "errors"
                ],
                "additionalProperties": false
            },
            "CostApi.GroupedCloudCost": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string"
                    },
                    "providersCost": {
                        "type": "object",
                        "properties": {
                            "AWS": {
                                "type": "number"
                            },
                            "GCP": {
                                "type": "number"
                            },
                            "AZURE": {
                                "type": "number"
                            }
                        },
                        "additionalProperties": false
                    },
                    "groupKey": {
                        "type": "string"
                    }
                },
                "required": [
                    "date",
                    "providersCost",
                    "groupKey"
                ],
                "additionalProperties": false
            },
            "CostApi.CostError": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/CostApi.CloudType"
                    },
                    "errorMessage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "errorMessage",
                    "id"
                ],
                "additionalProperties": false
            },
            "CostApi.CloudType": {
                "type": "string",
                "enum": [
                    "AZURE",
                    "AWS",
                    "GCP"
                ]
            },
            "CostApi.GetOrganizationCosts.Response": {
                "$ref": "#/components/schemas/CostApi.CostQueryResponseV2"
            },
            "CostApi.GetOrganizationCosts.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "timespan": {
                        "$ref": "#/components/schemas/CostApi.Timespan"
                    },
                    "granularity": {
                        "$ref": "#/components/schemas/CostApi.Granularity"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectIds": {
                        "type": "string"
                    },
                    "accumulated": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "CostApi.RemoveProjectBudget.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "CostApi.Budget": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "timeframe": {
                        "$ref": "#/components/schemas/CostApi.BudgetTimeframe"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    }
                },
                "required": [
                    "projectId",
                    "amount",
                    "timeframe",
                    "thresholds"
                ],
                "additionalProperties": false
            },
            "CostApi.BudgetTimeframe": {
                "type": "string",
                "enum": [
                    "YEARLY",
                    "MONTHLY",
                    "WEEKLY",
                    "QUARTERLY"
                ]
            },
            "CostApi.GetProjectBudget.Response": {
                "$ref": "#/components/schemas/CostApi.Budget"
            },
            "CostApi.GetProjectBudget.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "CostApi.UpsertProjectBudget.Request.Body": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number"
                    },
                    "timeframe": {
                        "$ref": "#/components/schemas/CostApi.BudgetTimeframe"
                    },
                    "thresholds": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        }
                    }
                },
                "required": [
                    "amount",
                    "timeframe",
                    "thresholds"
                ],
                "additionalProperties": false
            },
            "CostApi.UpsertProjectBudget.Response": {
                "$ref": "#/components/schemas/CostApi.Budget"
            },
            "CostApi.UpsertProjectBudget.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "CostApi.ProjectBudgetSummary": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "usage": {
                        "type": "number"
                    },
                    "amount": {
                        "type": "number"
                    },
                    "renewedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "projectId",
                    "usage",
                    "amount",
                    "renewedAt"
                ],
                "additionalProperties": false
            },
            "CostApi.GetBudgetSummary.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CostApi.ProjectBudgetSummary"
                }
            },
            "CostApi.GetBudgetSummary.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectIds": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectIds"
                ],
                "additionalProperties": false
            },
            "CostApi.GetAccumulatedProjectCosts.Response": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "usage": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "date",
                        "usage"
                    ],
                    "additionalProperties": false
                }
            },
            "CostApi.GetAccumulatedProjectCosts.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.Permissions": {
                "type": "object",
                "properties": {
                    "organizationRole": {
                        "$ref": "#/components/schemas/OrganizationRole"
                    },
                    "projectsPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrganizationApi.ProjectPermission"
                        }
                    }
                },
                "required": [
                    "organizationRole",
                    "organizationRole"
                ],
                "additionalProperties": false
            },
            "OrganizationRole": {
                "type": "string"
            },
            "OrganizationApi.ProjectPermission": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "projectRole": {
                        "$ref": "#/components/schemas/ProjectRole"
                    }
                },
                "required": [
                    "projectId",
                    "projectRole",
                    "projectId",
                    "projectRole"
                ],
                "additionalProperties": false
            },
            "ProjectRole": {
                "type": "string"
            },
            "CredentialsApi.CreateApiKey.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/OrganizationApi.Permissions"
                    }
                },
                "required": [
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "CredentialsApi.ApiKey": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "apiKeyId": {
                        "type": "string"
                    },
                    "lastUsedAt": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/ApiKeyUser"
                    },
                    "apiKeySecret": {
                        "type": "string"
                    },
                    "organizationRole": {
                        "type": "string",
                        "enum": [
                            "User",
                            "Admin"
                        ]
                    },
                    "isBlocked": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "apiKeyId",
                    "lastUsedAt",
                    "organizationId",
                    "createdAt",
                    "createdBy",
                    "organizationRole"
                ],
                "additionalProperties": false
            },
            "ApiKeyUser": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string"
                    },
                    "app_metadata": {
                        "type": "object"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nickname": {
                        "type": "string"
                    },
                    "last_login": {
                        "type": "string"
                    },
                    "blocked": {
                        "type": "boolean"
                    },
                    "identities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiKeyUserIdentity"
                        }
                    }
                },
                "additionalProperties": false
            },
            "ApiKeyUserIdentity": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string"
                    },
                    "profileData": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string"
                            },
                            "nickname": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    },
                    "blocked": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "CredentialsApi.CreateApiKey.Response": {
                "$ref": "#/components/schemas/CredentialsApi.ApiKey"
            },
            "CredentialsApi.FindAllApiKeys.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CredentialsApi.ApiKey"
                }
            },
            "CredentialsApi.DeleteApiKey.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "CredentialsApi.CreatePersonalApiKey.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "CredentialsApi.PersonalApiKey": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "apiKeyId": {
                        "type": "string"
                    },
                    "apiKeySecret": {
                        "type": "string"
                    },
                    "isBlocked": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "apiKeyId"
                ],
                "additionalProperties": false
            },
            "CredentialsApi.CreatePersonalApiKey.Response": {
                "$ref": "#/components/schemas/CredentialsApi.PersonalApiKey"
            },
            "CredentialsApi.FindAllPersonalApiKeys.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CredentialsApi.PersonalApiKey"
                }
            },
            "CredentialsApi.DeletePersonalApiKey.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "DashboardApi.Query.MaxActiveEnvironmentsPerDay.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7437-7468-api.d.ts-7422-7469-api.d.ts-7392-7470-api.d.ts-7235-7476-api.d.ts-7185-7476-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.ActiveEnvironmentsPerDay.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7722-8058-api.d.ts-7707-8059-api.d.ts-7677-8060-api.d.ts-7523-8066-api.d.ts-7476-8066-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "EnvironmentApi.EnvironmentStatus": {
                "type": "string",
                "enum": [
                    "ABORTING",
                    "PR_PLAN_IN_PROGRESS",
                    "FAILED",
                    "TASK_IN_PROGRESS",
                    "DESTROY_IN_PROGRESS",
                    "WAITING_FOR_USER",
                    "NEVER_DEPLOYED",
                    "ACTIVE",
                    "DRIFT_DETECTION_IN_PROGRESS",
                    "REMOTE_PLAN_IN_PROGRESS",
                    "TIMEOUT",
                    "INACTIVE",
                    "ABORTED",
                    "CREATED",
                    "DEPLOY_IN_PROGRESS",
                    "DRIFTED"
                ]
            },
            "DashboardApi.Query.EnvironmentStatus.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-6644-6775-api.d.ts-6629-6776-api.d.ts-6599-6777-api.d.ts-6461-6783-api.d.ts-6421-6783-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountTeams.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5276-5293-api.d.ts-5261-5294-api.d.ts-5231-5295-api.d.ts-5100-5301-api.d.ts-4760-5301-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountUsers.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5510-5527-api.d.ts-5495-5528-api.d.ts-5465-5529-api.d.ts-5334-5535-api.d.ts-5301-5535-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountProjects.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5750-5767-api.d.ts-5735-5768-api.d.ts-5705-5769-api.d.ts-5571-5775-api.d.ts-5535-5775-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountTemplates.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5992-6009-api.d.ts-5977-6010-api.d.ts-5947-6011-api.d.ts-5812-6017-api.d.ts-5775-6017-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.ActiveEnvironments.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-8562-9025-api.d.ts-8547-9026-api.d.ts-8517-9027-api.d.ts-8378-9033-api.d.ts-8337-9033-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "EnvironmentApi.DriftStatus": {
                "type": "string",
                "enum": [
                    "NEVER_RUN",
                    "ERROR",
                    "OK",
                    "DISABLED",
                    "DRIFTED"
                ]
            },
            "DashboardApi.Query.CountDeploymentsPerDay.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7025-7177-api.d.ts-7010-7178-api.d.ts-6980-7179-api.d.ts-6828-7185-api.d.ts-6783-7185-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountDeploymentType.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-6372-6413-api.d.ts-6357-6414-api.d.ts-6327-6415-api.d.ts-6059-6421-api.d.ts-6017-6421-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.CountDeployTypesByUserInTimeRange.Response": {
                "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-9297-9481-api.d.ts-9282-9482-api.d.ts-9252-9483-api.d.ts-9089-9489-api.d.ts-9033-9489-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
            },
            "DashboardApi.Query.Response": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7437-7468-api.d.ts-7422-7469-api.d.ts-7392-7470-api.d.ts-7235-7476-api.d.ts-7185-7476-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7722-8058-api.d.ts-7707-8059-api.d.ts-7677-8060-api.d.ts-7523-8066-api.d.ts-7476-8066-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-6644-6775-api.d.ts-6629-6776-api.d.ts-6599-6777-api.d.ts-6461-6783-api.d.ts-6421-6783-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5276-5293-api.d.ts-5261-5294-api.d.ts-5231-5295-api.d.ts-5100-5301-api.d.ts-4760-5301-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5510-5527-api.d.ts-5495-5528-api.d.ts-5465-5529-api.d.ts-5334-5535-api.d.ts-5301-5535-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5750-5767-api.d.ts-5735-5768-api.d.ts-5705-5769-api.d.ts-5571-5775-api.d.ts-5535-5775-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-5992-6009-api.d.ts-5977-6010-api.d.ts-5947-6011-api.d.ts-5812-6017-api.d.ts-5775-6017-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-8562-9025-api.d.ts-8547-9026-api.d.ts-8517-9027-api.d.ts-8378-9033-api.d.ts-8337-9033-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-7025-7177-api.d.ts-7010-7178-api.d.ts-6980-7179-api.d.ts-6828-7185-api.d.ts-6783-7185-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-6372-6413-api.d.ts-6357-6414-api.d.ts-6327-6415-api.d.ts-6059-6421-api.d.ts-6017-6421-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.Base.Response_structure-api.d.ts-9297-9481-api.d.ts-9282-9482-api.d.ts-9252-9483-api.d.ts-9089-9489-api.d.ts-9033-9489-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_"
                    }
                ]
            },
            "DashboardApi.Query.MaxActiveEnvironmentsPerDay.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "queryName": {
                        "type": "string",
                        "const": "maxActiveEnvironmentsPerDay"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endTime",
                    "organizationId",
                    "queryName",
                    "startTime"
                ]
            },
            "DashboardApi.Query.ActiveEnvironmentsPerDay.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "queryName": {
                        "type": "string",
                        "const": "activeEnvironmentsPerDay"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endTime",
                    "organizationId",
                    "queryName",
                    "startTime"
                ]
            },
            "DashboardApi.Query.EnvironmentStatus.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "environmentStatus"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.CountTeams.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "countTeams"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.CountUsers.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "countUsers"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.CountProjects.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "countProjects"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.CountTemplates.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "countTemplates"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.ActiveEnvironments.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "queryName": {
                        "type": "string",
                        "const": "activeEnvironments"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "queryName"
                ]
            },
            "DashboardApi.Query.CountDeploymentsPerDay.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "queryName": {
                        "type": "string",
                        "const": "countDeploymentsPerDay"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endTime",
                    "organizationId",
                    "queryName",
                    "startTime"
                ]
            },
            "DashboardApi.Query.CountDeploymentType.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "queryName": {
                        "type": "string",
                        "const": "countDeploymentType"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endTime",
                    "organizationId",
                    "queryName",
                    "startTime"
                ]
            },
            "DashboardApi.Query.CountDeployTypesByUserInTimeRange.Request.QueryStringParameters": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "startTime": {
                        "type": "string"
                    },
                    "endTime": {
                        "type": "string"
                    },
                    "queryName": {
                        "type": "string",
                        "const": "countDeployTypesByUserInTimeRange"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endTime",
                    "organizationId",
                    "queryName",
                    "startTime"
                ]
            },
            "DashboardApi.Query.Request.QueryParams": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.MaxActiveEnvironmentsPerDay.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.ActiveEnvironmentsPerDay.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.EnvironmentStatus.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountTeams.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountUsers.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountProjects.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountTemplates.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.ActiveEnvironments.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountDeploymentsPerDay.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountDeploymentType.Request.QueryStringParameters"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardApi.Query.CountDeployTypesByUserInTimeRange.Request.QueryStringParameters"
                    }
                ]
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-7437-7468-api.d.ts-7422-7469-api.d.ts-7392-7470-api.d.ts-7235-7476-api.d.ts-7185-7476-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "count": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "date",
                        "count"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-7722-8058-api.d.ts-7707-8059-api.d.ts-7677-8060-api.d.ts-7523-8066-api.d.ts-7476-8066-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "projectName": {
                            "type": "string"
                        },
                        "projectId": {
                            "type": "string"
                        },
                        "status": {
                            "$ref": "#/components/schemas/EnvironmentApi.EnvironmentStatus"
                        },
                        "user": {
                            "$ref": "#/components/schemas/User"
                        },
                        "lastDeploymentDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "createdAt": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "blueprintId": {
                            "type": "string"
                        },
                        "blueprintName": {
                            "type": "string"
                        },
                        "isSingleUseBlueprint": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "name",
                        "id",
                        "projectName",
                        "projectId",
                        "status",
                        "user",
                        "lastDeploymentDate",
                        "createdAt",
                        "blueprintId",
                        "blueprintName"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-6644-6775-api.d.ts-6629-6776-api.d.ts-6599-6777-api.d.ts-6461-6783-api.d.ts-6421-6783-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "status": {
                            "type": "string",
                            "enum": [
                                "IN_PROGRESS",
                                "FAILED",
                                "WAITING_FOR_USER",
                                "ACTIVE",
                                "INACTIVE",
                                "DRIFTED"
                            ]
                        },
                        "count": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "status",
                        "count"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-5276-5293-api.d.ts-5261-5294-api.d.ts-5231-5295-api.d.ts-5100-5301-api.d.ts-4760-5301-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "value"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-5510-5527-api.d.ts-5495-5528-api.d.ts-5465-5529-api.d.ts-5334-5535-api.d.ts-5301-5535-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "value"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-5750-5767-api.d.ts-5735-5768-api.d.ts-5705-5769-api.d.ts-5571-5775-api.d.ts-5535-5775-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "value"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-5992-6009-api.d.ts-5977-6010-api.d.ts-5947-6011-api.d.ts-5812-6017-api.d.ts-5775-6017-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "value"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-8562-9025-api.d.ts-8547-9026-api.d.ts-8517-9027-api.d.ts-8378-9033-api.d.ts-8337-9033-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "projectName": {
                            "type": "string"
                        },
                        "projectId": {
                            "type": "string"
                        },
                        "status": {
                            "$ref": "#/components/schemas/EnvironmentApi.EnvironmentStatus"
                        },
                        "user": {
                            "$ref": "#/components/schemas/User"
                        },
                        "lastDeploymentDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "createdAt": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "blueprintId": {
                            "type": "string"
                        },
                        "blueprintName": {
                            "type": "string"
                        },
                        "isSingleUseBlueprint": {
                            "type": "boolean"
                        },
                        "isLocked": {
                            "type": "boolean"
                        },
                        "blueprintType": {
                            "$ref": "#/components/schemas/BlueprintType"
                        },
                        "driftStatus": {
                            "$ref": "#/components/schemas/EnvironmentApi.DriftStatus"
                        }
                    },
                    "required": [
                        "name",
                        "id",
                        "projectName",
                        "projectId",
                        "status",
                        "user",
                        "lastDeploymentDate",
                        "createdAt",
                        "blueprintId",
                        "blueprintName",
                        "isLocked",
                        "blueprintType",
                        "driftStatus"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-7025-7177-api.d.ts-7010-7178-api.d.ts-6980-7179-api.d.ts-6828-7185-api.d.ts-6783-7185-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "date": {
                            "type": "string"
                        },
                        "deployCount": {
                            "type": "number"
                        },
                        "destroyCount": {
                            "type": "number"
                        },
                        "prPlanCount": {
                            "type": "number"
                        },
                        "moduleTestCount": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "date",
                        "deployCount",
                        "destroyCount",
                        "prPlanCount",
                        "moduleTestCount"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-6372-6413-api.d.ts-6357-6414-api.d.ts-6327-6415-api.d.ts-6059-6421-api.d.ts-6017-6421-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "deploymentType": {
                            "type": "string"
                        },
                        "count": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "deploymentType",
                        "count"
                    ],
                    "additionalProperties": false
                }
            },
            "DashboardApi.Query.Base.Response_structure-api.d.ts-9297-9481-api.d.ts-9282-9482-api.d.ts-9252-9483-api.d.ts-9089-9489-api.d.ts-9033-9489-api.d.ts-296-10061-api.d.ts-271-10061-api.d.ts-269-10063-api.d.ts-186-10063-api.d.ts-0-10064_": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "$ref": "#/components/schemas/User"
                        },
                        "totalDeployments": {
                            "type": "number"
                        },
                        "deployCount": {
                            "type": "number"
                        },
                        "destroyCount": {
                            "type": "number"
                        },
                        "prPlanCount": {
                            "type": "number"
                        },
                        "moduleTestCount": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "user",
                        "totalDeployments",
                        "deployCount",
                        "destroyCount",
                        "prPlanCount",
                        "moduleTestCount"
                    ],
                    "additionalProperties": false
                }
            },
            "DeploymentStepApi.DeploymentStepStatus": {
                "type": "string",
                "enum": [
                    "FAIL",
                    "IN_PROGRESS",
                    "NOT_STARTED",
                    "WAITING_FOR_USER",
                    "SKIPPED",
                    "WARNING",
                    "CANCELLED",
                    "TIMEOUT",
                    "SUCCESS"
                ]
            },
            "DeploymentStepApi.FindByDeploymentLogId.Response": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "deploymentLogId": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "order": {
                            "type": "number"
                        },
                        "environmentId": {
                            "type": "string"
                        },
                        "projectId": {
                            "type": "string"
                        },
                        "organizationId": {
                            "type": "string"
                        },
                        "status": {
                            "$ref": "#/components/schemas/DeploymentStepApi.DeploymentStepStatus"
                        },
                        "startedAt": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "completedAt": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "displayName": {
                            "type": "string"
                        },
                        "retryCount": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "deploymentLogId",
                        "name",
                        "order",
                        "projectId",
                        "organizationId",
                        "status"
                    ],
                    "additionalProperties": false
                }
            },
            "DeploymentStepApi.LogEvent": {
                "type": "object",
                "properties": {
                    "eventId": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "level": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": [
                            "number",
                            "string"
                        ]
                    }
                },
                "required": [
                    "eventId",
                    "message",
                    "level",
                    "timestamp"
                ],
                "additionalProperties": false
            },
            "DeploymentStepApi.FindStepLog.Response": {
                "type": "object",
                "properties": {
                    "events": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentStepApi.LogEvent"
                        }
                    },
                    "nextStartTime": {
                        "type": [
                            "number",
                            "string"
                        ]
                    },
                    "hasMoreLogs": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "events",
                    "hasMoreLogs"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UpdateDownstreamEnvironments.Request.Body": {
                "type": "object",
                "properties": {
                    "downstreamEnvironmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "downstreamEnvironmentIds"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.DownstreamEnvironment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "latestDeploymentLog": {
                        "type": "object",
                        "properties": {
                            "blueprintName": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "blueprintName"
                        ],
                        "additionalProperties": false
                    }
                },
                "required": [
                    "id",
                    "name",
                    "workspaceName",
                    "projectId",
                    "latestDeploymentLog"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UpdateDownstreamEnvironments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentApi.DownstreamEnvironment"
                }
            },
            "EnvironmentApi.UpdateDownstreamEnvironments.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.SubscribeDownstreamEnvironments.Request.Body": {
                "type": "object",
                "properties": {
                    "downstreamEnvironmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "downstreamEnvironmentIds"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.SubscribeDownstreamEnvironments.Response": {
                "type": "null"
            },
            "EnvironmentApi.SubscribeDownstreamEnvironments.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UnsubscribeDownstreamEnvironments.Request.Body": {
                "type": "object",
                "properties": {
                    "downstreamEnvironmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "downstreamEnvironmentIds"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UnsubscribeDownstreamEnvironments.Response": {
                "type": "null"
            },
            "EnvironmentApi.UnsubscribeDownstreamEnvironments.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.FindDownstreamEnvironments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentApi.DownstreamEnvironment"
                }
            },
            "EnvironmentApi.CreateEnvironmentRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "minLength": 1
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    },
                    "ttl": {
                        "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
                    },
                    "configurationChanges": {
                        "$ref": "#/components/schemas/EnvironmentApi.ConfigurationChanges"
                    },
                    "vcsCommandsAlias": {
                        "type": "string"
                    },
                    "deployRequest": {
                        "$ref": "#/components/schemas/DeployRequest"
                    },
                    "continuousDeployment": {
                        "type": "boolean"
                    },
                    "pullRequestPlanDeployments": {
                        "type": "boolean"
                    },
                    "driftDetectionRequest": {
                        "$ref": "#/components/schemas/EnvironmentApi.DriftDetectionRequest"
                    },
                    "autoDeployOnPathChangesOnly": {
                        "type": "boolean"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "preventAutoDeploy": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "projectId",
                    "deployRequest"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.TTLRequest": {
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentApi.TTLType"
                    },
                    "value": {
                        "type": "string",
                        "$comment": "{ \"schema\": { \"anyOf\": [{ \"type\": \"string\" }, { \"type\": \"object\", \"instanceof\": \"Date\" }] } }",
                        "description": "Format is yyyy-mm-ddThh:MM:ss.000Z (For example 2023-06-04T20:05:00.000Z)"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.TTLType": {
                "type": "string",
                "enum": [
                    "DATE",
                    "HOURS",
                    "INFINITE"
                ]
            },
            "EnvironmentApi.ConfigurationChanges": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/EnvironmentApi.ConfigurationPropertyChange"
                    },
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentApi.ConfigurationPropertyChange"
                        }
                    }
                ]
            },
            "EnvironmentApi.ConfigurationPropertyChange": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the configuration property. If provided, will act as an update. Otherwise, a new configuration property will be created."
                    },
                    "isSensitive": {
                        "type": "boolean"
                    },
                    "isReadonly": {
                        "type": "boolean"
                    },
                    "isRequired": {
                        "type": "boolean"
                    },
                    "regex": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ConfigurationType",
                        "description": "Whether it is an Environment or Terraform variable\n0 value maps to an Environment variable\n1 value maps to an Terraform variable"
                    },
                    "toDelete": {
                        "type": "boolean"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/PartialJSONSchema7",
                        "description": "If none passed, JSON and HCL values will be considered to be of string type. Make sure you specify the correct variable type.\nENVIRONMENT_OUTPUT is a special type that is used to indicate that the value is an output from the environment. Its is of format ${env0:<environmentId>:<outputName>}"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "type"
                ],
                "additionalProperties": false
            },
            "DeployRequest": {
                "type": "object",
                "properties": {
                    "workflowDeploymentId": {
                        "type": "string"
                    },
                    "deploymentType": {
                        "type": "string",
                        "enum": [
                            "remotePlan",
                            "prPlan",
                            "deploy",
                            "moduleTest",
                            "task",
                            "driftDetection"
                        ]
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "blueprintRevision": {
                        "type": "string"
                    },
                    "blueprintRepository": {
                        "type": "string"
                    },
                    "configurationChanges": {
                        "$ref": "#/components/schemas/EnvironmentApi.ConfigurationChanges"
                    },
                    "ttl": {
                        "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
                    },
                    "envName": {
                        "type": "string"
                    },
                    "userRequiresApproval": {
                        "type": "boolean"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "customEnv0EnvironmentVariables": {
                        "$ref": "#/components/schemas/CustomEnv0EnvironmentVariables"
                    },
                    "gitUserData": {
                        "$ref": "#/components/schemas/GitUserData"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "triggerName": {
                        "$ref": "#/components/schemas/TriggerName"
                    },
                    "upstreamEnvironmentId": {
                        "type": "string"
                    },
                    "taskPayload": {
                        "type": "string"
                    },
                    "subEnvironments": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/WorkflowSubEnvironmentRequest"
                        }
                    },
                    "workflowDeploymentOptions": {
                        "$ref": "#/components/schemas/WorkflowDeploymentOptions",
                        "description": "[Optional] Only applicable when running a Workflow Environment.\nAllows to run a partial Workflow, starting from a specific point in the pipeline.\nOr run a single sub-environment deploy/destroy."
                    }
                },
                "additionalProperties": false
            },
            "CustomEnv0EnvironmentVariables": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The deployed Environment ID"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ENV0_PROJECT_ID"
                    },
                    "projectName": {
                        "type": "string",
                        "description": "The Project Name of the deployed Environment"
                    },
                    "deploymentLogId": {
                        "type": "string",
                        "description": "The deployment ID"
                    },
                    "deploymentType": {
                        "type": "string",
                        "enum": [
                            "prPlan",
                            "deploy",
                            "destroy"
                        ],
                        "description": "The deployment type."
                    },
                    "deploymentRevision": {
                        "type": "string",
                        "description": "Available only when deployment revision defined"
                    },
                    "workspaceName": {
                        "type": "string",
                        "description": "The Terraform Workspace name used in the Environment"
                    },
                    "rootDir": {
                        "type": "string",
                        "description": "The root repository path"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "templateDir": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "environmentName": {
                        "type": "string"
                    },
                    "environmentCreatorName": {
                        "type": "string"
                    },
                    "environmentCreatorEmail": {
                        "type": "string"
                    },
                    "deployerName": {
                        "type": "string"
                    },
                    "deployerEmail": {
                        "type": "string"
                    },
                    "reviewerName": {
                        "type": "string"
                    },
                    "reviewerEmail": {
                        "type": "string"
                    },
                    "prAuthor": {
                        "type": "string",
                        "description": "pr author. available only in PR Plan"
                    },
                    "prSourceBranch": {
                        "type": "string",
                        "description": "the source branch. available only in PR Plan"
                    },
                    "prTargetBranch": {
                        "type": "string",
                        "description": "the target branch. available only in PR Plan"
                    },
                    "commitHash": {
                        "type": "string",
                        "description": "the commit hash"
                    },
                    "commitUrl": {
                        "type": "string",
                        "description": "the commit url"
                    },
                    "oidcToken": {
                        "type": "string",
                        "description": "The OIDC Token - read more here(https://docs.env0.com/docs/oidc-integrations) on how to enable it and use it"
                    },
                    "vcsAccessToken": {
                        "type": "string",
                        "description": "When using a native VCS integration, this will represent the access token we use to clone the repository"
                    },
                    "tfPlanJson": {
                        "type": "string",
                        "description": "The file path to a JSON representation of a Terraform Plan file"
                    },
                    "cliArgsPlan": {
                        "type": "string",
                        "description": "add additional cli arguments when running a plan"
                    },
                    "cliArgsApply": {
                        "type": "string",
                        "description": "add additional cli arguments when running the `apply` command"
                    }
                },
                "additionalProperties": false
            },
            "GitUserData": {
                "type": "object",
                "properties": {
                    "gitUser": {
                        "type": "string"
                    },
                    "gitAvatarUrl": {
                        "type": "string"
                    },
                    "prNumber": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "TriggerName": {
                "type": "string",
                "enum": [
                    "scheduled",
                    "cd",
                    "driftDetection",
                    "terraform-cli",
                    "user",
                    "prPlan",
                    "comment",
                    "workflow",
                    "ttl"
                ]
            },
            "WorkflowSubEnvironmentRequest": {
                "type": "object",
                "properties": {
                    "revision": {
                        "type": "string"
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "configurationChanges": {
                        "$ref": "#/components/schemas/EnvironmentApi.ConfigurationChanges"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "WorkflowDeploymentOptions": {
                "type": "object",
                "properties": {
                    "node": {
                        "type": "string"
                    },
                    "operation": {
                        "$ref": "#/components/schemas/WorkflowPartialDeployOperation"
                    }
                },
                "required": [
                    "node",
                    "operation"
                ],
                "additionalProperties": false
            },
            "WorkflowPartialDeployOperation": {
                "type": "string",
                "enum": [
                    "single-node-deploy",
                    "single-node-destroy",
                    "run-from-here"
                ]
            },
            "EnvironmentApi.DriftDetectionRequest": {
                "type": "object",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "cron": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "EnvironmentApi.Create.Request.Body": {
                "$ref": "#/components/schemas/EnvironmentApi.CreateEnvironmentRequest"
            },
            "EnvironmentApi.Environment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    },
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentStatus"
                    },
                    "latestDeploymentLogId": {
                        "type": "string"
                    },
                    "latestDeploymentLog": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
                    },
                    "lifespanEndAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "markedForAutoDestroy": {
                        "$ref": "#/components/schemas/AutoDestroyStatus"
                    },
                    "isArchived": {
                        "type": "boolean",
                        "description": "Mark the environment as inactive"
                    },
                    "nextScheduledDates": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentNextScheduledDates"
                    },
                    "vcsCommandsAlias": {
                        "type": "string"
                    },
                    "continuousDeployment": {
                        "type": "boolean"
                    },
                    "pullRequestPlanDeployments": {
                        "type": "boolean"
                    },
                    "autoDeployOnPathChangesOnly": {
                        "type": "boolean"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "isSingleUseBlueprint": {
                        "type": "boolean"
                    },
                    "workflowEnvironmentId": {
                        "type": "string"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "lockStatus": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentLockStatus"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "isRemoteApplyEnabled": {
                        "type": "boolean"
                    },
                    "driftStatus": {
                        "$ref": "#/components/schemas/EnvironmentApi.DriftStatus"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "projectId",
                    "userId",
                    "workspaceName",
                    "requiresApproval",
                    "status",
                    "latestDeploymentLogId",
                    "latestDeploymentLog",
                    "lifespanEndAt",
                    "markedForAutoDestroy",
                    "isArchived",
                    "continuousDeployment",
                    "pullRequestPlanDeployments",
                    "autoDeployOnPathChangesOnly",
                    "isRemoteBackend",
                    "isLocked",
                    "driftStatus"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.DeploymentLog": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "type": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentType"
                    },
                    "startedBy": {
                        "type": "string"
                    },
                    "queuedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "output": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/EnvironmentApi.OutputData"
                            },
                            {
                                "$ref": "#/components/schemas/EnvironmentApi.TerragruntRunAllOutput"
                            }
                        ]
                    },
                    "error": {
                        "type": "object"
                    },
                    "customEnv0EnvironmentVariables": {
                        "$ref": "#/components/schemas/CustomEnv0EnvironmentVariables"
                    },
                    "costEstimation": {
                        "$ref": "#/components/schemas/Infracost.TotalOutput"
                    },
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLogStatus"
                    },
                    "blueprintId": {
                        "type": "string"
                    },
                    "blueprintName": {
                        "type": "string"
                    },
                    "blueprintRepository": {
                        "type": "string"
                    },
                    "blueprintRevision": {
                        "type": "string"
                    },
                    "blueprintPath": {
                        "type": "string"
                    },
                    "blueprintType": {
                        "$ref": "#/components/schemas/DeployableType"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "resourceCount": {
                        "type": "number"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentApi.EnvironmentResource"
                        }
                    },
                    "startedByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "isScheduledRun": {
                        "type": "boolean"
                    },
                    "abortedBy": {
                        "type": "string"
                    },
                    "abortedByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "gitUser": {
                        "type": "string"
                    },
                    "gitAvatarUrl": {
                        "type": "string"
                    },
                    "prNumber": {
                        "type": "string"
                    },
                    "triggerName": {
                        "$ref": "#/components/schemas/TriggerName"
                    },
                    "driftDetected": {
                        "type": "boolean"
                    },
                    "plan": {
                        "type": "object",
                        "properties": {
                            "resourceChanges": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeploymentApi.Plan.PlanResourceChange"
                                }
                            },
                            "outputChanges": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DeploymentApi.Plan.PlanOutputChange"
                                }
                            }
                        },
                        "required": [
                            "resourceChanges",
                            "outputChanges"
                        ],
                        "additionalProperties": false
                    },
                    "planSummary": {
                        "$ref": "#/components/schemas/DeploymentApi.Plan.PlanSummary"
                    },
                    "isSkippedApply": {
                        "type": "boolean"
                    },
                    "workflowDeploymentId": {
                        "type": "string"
                    },
                    "workflowFile": {
                        "$ref": "#/components/schemas/EnvironmentApi.WorkflowEnvironments.WorkflowFile"
                    },
                    "workflowDeploymentOptions": {
                        "$ref": "#/components/schemas/WorkflowDeploymentOptions"
                    },
                    "stateVersionId": {
                        "type": "string"
                    },
                    "reviewersUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentApi.ReviewerUser"
                        }
                    },
                    "reviewers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EnvironmentApi.Reviewer"
                        }
                    },
                    "reviewedBy": {
                        "type": "string"
                    },
                    "reviewedByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.DeploymentType": {
                "type": "string",
                "enum": [
                    "remotePlan",
                    "prPlan",
                    "deploy",
                    "destroy",
                    "moduleTest",
                    "task",
                    "driftDetection"
                ]
            },
            "EnvironmentApi.OutputData": {
                "type": "object"
            },
            "EnvironmentApi.TerragruntRunAllOutput": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "moduleName": {
                            "type": "string"
                        },
                        "output": {
                            "$ref": "#/components/schemas/EnvironmentApi.OutputData"
                        }
                    },
                    "required": [
                        "moduleName",
                        "output"
                    ],
                    "additionalProperties": false
                }
            },
            "Infracost.TotalOutput": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "version": {
                        "type": "string"
                    },
                    "projects": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string"
                                },
                                "metadata": {},
                                "pastBreakdown": {
                                    "$ref": "#/components/schemas/Infracost.Output"
                                },
                                "breakdown": {
                                    "$ref": "#/components/schemas/Infracost.Output"
                                },
                                "diff": {
                                    "$ref": "#/components/schemas/Infracost.Output"
                                }
                            },
                            "required": [],
                            "additionalProperties": false
                        }
                    },
                    "timeGenerated": {
                        "type": "string"
                    },
                    "summary": {
                        "type": "object",
                        "properties": {
                            "unsupportedResourceCounts": {}
                        },
                        "required": [
                            "unsupportedResourceCounts"
                        ],
                        "additionalProperties": false
                    },
                    "resources": {
                        "type": "array",
                        "items": {}
                    },
                    "totalHourlyCost": {
                        "type": "string"
                    },
                    "totalMonthlyCost": {
                        "type": "string"
                    }
                },
                "required": []
            },
            "Infracost.Output": {
                "type": "object",
                "properties": {
                    "resources": {
                        "type": "array",
                        "items": {}
                    },
                    "totalHourlyCost": {
                        "type": "string"
                    },
                    "totalMonthlyCost": {
                        "type": "string"
                    }
                },
                "required": [],
                "additionalProperties": false
            },
            "EnvironmentApi.DeploymentLogStatus": {
                "type": "string",
                "enum": [
                    "QUEUED",
                    "IN_PROGRESS",
                    "ABORTING",
                    "INTERNAL_FAILURE",
                    "FAILURE",
                    "WAITING_FOR_USER",
                    "SKIPPED",
                    "NEVER_DEPLOYED",
                    "CANCELLED",
                    "ABORTED",
                    "TIMEOUT",
                    "SUCCESS"
                ]
            },
            "BlueprintApi.DeployableType": {
                "$ref": "#/components/schemas/DeployableType"
            },
            "DeployableType": {
                "type": "string",
                "enum": [
                    "cloudformation",
                    "terraform",
                    "opentofu",
                    "helm",
                    "module",
                    "workflow",
                    "pulumi",
                    "terragrunt",
                    "k8s"
                ]
            },
            "EnvironmentApi.EnvironmentResource": {
                "type": "object",
                "properties": {
                    "provider": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "moduleName": {
                        "type": "string"
                    }
                },
                "required": [
                    "provider",
                    "type",
                    "name"
                ],
                "additionalProperties": false
            },
            "DeploymentApi.Plan.PlanResourceChange": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "action": {
                        "$ref": "#/components/schemas/DeploymentApi.Plan.ChangeAction"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentApi.Plan.AttributeChange"
                        }
                    },
                    "importing": {
                        "$ref": "#/components/schemas/DeploymentApi.Plan.ResourceImportData"
                    },
                    "previousAddress": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "providerName",
                    "type",
                    "path",
                    "action",
                    "attributes"
                ],
                "additionalProperties": false
            },
            "DeploymentApi.Plan.ChangeAction": {
                "type": "string",
                "enum": [
                    "create",
                    "delete",
                    "recreate",
                    "update",
                    "metadata"
                ]
            },
            "DeploymentApi.Plan.AttributeChange": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "before": {},
                    "after": {}
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "DeploymentApi.Plan.ResourceImportData": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "DeploymentApi.Plan.PlanOutputChange": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "action": {
                        "$ref": "#/components/schemas/DeploymentApi.Plan.ChangeAction"
                    },
                    "attributes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeploymentApi.Plan.AttributeChange"
                        }
                    }
                },
                "required": [
                    "name",
                    "action",
                    "attributes"
                ],
                "additionalProperties": false
            },
            "DeploymentApi.Plan.PlanSummary": {
                "type": "object",
                "properties": {
                    "added": {
                        "type": "number"
                    },
                    "changed": {
                        "type": "number"
                    },
                    "destroyed": {
                        "type": "number"
                    },
                    "imported": {
                        "type": "number"
                    }
                },
                "required": [
                    "added",
                    "changed",
                    "destroyed"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.WorkflowEnvironments.WorkflowFile": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "settings": {
                        "type": "object",
                        "properties": {
                            "environmentRemovalStrategy": {
                                "type": "string",
                                "enum": [
                                    "destroy",
                                    "detach"
                                ]
                            }
                        },
                        "additionalProperties": false
                    },
                    "environments": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/EnvironmentApi.WorkflowEnvironments.WorkflowSubEnvironment"
                        }
                    }
                },
                "required": [
                    "environments"
                ]
            },
            "EnvironmentApi.WorkflowEnvironments.WorkflowSubEnvironment": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "environmentId": {
                        "type": "string"
                    },
                    "toDestroy": {
                        "type": "boolean"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "templateName": {
                        "type": "string"
                    },
                    "templateId": {
                        "type": "string"
                    },
                    "templateType": {
                        "$ref": "#/components/schemas/IacType"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "workspace": {
                        "type": "string"
                    },
                    "needs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "disabled": {
                        "type": [
                            "string",
                            "boolean"
                        ]
                    }
                },
                "required": [
                    "name",
                    "templateId",
                    "templateName",
                    "templateType"
                ]
            },
            "EnvironmentApi.ReviewerUser": {
                "type": "object",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "cancelled",
                            "approved"
                        ]
                    }
                },
                "required": [
                    "user",
                    "action"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.Reviewer": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string",
                        "enum": [
                            "cancelled",
                            "approved"
                        ]
                    }
                },
                "required": [
                    "userId",
                    "action"
                ],
                "additionalProperties": false
            },
            "AutoDestroyStatus": {
                "type": "number",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ]
            },
            "EnvironmentApi.EnvironmentNextScheduledDates": {
                "type": "object",
                "properties": {
                    "deploy": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "destroy": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "additionalProperties": false
            },
            "EnvironmentApi.EnvironmentLockStatus": {
                "type": "object",
                "properties": {
                    "reason": {
                        "type": "string"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "updatedBy",
                    "updatedAt"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.Create.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Environment"
            },
            "EnvironmentApi.Update.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    },
                    "isArchived": {
                        "type": "boolean",
                        "description": "Mark the environment as inactive"
                    },
                    "continuousDeployment": {
                        "type": "boolean"
                    },
                    "vcsCommandsAlias": {
                        "type": "string"
                    },
                    "pullRequestPlanDeployments": {
                        "type": "boolean"
                    },
                    "autoDeployOnPathChangesOnly": {
                        "type": "boolean"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "isRemoteApplyEnabled": {
                        "type": "boolean"
                    }
                },
                "additionalProperties": false
            },
            "EnvironmentApi.Update.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Environment"
            },
            "EnvironmentApi.SaveAsTemplate.Request.Body": {
                "type": "object",
                "properties": {
                    "newName": {
                        "type": "string"
                    }
                },
                "required": [
                    "newName"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.SaveAsTemplate.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Environment"
            },
            "EnvironmentApi.Ttl.Request.Body": {
                "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
            },
            "EnvironmentApi.Ttl.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Environment"
            },
            "EnvironmentApi.Deploy.Request.Body": {
                "$ref": "#/components/schemas/DeployRequest"
            },
            "DeployResult": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.Deploy.Response": {
                "$ref": "#/components/schemas/DeployResult"
            },
            "EnvironmentApi.Cancel.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "EnvironmentApi.Cancel.Response": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.BatchCancel.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "EnvironmentApi.BatchCancel.Response": {
                "type": "object",
                "properties": {
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "ids"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.BatchCancel.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLogStatus"
                    }
                },
                "required": [
                    "status"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.Abort.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "EnvironmentApi.Abort.Response": {
                "type": "null"
            },
            "EnvironmentApi.Destroy.Request.Body": {
                "type": "object",
                "properties": {
                    "triggerName": {
                        "$ref": "#/components/schemas/TriggerName"
                    },
                    "workflowDeploymentId": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "EnvironmentApi.Destroy.Response": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.QueryBoolean": {
                "type": "string",
                "enum": [
                    "false",
                    "true"
                ]
            },
            "EnvironmentApi.Revision": {
                "type": "string"
            },
            "EnvironmentApi.Destroy.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "checkoutUpdatedCode": {
                        "$ref": "#/components/schemas/EnvironmentApi.QueryBoolean"
                    },
                    "isScheduledRun": {
                        "$ref": "#/components/schemas/EnvironmentApi.QueryBoolean"
                    },
                    "skipStateRefresh": {
                        "$ref": "#/components/schemas/EnvironmentApi.QueryBoolean"
                    },
                    "revision": {
                        "$ref": "#/components/schemas/EnvironmentApi.Revision"
                    },
                    "requiresApproval": {
                        "$ref": "#/components/schemas/EnvironmentApi.QueryBoolean"
                    }
                },
                "additionalProperties": false
            },
            "EnvironmentApi.Resume.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "EnvironmentApi.Resume.Response": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UpdateEnvironmentLock.Request.Body": {
                "type": "object",
                "properties": {
                    "isLocked": {
                        "type": "boolean"
                    },
                    "reason": {
                        "type": "string"
                    }
                },
                "required": [
                    "isLocked"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UpdateEnvironmentLock.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.EnvironmentLockStatus"
            },
            "EnvironmentApi.FindDeploymentLogById.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
            },
            "EnvironmentApi.FindDeploymentLogsByEnvironmentId.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
                }
            },
            "EnvironmentApi.FindDeploymentLogsByEnvironmentId.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    },
                    "fromDate": {
                        "type": "string"
                    },
                    "toDate": {
                        "type": "string"
                    },
                    "deploymentTypes": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentType"
                    },
                    "statuses": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLogStatus"
                    }
                }
            },
            "EnvironmentApi.FindSubDeploymentLog.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
            },
            "EnvironmentApi.FindById.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Environment"
            },
            "EnvironmentApi.FindById.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.FindAll.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                }
            },
            "EnvironmentApi.FindAll.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    },
                    "onlyMy": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "isActive": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "includeSubEnvironments": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "workspaceNamePrefix": {
                        "type": "string",
                        "description": "filter by prefix of workspaceName, ignored when workspaceName is sent"
                    },
                    "isRemoteBackend": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "searchText": {
                        "type": "string"
                    }
                }
            },
            "EnvironmentApi.CountByProject.Response": {
                "type": "number"
            },
            "EnvironmentApi.CountByProject.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "isActive": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentStatus"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.GetProjectsEnvsStatusesCountsByOrg.Response": {
                "type": "object",
                "additionalProperties": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                        "driftStatus": {
                            "type": "object",
                            "properties": {
                                "ERROR": {
                                    "type": "number"
                                },
                                "DRIFTED": {
                                    "type": "number"
                                },
                                "OK": {
                                    "type": "number"
                                },
                                "NEVER_RUN": {
                                    "type": "number"
                                },
                                "DISABLED": {
                                    "type": "number"
                                }
                            },
                            "additionalProperties": false
                        },
                        "CREATED": {
                            "type": "number"
                        },
                        "INACTIVE": {
                            "type": "number"
                        },
                        "ACTIVE": {
                            "type": "number"
                        },
                        "FAILED": {
                            "type": "number"
                        },
                        "TIMEOUT": {
                            "type": "number"
                        },
                        "WAITING_FOR_USER": {
                            "type": "number"
                        },
                        "DEPLOY_IN_PROGRESS": {
                            "type": "number"
                        },
                        "DESTROY_IN_PROGRESS": {
                            "type": "number"
                        },
                        "PR_PLAN_IN_PROGRESS": {
                            "type": "number"
                        },
                        "REMOTE_PLAN_IN_PROGRESS": {
                            "type": "number"
                        },
                        "DRIFT_DETECTION_IN_PROGRESS": {
                            "type": "number"
                        },
                        "TASK_IN_PROGRESS": {
                            "type": "number"
                        },
                        "ABORTING": {
                            "type": "number"
                        },
                        "ABORTED": {
                            "type": "number"
                        },
                        "NEVER_DEPLOYED": {
                            "type": "number"
                        },
                        "DRIFTED": {
                            "type": "number"
                        },
                        "total": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "driftStatus",
                        "total"
                    ]
                }
            },
            "EnvironmentApi.GetProjectsEnvsStatusesCountsByOrg.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "isActive": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "driftStatus": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.FindResources.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/EnvironmentApi.EnvironmentResource"
                }
            },
            "EnvironmentApi.UpdatePolicies.Request.Body": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "numberOfEnvironments": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "$comment": "{ \"schema\": { \"anyOf\": [{ \"type\": \"integer\", \"minimum\": 1 }, { \"type\": \"null\" }] } }"
                    },
                    "numberOfEnvironmentsTotal": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "$comment": "{ \"schema\": { \"anyOf\": [{ \"type\": \"integer\", \"minimum\": 1 }, { \"type\": \"null\" }] } }"
                    },
                    "maxTtl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The maximum allowed TTL. Must be 6-h, 12-h, 1-d, 3-d, 1-w, 2-w, 1-M, inherit or explicit null which means infinite",
                        "pattern": "^\\d+-[h|d|w|M]|inherit"
                    },
                    "defaultTtl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The default TTL set when creating environments. Must be 6-h, 12-h, 1-d, 3-d, 1-w, 2-w, 1-M, inherit or explicit null which means infinite",
                        "pattern": "^\\d+-[h|d|w|M]|inherit"
                    },
                    "requiresApprovalDefault": {
                        "type": "boolean"
                    },
                    "includeCostEstimation": {
                        "type": "boolean"
                    },
                    "skipApplyWhenPlanIsEmpty": {
                        "type": "boolean"
                    },
                    "disableDestroyEnvironments": {
                        "type": "boolean"
                    },
                    "skipRedundantDeployments": {
                        "type": "boolean"
                    },
                    "runPullRequestPlanDefault": {
                        "type": "boolean"
                    },
                    "continuousDeploymentDefault": {
                        "type": "boolean"
                    },
                    "forceRemoteBackend": {
                        "type": "boolean"
                    },
                    "driftDetectionEnabled": {
                        "type": "boolean"
                    },
                    "driftDetectionCron": {
                        "type": "string"
                    },
                    "outputsAsInputsEnabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.Policy": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "updatedBy": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "numberOfEnvironments": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "numberOfEnvironmentsTotal": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "maxTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "defaultTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "requiresApprovalDefault": {
                        "type": "boolean"
                    },
                    "includeCostEstimation": {
                        "type": "boolean"
                    },
                    "skipApplyWhenPlanIsEmpty": {
                        "type": "boolean"
                    },
                    "disableDestroyEnvironments": {
                        "type": "boolean"
                    },
                    "skipRedundantDeployments": {
                        "type": "boolean"
                    },
                    "runPullRequestPlanDefault": {
                        "type": "boolean"
                    },
                    "continuousDeploymentDefault": {
                        "type": "boolean"
                    },
                    "forceRemoteBackend": {
                        "type": "boolean"
                    },
                    "driftDetectionEnabled": {
                        "type": "boolean"
                    },
                    "driftDetectionCron": {
                        "type": "string"
                    },
                    "outputsAsInputsEnabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "updatedBy",
                    "projectId",
                    "numberOfEnvironments",
                    "numberOfEnvironmentsTotal",
                    "maxTtl",
                    "defaultTtl",
                    "requiresApprovalDefault",
                    "includeCostEstimation",
                    "skipApplyWhenPlanIsEmpty",
                    "disableDestroyEnvironments",
                    "skipRedundantDeployments",
                    "runPullRequestPlanDefault",
                    "continuousDeploymentDefault",
                    "forceRemoteBackend",
                    "outputsAsInputsEnabled"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.UpdatePolicies.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Policy"
            },
            "EnvironmentApi.GetPolicies.Response": {
                "$ref": "#/components/schemas/EnvironmentApi.Policy"
            },
            "EnvironmentApi.GetPolicies.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.CheckLimit.EnvironmentLimitsWarnings": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "boolean"
                    },
                    "user": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "total",
                    "user"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.CheckLimit.Response": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "warnings": {
                        "$ref": "#/components/schemas/EnvironmentApi.CheckLimit.EnvironmentLimitsWarnings"
                    },
                    "total": {
                        "type": "number"
                    },
                    "user": {
                        "type": "number"
                    }
                }
            },
            "EnvironmentApi.CheckLimit.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.RerunDeployment.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "EnvironmentApi.RerunDeployment.Response": {
                "type": "null"
            },
            "EnvironmentApi.RerunDeployment.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.CreateEnvironmentWithoutTemplate.Request.Body": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "deployRequest": {
                        "type": "object",
                        "properties": {
                            "workflowDeploymentId": {
                                "type": "string"
                            },
                            "deploymentType": {
                                "type": "string",
                                "enum": [
                                    "remotePlan",
                                    "prPlan",
                                    "deploy",
                                    "moduleTest",
                                    "task",
                                    "driftDetection"
                                ]
                            },
                            "configurationChanges": {
                                "$ref": "#/components/schemas/EnvironmentApi.ConfigurationChanges"
                            },
                            "ttl": {
                                "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
                            },
                            "envName": {
                                "type": "string"
                            },
                            "userRequiresApproval": {
                                "type": "boolean"
                            },
                            "targets": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "customEnv0EnvironmentVariables": {
                                "$ref": "#/components/schemas/CustomEnv0EnvironmentVariables"
                            },
                            "gitUserData": {
                                "$ref": "#/components/schemas/GitUserData"
                            },
                            "comment": {
                                "type": "string"
                            },
                            "triggerName": {
                                "$ref": "#/components/schemas/TriggerName"
                            },
                            "upstreamEnvironmentId": {
                                "type": "string"
                            },
                            "taskPayload": {
                                "type": "string"
                            },
                            "subEnvironments": {
                                "type": "object",
                                "additionalProperties": {
                                    "$ref": "#/components/schemas/WorkflowSubEnvironmentRequest"
                                }
                            }
                        },
                        "additionalProperties": false
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string",
                        "minLength": 1
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    },
                    "ttl": {
                        "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
                    },
                    "configurationChanges": {
                        "$ref": "#/components/schemas/EnvironmentApi.ConfigurationChanges"
                    },
                    "vcsCommandsAlias": {
                        "type": "string"
                    },
                    "continuousDeployment": {
                        "type": "boolean"
                    },
                    "pullRequestPlanDeployments": {
                        "type": "boolean"
                    },
                    "driftDetectionRequest": {
                        "$ref": "#/components/schemas/EnvironmentApi.DriftDetectionRequest"
                    },
                    "autoDeployOnPathChangesOnly": {
                        "type": "boolean"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "preventAutoDeploy": {
                        "type": "boolean"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "retry": {
                        "$ref": "#/components/schemas/BlueprintApi.Retry"
                    },
                    "runTestsOnPullRequest": {
                        "type": "boolean"
                    },
                    "isTerragruntRunAll": {
                        "type": "boolean"
                    },
                    "projectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tagPrefix": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "helmChartName": {
                        "type": "string"
                    },
                    "terraformVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.TerraformVersion",
                        "description": "A string representing semantic version of Terraform. If set to \"RESOLVE_FROM_TERRAFORM_CODE\", the version will be determined by using tfenv's 'min-required'. When set to \"latest\", the version used will be the most recent one available for Terraform."
                    },
                    "opentofuVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.OpentofuVersion"
                    },
                    "terragruntVersion": {
                        "type": "string"
                    },
                    "terragruntTfBinary": {
                        "$ref": "#/components/schemas/BlueprintApi.TerragruntTfBinary"
                    },
                    "pulumiVersion": {
                        "$ref": "#/components/schemas/BlueprintApi.PulumiVersionType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/BlueprintType"
                    },
                    "gitlabProjectId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "tokenName": {
                        "type": "string"
                    },
                    "tokenId": {
                        "type": "string"
                    },
                    "sshKeys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BlueprintApi.SshKey"
                        }
                    },
                    "githubInstallationId": {
                        "type": [
                            "number",
                            "null"
                        ]
                    },
                    "bitbucketClientKey": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isBitbucketServer": {
                        "type": "boolean"
                    },
                    "isGitLabEnterprise": {
                        "type": "boolean"
                    },
                    "isGitHubEnterprise": {
                        "type": "boolean"
                    },
                    "isGitLab": {
                        "type": "boolean"
                    },
                    "isAzureDevOps": {
                        "type": "boolean"
                    },
                    "isHelmRepository": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "projectId",
                    "repository",
                    "type"
                ]
            },
            "EnvironmentApi.CreateEnvironmentWithoutTemplate.Response": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "blueprintId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    },
                    "workspaceName": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "requiresApproval": {
                        "type": "boolean"
                    },
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentStatus"
                    },
                    "latestDeploymentLogId": {
                        "type": "string"
                    },
                    "latestDeploymentLog": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
                    },
                    "lifespanEndAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "markedForAutoDestroy": {
                        "$ref": "#/components/schemas/AutoDestroyStatus"
                    },
                    "isArchived": {
                        "type": "boolean",
                        "description": "Mark the environment as inactive"
                    },
                    "nextScheduledDates": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentNextScheduledDates"
                    },
                    "vcsCommandsAlias": {
                        "type": "string"
                    },
                    "continuousDeployment": {
                        "type": "boolean"
                    },
                    "pullRequestPlanDeployments": {
                        "type": "boolean"
                    },
                    "autoDeployOnPathChangesOnly": {
                        "type": "boolean"
                    },
                    "autoDeployByCustomGlob": {
                        "type": "string"
                    },
                    "terragruntWorkingDirectory": {
                        "type": "string"
                    },
                    "isSingleUseBlueprint": {
                        "type": "boolean"
                    },
                    "workflowEnvironmentId": {
                        "type": "string"
                    },
                    "isRemoteBackend": {
                        "type": "boolean"
                    },
                    "isLocked": {
                        "type": "boolean"
                    },
                    "lockStatus": {
                        "$ref": "#/components/schemas/EnvironmentApi.EnvironmentLockStatus"
                    },
                    "k8sNamespace": {
                        "type": "string"
                    },
                    "isRemoteApplyEnabled": {
                        "type": "boolean"
                    },
                    "driftStatus": {
                        "$ref": "#/components/schemas/EnvironmentApi.DriftStatus"
                    }
                },
                "required": [
                    "autoDeployOnPathChangesOnly",
                    "blueprintId",
                    "continuousDeployment",
                    "driftStatus",
                    "isArchived",
                    "isLocked",
                    "isRemoteBackend",
                    "latestDeploymentLog",
                    "latestDeploymentLogId",
                    "lifespanEndAt",
                    "markedForAutoDestroy",
                    "name",
                    "organizationId",
                    "projectId",
                    "pullRequestPlanDeployments",
                    "requiresApproval",
                    "status",
                    "userId",
                    "workspaceName"
                ]
            },
            "EnvironmentApi.GetEnvironmentsOutputs.Response": {
                "type": "object",
                "properties": {
                    "outputs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "environmentId": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "isSensitive": {
                                    "type": "boolean"
                                },
                                "environmentName": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "environmentId",
                                "environmentName",
                                "id",
                                "isSensitive",
                                "name"
                            ]
                        }
                    }
                },
                "required": [
                    "outputs"
                ],
                "additionalProperties": false
            },
            "EnvironmentApi.GetEnvironmentsOutputs.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "ModuleTestingApi.FullModuleTestRun": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/EnvironmentApi.DeploymentLogStatus"
                    },
                    "blueprintRevision": {
                        "type": "string"
                    },
                    "prNumber": {
                        "type": "string"
                    },
                    "startedBy": {
                        "type": "string"
                    },
                    "startedByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "queuedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "startedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "finishedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "object"
                    },
                    "customEnv0EnvironmentVariables": {
                        "$ref": "#/components/schemas/CustomEnv0EnvironmentVariables"
                    },
                    "gitAvatarUrl": {
                        "type": "string"
                    },
                    "gitUser": {
                        "type": "string"
                    },
                    "blueprintRepository": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "deploymentLogId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "triggerName": {
                        "$ref": "#/components/schemas/TriggerName"
                    },
                    "testSummary": {
                        "$ref": "#/components/schemas/ModuleTestingApi.TestFileSummary"
                    },
                    "testFilesResults": {
                        "$ref": "#/components/schemas/ModuleTestingApi.TestFilesResults"
                    },
                    "moduleId": {
                        "type": "string"
                    }
                },
                "required": [
                    "deploymentLogId",
                    "environmentId",
                    "organizationId"
                ]
            },
            "ModuleTestingApi.TestFileSummary": {
                "type": "object",
                "properties": {
                    "passed": {
                        "type": "number"
                    },
                    "failed": {
                        "type": "number"
                    },
                    "skipped": {
                        "type": "number"
                    },
                    "errored": {
                        "type": "number"
                    }
                },
                "additionalProperties": false
            },
            "ModuleTestingApi.TestFilesResults": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/components/schemas/ModuleTestingApi.TestFileResult"
                }
            },
            "ModuleTestingApi.TestFileResult": {
                "type": "object",
                "properties": {
                    "testFile": {
                        "type": "string"
                    },
                    "summary": {
                        "$ref": "#/components/schemas/ModuleTestingApi.TestFileSummary"
                    },
                    "tests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ModuleTestingApi.TestResult"
                        }
                    }
                },
                "required": [
                    "testFile",
                    "summary"
                ],
                "additionalProperties": false
            },
            "ModuleTestingApi.TestResult": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/ModuleTestingApi.TestStatus"
                    }
                },
                "required": [
                    "name",
                    "status"
                ],
                "additionalProperties": false
            },
            "ModuleTestingApi.TestStatus": {
                "type": "string",
                "enum": [
                    "skipped",
                    "passed",
                    "failed",
                    "errored"
                ]
            },
            "ModuleTestingApi.GetModuleTestRuns.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ModuleTestingApi.FullModuleTestRun"
                }
            },
            "PaginationQueryStringParams": {
                "type": "object",
                "properties": {
                    "limit": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ModuleTestingApi.GetModuleTestRuns.Request.QueryParams": {
                "$ref": "#/components/schemas/PaginationQueryStringParams"
            },
            "ModuleTestingApi.GetModuleTestRuns.Request.PathParams": {
                "type": "object",
                "properties": {
                    "moduleId": {
                        "type": "string"
                    }
                },
                "required": [
                    "moduleId"
                ],
                "additionalProperties": false
            },
            "ModuleTestingApi.GetModuleTestRunById.Response": {
                "$ref": "#/components/schemas/ModuleTestingApi.FullModuleTestRun"
            },
            "ModuleTestingApi.GetModuleTestRunById.Request.PathParams": {
                "type": "object",
                "properties": {
                    "testRunId": {
                        "type": "string"
                    }
                },
                "required": [
                    "testRunId"
                ],
                "additionalProperties": false
            },
            "ModuleTestingApi.TriggerModuleTestRun.Request.Body": {
                "type": "object",
                "additionalProperties": false
            },
            "ModuleTestingApi.TriggerModuleTestRun.Response": {
                "type": "null"
            },
            "ModuleTestingApi.TriggerModuleTestRun.Request.PathParams": {
                "type": "object",
                "properties": {
                    "moduleId": {
                        "type": "string"
                    }
                },
                "required": [
                    "moduleId"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.NotificationEndpointModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationEndpointType"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId",
                    "name",
                    "type",
                    "value"
                ],
                "additionalProperties": false
            },
            "NotificationEndpointType": {
                "type": "string",
                "enum": [
                    "Slack",
                    "Email",
                    "Teams"
                ]
            },
            "NotificationsApi.CreateNotificationEndpoint.Request.Body": {
                "$ref": "#/components/schemas/NotificationsApi.NotificationEndpointModel"
            },
            "NotificationsApi.NotificationEndpoint": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationEndpointType"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "NotificationsApi.CreateNotificationEndpoint.Response": {
                "$ref": "#/components/schemas/NotificationsApi.NotificationEndpoint"
            },
            "NotificationsApi.DeleteNotificationEndpoint.Request.PathParams": {
                "type": "object",
                "properties": {
                    "endpointId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.UpdateNotificationEndpoint.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/NotificationEndpointType"
                    }
                },
                "required": [
                    "name",
                    "value",
                    "type"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.UpdateNotificationEndpoint.Response": {
                "$ref": "#/components/schemas/NotificationsApi.NotificationEndpoint"
            },
            "NotificationsApi.UpdateNotificationEndpoint.Request.PathParams": {
                "type": "object",
                "properties": {
                    "endpointId": {
                        "type": "string"
                    }
                },
                "required": [
                    "endpointId"
                ],
                "additionalProperties": false
            },
            "EventNameType": {
                "type": "string",
                "enum": [
                    "deploymentCancelled",
                    "environmentDeployStarted",
                    "environmentMarkedForAutoDestroy",
                    "driftUndetected",
                    "deploySucceeded",
                    "driftFailed",
                    "driftDetected",
                    "deployFailed",
                    "environmentDeployResumed",
                    "environmentDestroyResumed",
                    "environmentDestroyStarted",
                    "destroySucceeded",
                    "destroyFailed",
                    "deploymentWaitingForUser",
                    "budgetExceeded"
                ]
            },
            "NotificationsApi.UpdateProjectNotificationSettings.Request.Body": {
                "type": "object",
                "properties": {
                    "eventNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventNameType"
                        }
                    }
                },
                "required": [
                    "eventNames"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.ProjectNotificationSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "notificationEndpointId": {
                        "type": "string"
                    },
                    "eventNames": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventNameType"
                        }
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "notificationEndpointId",
                    "eventNames"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.UpdateProjectNotificationSettings.Response": {
                "$ref": "#/components/schemas/NotificationsApi.ProjectNotificationSetting"
            },
            "NotificationsApi.UpdateProjectNotificationSettings.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "endpointId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId",
                    "endpointId"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.FindNotificationEndpoints.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/NotificationsApi.NotificationEndpoint"
                }
            },
            "NotificationsApi.FindNotificationEndpoints.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "NotificationsApi.FindProjectNotificationSettings.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/NotificationsApi.ProjectNotificationSetting"
                }
            },
            "NotificationsApi.FindProjectNotificationSettings.Request.PathParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "projectId"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.CreateOrganization.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-_ ]{0,49}$"
                    },
                    "description": {
                        "type": "string"
                    },
                    "photoUrl": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.OrganizationModel": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "maxTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "defaultTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "doNotReportSkippedStatusChecks": {
                        "type": "boolean"
                    },
                    "doNotConsiderMergeCommitsForPrPlans": {
                        "type": "boolean"
                    },
                    "enableOidc": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "photoUrl": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/OrganizationApi.OrganizationMode"
                    },
                    "trialEnd": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "enforcePrCommenterPermissions": {
                        "type": "boolean"
                    },
                    "projectCustomFlowsPolicy": {
                        "$ref": "#/components/schemas/OrganizationApi.ProjectCustomFlowsPolicy"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "createdBy",
                    "mode",
                    "projectCustomFlowsPolicy"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.OrganizationMode": {
                "type": "string",
                "enum": [
                    "free",
                    "paying",
                    "trial"
                ]
            },
            "OrganizationApi.ProjectCustomFlowsPolicy": {
                "type": "string",
                "enum": [
                    "MERGE_WITH_TEMPLATES",
                    "OVERRIDE_TEMPLATES"
                ]
            },
            "OrganizationApi.CreateOrganization.Response": {
                "$ref": "#/components/schemas/OrganizationApi.OrganizationModel"
            },
            "OrganizationApi.Organization": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "maxTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "defaultTtl": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "doNotReportSkippedStatusChecks": {
                        "type": "boolean"
                    },
                    "doNotConsiderMergeCommitsForPrPlans": {
                        "type": "boolean"
                    },
                    "enableOidc": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "photoUrl": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "mode": {
                        "$ref": "#/components/schemas/OrganizationApi.OrganizationMode"
                    },
                    "trialEnd": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "enforcePrCommenterPermissions": {
                        "type": "boolean"
                    },
                    "projectCustomFlowsPolicy": {
                        "$ref": "#/components/schemas/OrganizationApi.ProjectCustomFlowsPolicy"
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationRole"
                    },
                    "isSelfHostedK8s": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "createdBy",
                    "id",
                    "mode",
                    "name",
                    "projectCustomFlowsPolicy",
                    "role"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.FindOrganizationById.Response": {
                "$ref": "#/components/schemas/OrganizationApi.Organization"
            },
            "OrganizationApi.OrganizationLimits": {
                "type": "object",
                "properties": {
                    "environments": {
                        "type": "object",
                        "properties": {
                            "limit": {
                                "type": "number"
                            },
                            "amount": {
                                "type": "number"
                            },
                            "limitReached": {
                                "type": "boolean"
                            }
                        },
                        "required": [
                            "limitReached"
                        ],
                        "additionalProperties": false
                    }
                },
                "required": [
                    "environments"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.GetOrganizationLimits.Response": {
                "$ref": "#/components/schemas/OrganizationApi.OrganizationLimits"
            },
            "OrganizationApi.GetOrganizationLimits.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.FindOrganizations.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/OrganizationApi.Organization"
                }
            },
            "OrganizationApi.UpdateOrganization.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "photoUrl": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.UpdateOrganization.Response": {
                "$ref": "#/components/schemas/OrganizationApi.Organization"
            },
            "OrganizationApi.OrganizationPolicy": {
                "type": "object",
                "properties": {
                    "maxTtl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The maximum allowed TTL. Must be 6-h, 12-h, 1-d, 3-d, 1-w, 2-w, 1-M, inherit or explicit null which means infinite",
                        "pattern": "^\\d+-[h|d|w|M]|inherit"
                    },
                    "defaultTtl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The default TTL set when creating environments. Must be 6-h, 12-h, 1-d, 3-d, 1-w, 2-w, 1-M, inherit or explicit null which means infinite",
                        "pattern": "^\\d+-[h|d|w|M]|inherit"
                    },
                    "doNotReportSkippedStatusChecks": {
                        "type": "boolean"
                    },
                    "doNotConsiderMergeCommitsForPrPlans": {
                        "type": "boolean"
                    },
                    "enableOidc": {
                        "type": "boolean"
                    },
                    "enforcePrCommenterPermissions": {
                        "type": "boolean"
                    },
                    "projectCustomFlowsPolicy": {
                        "$ref": "#/components/schemas/OrganizationApi.ProjectCustomFlowsPolicy"
                    }
                },
                "additionalProperties": false
            },
            "OrganizationApi.UpdatePolicy.Request.Body": {
                "$ref": "#/components/schemas/OrganizationApi.OrganizationPolicy"
            },
            "OrganizationApi.UpdatePolicy.Response": {
                "$ref": "#/components/schemas/OrganizationApi.Organization"
            },
            "OrganizationUser": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "object",
                        "properties": {
                            "user_id": {
                                "type": "string"
                            },
                            "email": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "last_login": {
                                "type": "string"
                            },
                            "picture": {
                                "type": "string"
                            },
                            "given_name": {
                                "type": "string"
                            },
                            "family_name": {
                                "type": "string"
                            },
                            "app_metadata": {
                                "type": "object",
                                "properties": {
                                    "isApiKey": {
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "isApiKey"
                                ],
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationRole"
                    },
                    "status": {
                        "$ref": "#/components/schemas/OrganizationUserStatus"
                    }
                },
                "required": [
                    "user",
                    "role",
                    "status"
                ],
                "additionalProperties": false
            },
            "OrganizationUserStatus": {
                "type": "string",
                "enum": [
                    "Invited",
                    "Active"
                ]
            },
            "OrganizationApi.GetUsers.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/OrganizationUser"
                }
            },
            "OrganizationApi.GetUsers.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "includeApiKeys": {
                        "type": "string",
                        "enum": [
                            "false",
                            "true"
                        ]
                    },
                    "query": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "OrganizationApi.GetUsers.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.CreateInvite.Request.Body": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/OrganizationApi.Permissions"
                    }
                },
                "required": [
                    "email",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.CreateInvite.Response": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "OrganizationApi.UpdateRole.Request.Body": {
                "type": "string"
            },
            "OrganizationApi.UpdateRole.Response": {
                "type": "null"
            },
            "ProjectApi.Project": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "$comment": "{ \"schema\": { \"type\": \"string\" , \"minLength\": 1} }"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "parentProjectId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "isArchived": {
                        "type": "boolean"
                    },
                    "hierarchy": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdBy",
                    "hierarchy",
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProjectApi.GetModulesTestingProject.Response": {
                "$ref": "#/components/schemas/ProjectApi.Project"
            },
            "ProjectApi.GetModulesTestingProject.Request.PathParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProjectApi.UpdateProjectRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "$comment": "{ \"schema\": { \"type\": \"string\" , \"minLength\": 1} }"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "additionalProperties": false
            },
            "ProjectApi.Update.Request.Body": {
                "$ref": "#/components/schemas/ProjectApi.UpdateProjectRequest"
            },
            "ProjectApi.Update.Response": {
                "$ref": "#/components/schemas/ProjectApi.Project"
            },
            "ProjectApi.FindById.Response": {
                "$ref": "#/components/schemas/ProjectApi.Project"
            },
            "ProjectApi.MoveProject.Request.Body": {
                "type": "object",
                "properties": {
                    "targetProjectId": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                },
                "required": [
                    "targetProjectId"
                ],
                "additionalProperties": false
            },
            "ProjectApi.MoveProject.Response": {
                "type": "null"
            },
            "ProjectApi.MoveProject.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ProjectApi.FindByOrganizationId.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ProjectApi.Project"
                }
            },
            "ProjectApi.CreateProjectRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "$comment": "{ \"schema\": { \"type\": \"string\" , \"minLength\": 1} }"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "parentProjectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProjectApi.CreateProject.Request.Body": {
                "$ref": "#/components/schemas/ProjectApi.CreateProjectRequest"
            },
            "ProjectApi.CreateProject.Response": {
                "$ref": "#/components/schemas/ProjectApi.Project"
            },
            "ProviderRegistryApi.CreateProvider.Request.Body": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "type",
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.Provider": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "type",
                    "organizationId",
                    "createdBy"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateProvider.Response": {
                "$ref": "#/components/schemas/ProviderRegistryApi.Provider"
            },
            "ProviderRegistryApi.UpdateProvider.Request.Body": {
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "ProviderRegistryApi.UpdateProvider.Response": {
                "$ref": "#/components/schemas/ProviderRegistryApi.Provider"
            },
            "ProviderRegistryApi.UpdateProvider.Request.PathParams": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string"
                    }
                },
                "required": [
                    "providerId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.ProviderWithVersions": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderRegistryApi.Version"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "required": [
                    "createdBy",
                    "organizationId",
                    "type",
                    "versions"
                ]
            },
            "ProviderRegistryApi.Version": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "gpgKeyId": {
                        "type": "string"
                    },
                    "platform": {
                        "type": "string"
                    },
                    "shasum": {
                        "type": "string"
                    },
                    "isArchived": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "providerId",
                    "version",
                    "gpgKeyId",
                    "platform"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.FindProviderById.Response": {
                "$ref": "#/components/schemas/ProviderRegistryApi.ProviderWithVersions"
            },
            "ProviderRegistryApi.FindProviderById.Request.PathParams": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string"
                    }
                },
                "required": [
                    "providerId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.ProviderVersions": {
                "type": "object",
                "properties": {
                    "versions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.Version"
                        }
                    }
                },
                "required": [
                    "versions"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.Version": {
                "type": "object",
                "properties": {
                    "version": {
                        "type": "string"
                    },
                    "platforms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.Platform"
                        }
                    }
                },
                "required": [
                    "version",
                    "platforms"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.Platform": {
                "type": "object",
                "properties": {
                    "os": {
                        "type": "string"
                    },
                    "arch": {
                        "type": "string"
                    }
                },
                "required": [
                    "os",
                    "arch"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.FindProviderByType.Response": {
                "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.ProviderVersions"
            },
            "ProviderRegistryApi.FindProviderByType.Request.PathParams": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "namespace",
                    "type"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.FindProvidersByOrganizationId.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ProviderRegistryApi.Provider"
                }
            },
            "ProviderRegistryApi.FindProvidersByOrganizationId.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.DeleteProvider.Request.PathParams": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string"
                    }
                },
                "required": [
                    "providerId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateGpgKey.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "organizationId",
                    "keyId",
                    "content"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateGpgKey.Response": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "keyId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    }
                },
                "additionalProperties": false
            },
            "ProviderRegistryApi.DeleteGpgKey.Request.PathParams": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.FindGpgKeysByOrganization.Response": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "organizationId": {
                            "type": "string"
                        },
                        "keyId": {
                            "type": "string"
                        },
                        "content": {
                            "type": "string"
                        },
                        "createdBy": {
                            "type": "string"
                        },
                        "createdByUser": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "ProviderRegistryApi.FindGpgKeysByOrganization.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    }
                },
                "required": [
                    "organizationId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateVersion.Request.Body": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    },
                    "gpgKeyId": {
                        "type": "string"
                    }
                },
                "required": [
                    "filename",
                    "gpgKeyId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateVersion.Response": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.CreateVersion.Request.PathParams": {
                "type": "object",
                "properties": {
                    "providerId": {
                        "type": "string"
                    }
                },
                "required": [
                    "providerId"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.FindProviderPackage.Response": {
                "type": "object",
                "properties": {
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "os": {
                        "type": "string"
                    },
                    "arch": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "download_url": {
                        "type": "string"
                    },
                    "shasums_url": {
                        "type": "string"
                    },
                    "shasums_signature_url": {
                        "type": "string"
                    },
                    "shasum": {
                        "type": "string"
                    },
                    "signing_keys": {
                        "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.SigningKeys"
                    }
                },
                "required": [
                    "protocols",
                    "os",
                    "arch",
                    "filename",
                    "download_url",
                    "shasums_url",
                    "shasums_signature_url",
                    "shasum",
                    "signing_keys"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.SigningKeys": {
                "type": "object",
                "properties": {
                    "gpg_public_keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.GpgPublicKeys"
                        }
                    }
                },
                "required": [
                    "gpg_public_keys"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.TerraformTypes.GpgPublicKeys": {
                "type": "object",
                "properties": {
                    "key_id": {
                        "type": "string"
                    },
                    "ascii_armor": {
                        "type": "string"
                    }
                },
                "required": [
                    "key_id",
                    "ascii_armor"
                ],
                "additionalProperties": false
            },
            "ProviderRegistryApi.DownloadVersion.Response": {
                "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.FindProviderPackage.Response"
            },
            "ProviderRegistryApi.DownloadVersion.Request.PathParams": {
                "type": "object",
                "properties": {
                    "namespace": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "os": {
                        "type": "string"
                    },
                    "architecture": {
                        "type": "string"
                    }
                },
                "required": [
                    "namespace",
                    "type",
                    "version",
                    "os",
                    "architecture"
                ],
                "additionalProperties": false
            },
            "RemoteBackendApi.DeleteStateAccessConfiguration.Request.PathParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId"
                ],
                "additionalProperties": false
            },
            "RemoteBackendApi.StateAccessConfiguration": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "accessibleFromEntireOrganization": {
                        "type": "boolean"
                    },
                    "allowedProjectIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "accessibleFromEntireOrganization",
                    "environmentId"
                ],
                "additionalProperties": false
            },
            "RemoteBackendApi.GetStateAccessConfiguration.Response": {
                "$ref": "#/components/schemas/RemoteBackendApi.StateAccessConfiguration"
            },
            "RemoteBackendApi.GetStateAccessConfiguration.Request.PathParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId"
                ],
                "additionalProperties": false
            },
            "RemoteBackendApi.PutStateAccessConfiguration.Request.Body": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "accessibleFromEntireOrganization": {
                                "type": "boolean",
                                "const": false
                            },
                            "allowedProjectIds": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "required": [
                            "accessibleFromEntireOrganization",
                            "allowedProjectIds"
                        ],
                        "additionalProperties": false
                    },
                    {
                        "type": "object",
                        "properties": {
                            "accessibleFromEntireOrganization": {
                                "type": "boolean",
                                "const": true
                            }
                        },
                        "required": [
                            "accessibleFromEntireOrganization"
                        ],
                        "additionalProperties": false
                    }
                ]
            },
            "RemoteBackendApi.PutStateAccessConfiguration.Response": {
                "$ref": "#/components/schemas/RemoteBackendApi.StateAccessConfiguration"
            },
            "RemoteBackendApi.PutStateAccessConfiguration.Request.PathParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId"
                ],
                "additionalProperties": false
            },
            "RolesApi.Role": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RBACPermission"
                        }
                    },
                    "isDefaultRole": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "permissions"
                ],
                "additionalProperties": false
            },
            "RolesApi.RBACPermission": {
                "$ref": "#/components/schemas/RBACPermission"
            },
            "RBACPermission": {
                "type": "string",
                "enum": [
                    "MANAGE_PROJECT_TEMPLATES",
                    "ABORT_DEPLOYMENT",
                    "READ_STATE",
                    "CREATE_CROSS_PROJECT_ENVIRONMENTS",
                    "EDIT_ORGANIZATION_SETTINGS",
                    "EDIT_ENVIRONMENT_SETTINGS",
                    "RUN_TASK",
                    "CREATE_VCS_ENVIRONMENT",
                    "EDIT_PROJECT_SETTINGS",
                    "VIEW_PROVIDERS",
                    "RUN_PLAN",
                    "CREATE_CUSTOM_ROLES",
                    "ARCHIVE_ENVIRONMENT",
                    "ASSIGN_ROLE_ON_ENVIRONMENT",
                    "VIEW_ORGANIZATION",
                    "VIEW_PROJECT",
                    "RUN_APPLY",
                    "EDIT_ALLOW_REMOTE_APPLY",
                    "VIEW_ENVIRONMENT",
                    "VIEW_AUDIT_LOGS",
                    "OVERRIDE_MAX_ENVIRONMENT_PROJECT_LIMITS",
                    "CREATE_AND_EDIT_MODULES",
                    "MANAGE_ENVIRONMENT_LOCK",
                    "WRITE_STATE",
                    "CREATE_AND_EDIT_TEMPLATES",
                    "FORCE_UNLOCK_WORKSPACE",
                    "VIEW_DASHBOARD",
                    "CREATE_AND_EDIT_PROVIDERS",
                    "OVERRIDE_MAX_TTL",
                    "VIEW_MODULES",
                    "CREATE_PROJECT",
                    "MANAGE_BILLING"
                ]
            },
            "RolesApi.FindById.Response": {
                "$ref": "#/components/schemas/RolesApi.Role"
            },
            "RolesApi.Update.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RBACPermission"
                        }
                    }
                },
                "additionalProperties": false
            },
            "RolesApi.Update.Response": {
                "$ref": "#/components/schemas/RolesApi.Role"
            },
            "RolesApi.Create.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RBACPermission"
                        }
                    }
                },
                "additionalProperties": false
            },
            "RolesApi.Create.Response": {
                "$ref": "#/components/schemas/RolesApi.Role"
            },
            "RolesApi.FindAll.Response": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "permissions": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/RBACPermission"
                            }
                        },
                        "isDefaultRole": {
                            "type": "boolean"
                        }
                    },
                    "required": [
                        "name",
                        "permissions"
                    ],
                    "additionalProperties": false
                }
            },
            "RolesApi.UserRoleAssignment": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RolesApi.RBACPermissionRole"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "RolesApi.RBACPermissionRole": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OrganizationRole"
                    },
                    {
                        "$ref": "#/components/schemas/RBACPermissionRole"
                    }
                ]
            },
            "RBACPermissionRole": {
                "type": "string"
            },
            "RolesApi.GetUserRoleAssignments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/RolesApi.UserRoleAssignment"
                }
            },
            "RolesApi.GetUserRoleAssignments.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "RolesApi.TeamRoleAssignment": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RolesApi.RBACPermissionRole"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                }
            },
            "RolesApi.GetTeamRoleAssignments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/RolesApi.TeamRoleAssignment"
                }
            },
            "RolesApi.GetRoleAssignments.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "RolesApi.GetTeamRoleAssignments.Request.QueryParams": {
                "$ref": "#/components/schemas/RolesApi.GetRoleAssignments.Request.QueryParams"
            },
            "RolesApi.RemoveUserRoleAssignment.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environmentId",
                    "userId"
                ],
                "additionalProperties": false
            },
            "RolesApi.RemoveTeamRoleAssignment.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "environmentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    }
                },
                "required": [
                    "teamId"
                ],
                "additionalProperties": false
            },
            "RolesApi.UpsertUserRoleAssignment.Request.Body": {
                "type": "object",
                "properties": {
                    "userId": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RolesApi.RBACPermissionRole"
                    },
                    "environmentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "userId",
                    "role",
                    "environmentId"
                ],
                "additionalProperties": false
            },
            "RolesApi.UpsertUserRoleAssignment.Response": {
                "$ref": "#/components/schemas/RolesApi.UserRoleAssignment"
            },
            "RolesApi.UpsertTeamRoleAssignment.Request.Body": {
                "type": "object",
                "properties": {
                    "teamId": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/RolesApi.RBACPermissionRole"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "required": [
                    "teamId",
                    "role"
                ],
                "additionalProperties": false
            },
            "RolesApi.UpsertTeamRoleAssignment.Response": {
                "$ref": "#/components/schemas/RolesApi.TeamRoleAssignment"
            },
            "SchedulingApi.ScheduledAction": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "cron": {
                        "type": "string"
                    },
                    "nextSchedule": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "environmentId",
                    "projectId",
                    "organizationId",
                    "cron",
                    "enabled"
                ],
                "additionalProperties": false
            },
            "SchedulingApi.GetScheduleByEnvironmentId.Response": {
                "type": "object",
                "properties": {
                    "deploy": {
                        "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
                    },
                    "destroy": {
                        "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
                    }
                },
                "additionalProperties": false
            },
            "SchedulingApi.GetScheduleByProjectId.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/SchedulingApi.GetScheduleByEnvironmentId.Response"
                }
            },
            "SchedulingApi.SetEnvironmentSchedule.Request.ScheduledAction": {
                "type": "object",
                "properties": {
                    "cron": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "cron"
                ],
                "additionalProperties": false
            },
            "SchedulingApi.SetEnvironmentSchedule.Request.Body": {
                "type": "object",
                "properties": {
                    "deploy": {
                        "$ref": "#/components/schemas/SchedulingApi.SetEnvironmentSchedule.Request.ScheduledAction"
                    },
                    "destroy": {
                        "$ref": "#/components/schemas/SchedulingApi.SetEnvironmentSchedule.Request.ScheduledAction"
                    }
                },
                "additionalProperties": false
            },
            "SchedulingApi.SetEnvironmentSchedule.Response": {
                "$ref": "#/components/schemas/SchedulingApi.GetScheduleByEnvironmentId.Response"
            },
            "SchedulingApi.DriftDetection": {
                "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
            },
            "SchedulingApi.GetDriftDetectionByEnvironmentId.Response": {
                "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
            },
            "SchedulingApi.SetDriftDetection.Request.ScheduledAction": {
                "type": "object",
                "properties": {
                    "cron": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "enabled"
                ],
                "additionalProperties": false
            },
            "SchedulingApi.SetDriftDetection.Request.Body": {
                "$ref": "#/components/schemas/SchedulingApi.SetDriftDetection.Request.ScheduledAction"
            },
            "SchedulingApi.SetDriftDetection.Response": {
                "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
            },
            "TeamApi.CreateTeam.Request.Body": {
                "type": "object",
                "properties": {
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "isDefaultTeam": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "organizationId",
                    "name"
                ],
                "additionalProperties": false
            },
            "TeamApi.Team": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/User"
                        }
                    },
                    "createdByUser": {
                        "$ref": "#/components/schemas/User"
                    },
                    "isDefaultTeam": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "id",
                    "organizationId",
                    "name"
                ],
                "additionalProperties": false
            },
            "TeamApi.CreateTeam.Response": {
                "$ref": "#/components/schemas/TeamApi.Team"
            },
            "TeamApi.GetTeams.Response": {
                "anyOf": [
                    {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamApi.Team"
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "teams": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/TeamApi.Team"
                                }
                            },
                            "nextPageKey": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "teams"
                        ],
                        "additionalProperties": false
                    }
                ]
            },
            "TeamApi.GetTeams.Request.QueryParams": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                    "limit": {
                        "type": "string"
                    },
                    "offset": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "TeamApi.GetTeam.Response": {
                "$ref": "#/components/schemas/TeamApi.Team"
            },
            "TeamApi.UpdateTeam.Request.Body": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "additionalProperties": false
            },
            "TeamApi.UpdateTeam.Response": {
                "$ref": "#/components/schemas/TeamApi.Team"
            },
            "TeamApi.DeprecatedTeamProjectAssignment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    },
                    "projectId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    },
                    "organizationId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    },
                    "projectRole": {
                        "$ref": "#/components/schemas/RBACPermissionRole"
                    }
                },
                "required": [
                    "id",
                    "teamId",
                    "projectRole"
                ],
                "additionalProperties": false
            },
            "TeamApi.DeprecatedGetAssignments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/TeamApi.DeprecatedTeamProjectAssignment"
                }
            },
            "TeamApi.DeprecatedGetAssignments.Request.QueryParams": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "additionalProperties": false
            },
            "TeamApi.DeprecatedUpdateAssignments.TeamRoleTuple": {
                "type": "object",
                "properties": {
                    "teamId": {
                        "type": "string"
                    },
                    "projectRole": {
                        "$ref": "#/components/schemas/RBACPermissionRole"
                    }
                },
                "required": [
                    "teamId",
                    "projectRole"
                ],
                "additionalProperties": false
            },
            "TeamApi.DeprecatedUpdateAssignments.Request.Body": {
                "type": "object",
                "properties": {
                    "projectId": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "assignments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TeamApi.DeprecatedUpdateAssignments.TeamRoleTuple"
                        }
                    }
                },
                "required": [
                    "assignments"
                ],
                "additionalProperties": false
            },
            "TeamApi.DeprecatedUpdateAssignments.Response": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/TeamApi.DeprecatedTeamProjectAssignment"
                }
            },
            "TeamApi.DeprecatedCreateOrUpdateSingleAssignment.Request.Body": {
                "type": "object",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    },
                    "projectId": {
                        "type": "string",
                        "maxLength": 36,
                        "minLength": 1
                    },
                    "projectRole": {
                        "$ref": "#/components/schemas/RBACPermissionRole"
                    }
                },
                "required": [
                    "teamId",
                    "projectRole"
                ],
                "additionalProperties": false
            },
            "TeamApi.DeprecatedCreateOrUpdateSingleAssignment.Response": {
                "$ref": "#/components/schemas/TeamApi.DeprecatedTeamProjectAssignment"
            }
        }
    },
    "paths": {
        "/": {
            "head": {
                "operationId": "authentication",
                "summary": "Authentication",
                "x-explorer-enabled": false,
                "description": "Authentication against the env0 API is done via API Keys.\n\nAn API Key is created by an organization administrator, but is not connected to any specific user when it's being used.\n\n### Creating an API Key With a Specific Role\n- Once you've created your own organization, you can create and manage API Keys.\n- Navigate to the Organization Settings page and click the API Keys tab.\n- Click Add API Key, and enter a name for your key in the Name field. This name is for your reference and isn't used directly in authentication.\n\n  > \u2757\ufe0fSave Your API Key ID & Secret\n  > The secret will not be available after you close this modal\n\n### Creating a Personal API Key\n- Click on your avatar (located on the top right of the screen)\n- Click on Personal Settings\n- Select the API Keys tab\n- Click Add API Key, and enter a name for your key in the Name field.\nThis name is for your reference and isn't used directly in authentication.\n\n  > \u2757\ufe0fSave Your API Key ID & Secret\n  > The secret will not be available after you close this modal\n\n### Using an API Key to Authenticate\nAuthentication to the env0 API is done using the Basic Authentication method.\nEach request made should include the API Key ID as the username, and the API Key Secret as the password.\nFor example - when Using curl, we can include these parameters using the flag --user {API Key ID}:{API Key Secret}.\n\n### API Key Permissions\nAPI Keys are given the role of an Organization Admin, meaning they can be used to perform any action, in any project, under the scope of the organization.",
                "tags": [
                    "Getting Started"
                ]
            }
        },
        "/users/me/vcs-provider-user-mappings": {
            "get": {
                "operationId": "users-get-vcs-provider-user-mappings",
                "summary": "List User's VCS ID Mappings",
                "description": "Returns the user's account ids for all mapped vcs-es.",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountApi.GetVcsProviderUserMappings.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ]
            },
            "post": {
                "operationId": "users-create-vcs-provider-user-mapping",
                "summary": "Create VCS Provider User Mapping",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountApi.CreateVcsProviderUserMapping.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountApi.VcsProviderUserMapping"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ]
            }
        },
        "/vcs-provider-user-mappings/{mappingId}": {
            "put": {
                "operationId": "users-update-vcs-provider-user-mappings",
                "summary": "Update a User's VCS ID Mapping",
                "description": "Updates a user's VCS ID mapping, and returns the updated value.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountApi.UpdateVcsProviderUserMappings.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "mappingId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountApi.VcsProviderUserMapping"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Users"
                ]
            }
        },
        "/agents": {
            "get": {
                "operationId": "agents-settings-list-agents",
                "summary": "List agents",
                "description": "Get a list of the organization agents",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentSettingsApi.ListAgents.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Agents Settings"
                ]
            }
        },
        "/agents/{agentKey}/values": {
            "get": {
                "operationId": "agents-settings-get-agent-values",
                "summary": "Get agent values file content",
                "description": "Save it to a yaml file for helm",
                "parameters": [
                    {
                        "name": "agentKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentSettingsApi.GetAgentValues.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Agents Settings"
                ]
            }
        },
        "/agents/{agentKey}/dotenv": {
            "get": {
                "operationId": "agents-settings-get-docker-agent-dot-env",
                "summary": "Get agent .env file content",
                "description": "Save it to a bash file for docker",
                "parameters": [
                    {
                        "name": "agentKey",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentSettingsApi.GetDockerAgentDotEnv.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Agents Settings"
                ]
            }
        },
        "/agents/projects-assignments": {
            "get": {
                "operationId": "agents-settings-get-agent-assignments",
                "summary": "Get agent assignments of projects",
                "description": "returns the current default agent key and a map of project ids to agent key assignments",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentSettingsApi.GetAgentAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Agents Settings"
                ]
            },
            "post": {
                "operationId": "agents-settings-assign-agents",
                "summary": "Assign agents to projects",
                "description": "gets a map of project ids to agent-key assignments",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AgentSettingsApi.ProjectIdToAgentKeyMap"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AgentSettingsApi.GetAgentAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Agents Settings"
                ]
            }
        },
        "/audit/events": {
            "get": {
                "operationId": "audit-events-fetch-audit-logs",
                "summary": "Fetch Audit Logs",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of audit logs per page. The maximum is 1000, the default is 50",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "An audit log's id from which the page will start",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditEventApi.FetchAuditLogs.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Audit Events"
                ]
            }
        },
        "/blueprints": {
            "post": {
                "operationId": "templates-create-blueprint",
                "summary": "Create Template",
                "description": "Please note, you can only have 1 ssh key per template",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.CreateBlueprint.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.Blueprint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            },
            "get": {
                "operationId": "templates-find-all",
                "summary": "List Templates",
                "description": "Returns all Templates associated with either an Organization or Project. At least one of these must be set.",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "An Organization ID to filter by",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "A Project ID to filter by",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.FindAll.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/blueprints/{id}": {
            "put": {
                "operationId": "templates-update-blueprint",
                "summary": "Update Template",
                "description": "Please note, you can only have 1 ssh key per template",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.BlueprintUserFields"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.Blueprint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            },
            "get": {
                "operationId": "templates-get-blueprint-by-id",
                "summary": "Get Template by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.Blueprint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            },
            "delete": {
                "operationId": "templates-remove-blueprint-by-id",
                "summary": "Delete Template",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/blueprints/vcs-revisions": {
            "get": {
                "operationId": "templates-get-vcs-repository-revisions",
                "summary": "List git repository revisions",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sshKeyIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "githubInstallationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bitbucketClientKey",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RevisionsNamesResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/blueprints/{id}/projects": {
            "patch": {
                "operationId": "templates-add-blueprint-to-project",
                "summary": "Add Template to Project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.AddBlueprintToProject.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.Blueprint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/blueprints/{id}/projects/{projectId}": {
            "delete": {
                "operationId": "templates-remove-blueprint-from-project",
                "summary": "Remove Template from Project",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/blueprints/variables-from-repository": {
            "get": {
                "operationId": "templates-get-variables-from-repository",
                "summary": "Generate Terraform Variables from Repository",
                "description": "Clones and searches through a Template git repository for any Terraform variable blocks and returns a set of env0 Terraform Configuration Variables that may be added to env0 via the Configuration API",
                "parameters": [
                    {
                        "name": "repository",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "revision",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tokenId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sshKeyIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "githubInstallationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "bitbucketClientKey",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetVariablesFromRepository.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/modules": {
            "get": {
                "operationId": "templates-find-all-modules",
                "summary": "List Modules",
                "description": "Returns all modules associated with an organization.",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "An Organization ID to filter by",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.FindAllModules.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            },
            "post": {
                "operationId": "templates-create-module",
                "summary": "Create module",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.CreateModule.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ExistingModule"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/modules/{id}/versions": {
            "get": {
                "operationId": "templates-get-module-versions",
                "summary": "List Module Versions",
                "description": "Returns all versions of the module.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Module Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetModuleVersions.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/modules/{id}/versions/{releaseId}": {
            "get": {
                "operationId": "templates-get-module-readme",
                "summary": "Get Module README",
                "description": "Returns the Module README.md file content from a specific version",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The Module Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "releaseId",
                        "in": "path",
                        "description": "The release based on the tag of the module",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetModuleReadme.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/modules/{id}": {
            "delete": {
                "operationId": "templates-delete-module-by-id",
                "summary": "Delete module",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Modules"
                ]
            },
            "get": {
                "operationId": "templates-get-module",
                "summary": "Get module",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.Module"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            },
            "patch": {
                "operationId": "templates-update-module",
                "summary": "Update module",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.ModuleUserFields"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ExistingModule"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/custom-flow/assign": {
            "post": {
                "operationId": "templates-assign-custom-flow",
                "summary": "Assign Custom Flow",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.AssignCustomFlow.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.AssignCustomFlow.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/custom-flow/unassign": {
            "post": {
                "operationId": "templates-unassign-custom-flow",
                "summary": "Unassign Custom Flow",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.UnassignCustomFlow.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.UnassignCustomFlow.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/modules/v1/{organizationId}/{moduleName}/{providerName}/{version}/download": {
            "get": {
                "operationId": "templates-module-registry-download-source",
                "summary": "Download Terraform module",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "moduleName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "providerName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ModuleRegistryDownloadSource.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/workflowFile": {
            "get": {
                "operationId": "templates-get-workflow-file",
                "summary": "Get workflow file representation",
                "parameters": [
                    {
                        "name": "blueprintId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "revision",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowFile"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/custom-flows": {
            "get": {
                "operationId": "templates-find-custom-flows",
                "summary": "Find Custom Flows",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.FindCustomFlows.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/custom-flow": {
            "post": {
                "operationId": "templates-create-custom-flow",
                "summary": "Create Custom Flow",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.CreateConfigurationTemplate"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            },
            "put": {
                "operationId": "templates-update-custom-flow",
                "summary": "Update Custom Flow",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.UpdateConfigurationTemplateBody"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.CustomFlowTemplate"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/custom-flow/{id}": {
            "delete": {
                "operationId": "templates-delete-custom-flow",
                "summary": "Delete Custom Flow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/custom-flow/get-assignments": {
            "post": {
                "operationId": "templates-get-custom-flow-assignments",
                "summary": "Get Custom Flow Assignments",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.GetCustomFlowAssignments.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetCustomFlowAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Custom Flow"
                ]
            }
        },
        "/approval-policy": {
            "post": {
                "operationId": "templates-create-approval-policy",
                "summary": "Create Approval Policy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.CreateConfigurationTemplate"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            },
            "put": {
                "operationId": "templates-update-approval-policy",
                "summary": "Update Existing Approval Policy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.UpdateConfigurationTemplateBody"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyTemplate"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            },
            "get": {
                "operationId": "templates-get-approval-policy-by-name",
                "summary": "Get Approval Policy By Name",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetApprovalPolicyByName.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            }
        },
        "/approval-policy/{scope}/{scopeId}": {
            "get": {
                "operationId": "templates-get-approval-policy-by-scope",
                "summary": "Get Approval Policy Assignments By Scope",
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scopeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.GetApprovalPolicyByScope.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            }
        },
        "/approval-policy/assignment/{scope}/{scopeId}": {
            "delete": {
                "operationId": "templates-unassign-approval-policy",
                "summary": "Unassign Approval Policy From Scope",
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scopeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            }
        },
        "/approval-policy/assignment": {
            "delete": {
                "operationId": "templates-unassign-approval-policy-by-id",
                "summary": "Unassign Approval Policy by assignment id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            },
            "post": {
                "operationId": "templates-assign-approval-policy",
                "summary": "Assign Approval Policy To Scope",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyAssignmentRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.ApprovalPolicyAssignment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            }
        },
        "/approval-policy/delete/{id}": {
            "delete": {
                "operationId": "templates-delete-approval-policy",
                "summary": "Delete Approval Policy",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Approval Policy"
                ]
            }
        },
        "/environment-discovery/projects/{projectId}": {
            "put": {
                "operationId": "templates-enable-environment-discovery",
                "summary": "Enable/Update Environment Discovery Configuration",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscovery"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The Project ID to enable environment discovery for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscoveryResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            },
            "get": {
                "operationId": "templates-get-environment-discovery",
                "summary": "Get Environment Discovery Configuration for a Project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The Project ID to fetch environment discovery configuration for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintApi.EnvironmentDiscoveryResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Templates"
                ]
            },
            "delete": {
                "operationId": "templates-delete-environment-discovery",
                "summary": "Delete Environment Discovery Configuration for a Project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "The Project ID to delete environment discovery configuration for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Templates"
                ]
            }
        },
        "/bulk-operations/deploy": {
            "post": {
                "operationId": "bulk-operations-bulk-deploy",
                "summary": "Bulk deploy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BulkDeploy.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/destroy": {
            "post": {
                "operationId": "bulk-operations-bulk-destroy",
                "summary": "Bulk destroy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BulkDestroy.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/approve": {
            "post": {
                "operationId": "bulk-operations-bulk-approve",
                "summary": "Bulk approve",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/cancel": {
            "post": {
                "operationId": "bulk-operations-bulk-cancel",
                "summary": "Bulk deploy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/archive": {
            "post": {
                "operationId": "bulk-operations-bulk-archive",
                "summary": "Bulk archive",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/cancel-queued-deployments": {
            "post": {
                "operationId": "bulk-operations-bulk-cancel-queued-deployments",
                "summary": "Bulk cancel queued deployments",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/lock": {
            "post": {
                "operationId": "bulk-operations-bulk-lock",
                "summary": "Bulk lock",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BulkLock.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/unlock": {
            "post": {
                "operationId": "bulk-operations-bulk-unlock",
                "summary": "Bulk unlock",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BasePayload"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/bulk-operations/run-task": {
            "post": {
                "operationId": "bulk-operations-bulk-run-task",
                "summary": "Bulk run task",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkOperationsApi.BulkRunTask.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkOperationsApi.BaseResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Bulk Operations"
                ]
            }
        },
        "/configuration/{id}": {
            "get": {
                "operationId": "configuration-find-variable-by-id",
                "summary": "Query configuration variable by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationPropertyResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "operationId": "configuration-delete-variable",
                "summary": "Delete a variable",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/ssh-keys": {
            "get": {
                "operationId": "configuration-find-ssh-keys-by-organization",
                "summary": "List all available SSH keys",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.FindSshKeysByOrganization.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "post": {
                "operationId": "configuration-create-ssh-key",
                "summary": "Create a new SSH key",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.CreateSshKey.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.SshKey_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/ssh-keys/{id}": {
            "put": {
                "operationId": "configuration-update-ssh-key",
                "summary": "Update an existing SSH key",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.UpdateSshKey.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.SshKey_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "operationId": "configuration-delete-ssh-key",
                "summary": "Delete SSH key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/tokens": {
            "get": {
                "operationId": "configuration-find-token-by-type",
                "summary": "List git tokens",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "const": "GIT"
                        }
                    },
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "post": {
                "operationId": "configuration-create-token",
                "summary": "Create a git token",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.Token"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/tokens/{id}": {
            "get": {
                "operationId": "configuration-find-token-by-id",
                "summary": "Get git token by id",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AbstractSecretResponse_ConfigurationApi.PersistentToken_"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "operationId": "configuration-delete-token",
                "summary": "Delete a git token",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/configuration": {
            "get": {
                "operationId": "configuration-find-variables-by-scope",
                "summary": "List Variables by Scope",
                "description": "Lists all variables for the provided scope(s).\nIf more than one scope is given - variables will be overridden by lower level scopes - just like env0 does.\nFor example - Provided both organizationId and projectId,\nif a variable exists on both scopes, a single instance of it will be returned, with its Project scope value\n",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "blueprintId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentLogId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.FindVariablesByScope.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "post": {
                "operationId": "configuration-create-or-update-variable",
                "summary": "Create or update variable",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.CreateOrUpdateVariable.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.CreateOrUpdateVariable.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/credentials": {
            "post": {
                "operationId": "configuration-create-credential",
                "summary": "Create Credentials",
                "description": "Create a set of new cloud provider, kubernetes, vault or cost credentials for an Organization which may then be associated with a Project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransientCredential"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialWithoutValue"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "get": {
                "operationId": "configuration-find-credentials",
                "summary": "List Organization credentials",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.FindCredentials.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/credentials/{id}": {
            "patch": {
                "operationId": "configuration-update-credential",
                "summary": "Update Credentials",
                "description": "Update deployment credentials or cost credentials for an organization",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.UpdateCredential.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialWithoutValue"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "operationId": "configuration-delete-credential",
                "summary": "Delete Credentials",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/credentials/deployment/{credentialId}/project/{projectId}": {
            "delete": {
                "operationId": "configuration-remove-deploy-creds-from-project",
                "summary": "Dissociate credentials with project",
                "description": "Dissociate cloud provider, kubernetes or vault deployment credentials with Project",
                "parameters": [
                    {
                        "name": "credentialId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "put": {
                "operationId": "configuration-add-deploy-creds-to-project",
                "summary": "Associate credentials with project",
                "description": "Associate cloud provider, kubernetes or vault deployment credentials to Project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.AddDeployCredsToProject.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "credentialId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.DeploymentCredentialToProject"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/credentials/deployment/project/{projectId}": {
            "get": {
                "operationId": "configuration-get-deploy-creds-for-project",
                "summary": "List deployment a Project's deployment credentials",
                "description": "List deployment credentials associated with Project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.DeploymentCredentialsToProject"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/configuration-sets": {
            "post": {
                "operationId": "configuration-create-configuration-set",
                "summary": "Create a configuration set",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.CreateConfigurationSet.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationSet"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "get": {
                "operationId": "configuration-find-sets-by-creation-scope",
                "summary": "List Sets created by Scope",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.FindSetsByCreationScope.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/configuration-sets/{id}": {
            "get": {
                "operationId": "configuration-find-configuration-set-by-id",
                "summary": "Get configuration set by its ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationSet"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "delete": {
                "operationId": "configuration-delete-configuration-set",
                "summary": "Delete a configuration set",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Configuration"
                ]
            },
            "put": {
                "operationId": "configuration-update-configuration-set",
                "summary": "Update a configuration set",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.UpdateConfigurationSet.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationSet"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/configuration-sets/{id}/assignments/{scope}/{scopeId}": {
            "post": {
                "operationId": "configuration-assign-configuration-set-to-scope",
                "summary": "Assign set to entity",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConfigurationApi.AssignConfigurationSetToScope.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scopeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.AssignConfigurationSetToScope.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/configuration-sets/assignments/{scope}/{scopeId}": {
            "get": {
                "operationId": "configuration-find-set-assignments-by-scope",
                "summary": "Find sets assigned to scope",
                "parameters": [
                    {
                        "name": "scope",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "scopeId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConfigurationApi.FindSetAssignmentsByScope.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Configuration"
                ]
            }
        },
        "/costs/project/{projectId}/credentials": {
            "put": {
                "operationId": "cost-add-project-costs-credentials",
                "summary": "Associate Cost Credentials with Project",
                "description": "Associate Cloud provider Cost Credentials to a Project. This will enable cost tagging in deployments in the project.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CostApi.AddProjectCostsCredentials.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.ProjectCostsCredentials"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            },
            "get": {
                "operationId": "cost-get-project-costs-credentials",
                "summary": "List Cost Credentials associated to Project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.GetProjectCostsCredentials.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/projects/enabled": {
            "get": {
                "operationId": "cost-get-projects-with-cost-credentials",
                "summary": "List projects with cost credentials associated to organization",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "The organization to get projects for",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.GetProjectsWithCostCredentials.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/project/{projectId}/enabled": {
            "get": {
                "operationId": "cost-is-cost-enabled",
                "summary": "Return wether or not cost is enabled for a project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.IsCostEnabled.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/project/{projectId}/credentials/{credentialsId}": {
            "delete": {
                "operationId": "cost-remove-project-costs-credentials",
                "summary": "Dissociate Cost Credentials from Project",
                "description": "Dissociate Cloud provider Cost Credentials to a Project. This will disable cost tagging in deployments in the project.",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "credentialsId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/environments/{environmentId}": {
            "get": {
                "operationId": "cost-get-environment-costs",
                "summary": "Get costs for an Environment",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timespan",
                        "in": "query",
                        "description": "A timespan to query cost for",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MONTH",
                                "WEEK",
                                "YEAR",
                                "DAY",
                                "QUARTER"
                            ]
                        }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Granularity of each cost record",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DAILY",
                                "HOURLY"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.CostQueryResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/weekly": {
            "get": {
                "operationId": "cost-get-weekly-costs",
                "summary": "Get weekly costs for projects or environments",
                "parameters": [
                    {
                        "name": "projectIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentIds",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.WeeklyCostsResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/projects/{projectId}": {
            "get": {
                "operationId": "cost-get-project-costs",
                "summary": "Get costs for a Project",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "timespan",
                        "in": "query",
                        "description": "A timespan to query cost for",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MONTH",
                                "WEEK",
                                "YEAR",
                                "DAY",
                                "QUARTER"
                            ]
                        }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Granularity of each cost record",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DAILY",
                                "HOURLY"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.CostQueryResponse"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs": {
            "get": {
                "operationId": "cost-get-organization-costs",
                "summary": "Get costs for an Organization",
                "parameters": [
                    {
                        "name": "timespan",
                        "in": "query",
                        "description": "A timespan to query cost for",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MONTH",
                                "WEEK",
                                "YEAR",
                                "DAY",
                                "QUARTER"
                            ]
                        }
                    },
                    {
                        "name": "granularity",
                        "in": "query",
                        "description": "Granularity of each cost record",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "DAILY",
                                "HOURLY"
                            ]
                        }
                    },
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "Organization Id to get all projects costs",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectIds",
                        "in": "query",
                        "description": "Project ids to get costs for",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "accumulated",
                        "in": "query",
                        "description": "Should the response be a sum of all costs or each cost individually",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.CostQueryResponseV2"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/project/{projectId}/budget": {
            "delete": {
                "operationId": "cost-remove-project-budget",
                "summary": "Remove a project's budget",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Cost"
                ]
            },
            "get": {
                "operationId": "cost-get-project-budget",
                "summary": "Get a project's budget",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.Budget"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            },
            "put": {
                "operationId": "cost-upsert-project-budget",
                "summary": "Upsert a project's budget",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CostApi.UpsertProjectBudget.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.Budget"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/budget/summary": {
            "get": {
                "operationId": "cost-get-budget-summary",
                "summary": "Get projects' budget summary of the current period",
                "parameters": [
                    {
                        "name": "projectIds",
                        "in": "query",
                        "description": "The projects to get summary for",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.GetBudgetSummary.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/costs/budget/accumulated": {
            "get": {
                "operationId": "cost-get-accumulated-project-costs",
                "summary": "Get a project's accumulated costs",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "The project to get accumulated costs for",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostApi.GetAccumulatedProjectCosts.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Cost"
                ]
            }
        },
        "/api-keys": {
            "post": {
                "operationId": "credentials-create-api-key",
                "summary": "Create API Key",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialsApi.CreateApiKey.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsApi.ApiKey"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Credentials"
                ]
            },
            "get": {
                "operationId": "credentials-find-all-api-keys",
                "summary": "List Organization API Keys",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsApi.FindAllApiKeys.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Credentials"
                ]
            }
        },
        "/api-keys/{id}": {
            "delete": {
                "operationId": "credentials-delete-api-key",
                "summary": "Delete an API Key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Credentials"
                ]
            }
        },
        "/personal-api-keys": {
            "post": {
                "operationId": "credentials-create-personal-api-key",
                "summary": "Create personal API Key",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CredentialsApi.CreatePersonalApiKey.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsApi.PersonalApiKey"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Credentials"
                ]
            },
            "get": {
                "operationId": "credentials-find-all-personal-api-keys",
                "summary": "List User's personal API Keys endpoint",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CredentialsApi.FindAllPersonalApiKeys.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Credentials"
                ]
            }
        },
        "/personal-api-keys/{id}": {
            "delete": {
                "operationId": "credentials-delete-personal-api-key",
                "summary": "Delete a User's personal API Key endpoint",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Credentials"
                ]
            }
        },
        "/dashboards": {
            "get": {
                "operationId": "dashboard-query",
                "summary": "Get query result",
                "parameters": [
                    {
                        "name": "queryName",
                        "in": "query",
                        "description": "the query to trigger",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "countDeploymentsPerDay",
                                "activeEnvironments",
                                "activeEnvironmentsPerDay",
                                "countTemplates",
                                "countProjects",
                                "countTeams",
                                "countDeployTypesByUserInTimeRange",
                                "countDeploymentType",
                                "environmentStatus",
                                "maxActiveEnvironmentsPerDay",
                                "countUsers"
                            ]
                        }
                    },
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DashboardApi.Query.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Dashboard"
                ]
            }
        },
        "/deployments/{deploymentLogId}/steps": {
            "get": {
                "operationId": "deployment-logs-find-by-deployment-log-id",
                "summary": "Find all steps by Deployment Id",
                "parameters": [
                    {
                        "name": "deploymentLogId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentStepApi.FindByDeploymentLogId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Deployment Logs"
                ]
            }
        },
        "/deployments/{deploymentLogId}/steps/{name}/log": {
            "get": {
                "operationId": "deployment-logs-find-step-log",
                "summary": "Get logs for specific step",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "In order to fetch the available step names first use deployments/{deploymentLogId}/steps end point",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentLogId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeploymentStepApi.FindStepLog.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Deployment Logs"
                ]
            }
        },
        "/environments/{id}/downstream": {
            "put": {
                "operationId": "environments-update-downstream-environments",
                "summary": "Create or Update Workflow Trigger",
                "description": "Env0 allows you to configure chained dependent environments to your current environment.\nUsing workflow triggers, you can define which environments would trigger\na deployment downstream in response to a deployment of your current environment.\nThis allows you to configure a cascading series of environment deployments.\"\nMore on https://docs.env0.com/docs/workflow-triggers\n",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.UpdateDownstreamEnvironments.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.UpdateDownstreamEnvironments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            },
            "get": {
                "operationId": "environments-find-downstream-environments",
                "summary": "Get downstream environments that will be triggered by this environment deployment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.FindDownstreamEnvironments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/downstream/subscribe": {
            "post": {
                "operationId": "environments-subscribe-downstream-environments",
                "summary": "Subscribe environments as workflow-trigger",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.SubscribeDownstreamEnvironments.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.SubscribeDownstreamEnvironments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/downstream/unsubscribe": {
            "post": {
                "operationId": "environments-unsubscribe-downstream-environments",
                "summary": "Unsubscribe environments as workflow-trigger",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.UnsubscribeDownstreamEnvironments.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.UnsubscribeDownstreamEnvironments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments": {
            "post": {
                "operationId": "environments-create",
                "summary": "Create Environment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.CreateEnvironmentRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            },
            "get": {
                "operationId": "environments-find-all",
                "summary": "List Environments",
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of environments per page. The maximum is 100, with the default value is set to maximum",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the first environment returned. Defaults to 0",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "onlyMy",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isActive",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isRemoteBackend",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workspaceName",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workspaceNamePrefix",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeSubEnvironments",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchText",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.FindAll.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}": {
            "put": {
                "operationId": "environments-update",
                "summary": "Update Environment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.Update.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            },
            "get": {
                "operationId": "environments-find-by-id",
                "summary": "Get Environment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/template": {
            "put": {
                "operationId": "environments-save-as-template",
                "summary": "Save VCS environment as a template",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.SaveAsTemplate.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/ttl": {
            "put": {
                "operationId": "environments-ttl",
                "summary": "Update Environment TTL",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.TTLRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Environment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/deployments": {
            "post": {
                "operationId": "environments-deploy",
                "summary": "Deploy Environment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DeployRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeployResult"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            },
            "get": {
                "operationId": "environments-find-deployment-logs-by-environment-id",
                "summary": "List Deployments",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of deployments per page. The maximum is 100, with the default value is set to maximum",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the first deployment returned. Defaults to 0",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "description": "The start date of the first deployment log in the response. Must be provided with toDate and in the following format YYYY-MM-DDTHH:mm:ss.sssZ",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "description": "The start date of the last deployment log in the response. Must be provided with fromDate and in the following format YYYY-MM-DDTHH:mm:ss.sssZ",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deploymentTypes",
                        "in": "query",
                        "description": "The types of the deployment logs in the response. The types should be in Camel case and separated by commas. For example: deploymentTypes=deploy,prPlan,driftDetection",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "The statuses of the deployment logs in the response. The statuses should be separated by commas.",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.FindDeploymentLogsByEnvironmentId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/deployments/{id}/cancel": {
            "put": {
                "operationId": "environments-cancel",
                "summary": "Cancel Deployment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.Cancel.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Cancel.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/deployments/cancel": {
            "put": {
                "operationId": "environments-batch-cancel",
                "summary": "Batch Cancel Deployments",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.BatchCancel.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Cancel deployments with this status",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "QUEUED",
                                "IN_PROGRESS",
                                "ABORTING",
                                "INTERNAL_FAILURE",
                                "FAILURE",
                                "WAITING_FOR_USER",
                                "SKIPPED",
                                "NEVER_DEPLOYED",
                                "CANCELLED",
                                "ABORTED",
                                "TIMEOUT",
                                "SUCCESS"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.BatchCancel.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/deployments/{id}/abort": {
            "post": {
                "operationId": "environments-abort",
                "summary": "Abort Deployment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.Abort.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Abort.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/destroy": {
            "post": {
                "operationId": "environments-destroy",
                "summary": "Destroy Environment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.Destroy.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "checkoutUpdatedCode",
                        "in": "query",
                        "description": "Checkout updated code",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "false",
                                "true"
                            ]
                        }
                    },
                    {
                        "name": "isScheduledRun",
                        "in": "query",
                        "description": "Is scheduled run",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "false",
                                "true"
                            ]
                        }
                    },
                    {
                        "name": "skipStateRefresh",
                        "in": "query",
                        "description": "Skip automatic state refresh",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "false",
                                "true"
                            ]
                        }
                    },
                    {
                        "name": "revision",
                        "in": "query",
                        "description": "Revision",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Destroy.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/deployments/{id}": {
            "put": {
                "operationId": "environments-resume",
                "summary": "Resume Deployment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.Resume.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Resume.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            },
            "get": {
                "operationId": "environments-find-deployment-log-by-id",
                "summary": "Get Deployment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/{id}/lock": {
            "put": {
                "operationId": "environments-update-environment-lock",
                "summary": "Lock/Unlock environment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.UpdateEnvironmentLock.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.EnvironmentLockStatus"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/workflow-deployments/{workflowDeploymentId}/sub-environments/{subEnvironmentId}/deployment": {
            "get": {
                "operationId": "environments-find-sub-deployment-log",
                "summary": "Get Sub Deployment Log In A Workflow By Workflow Deployment Id And Environment Id",
                "parameters": [
                    {
                        "name": "subEnvironmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "workflowDeploymentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.DeploymentLog"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/count": {
            "get": {
                "operationId": "environments-count-by-project",
                "summary": "Count Environments",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "isActive",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.CountByProject.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/statuses/counts": {
            "get": {
                "operationId": "environments-get-projects-envs-statuses-counts-by-org",
                "summary": "Counts all selected statuses of organization projects",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.GetProjectsEnvsStatusesCountsByOrg.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/deployments/{id}/resources": {
            "get": {
                "operationId": "environments-find-resources",
                "summary": "List Resources",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.FindResources.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/policies": {
            "put": {
                "operationId": "environments-update-policies",
                "summary": "Update Policy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.UpdatePolicies.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Policy"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "environments-get-policies",
                "summary": "Get Policy",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.Policy"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            }
        },
        "/policies/limits/check": {
            "get": {
                "operationId": "environments-check-limit",
                "summary": "Check Environment meets Project limits",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.CheckLimit.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/deployments/{id}/rerun": {
            "post": {
                "operationId": "environments-rerun-deployment",
                "summary": "Rerun PR plan",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.RerunDeployment.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.RerunDeployment.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environments/without-template": {
            "post": {
                "operationId": "environments-create-environment-without-template",
                "summary": "Create an Environment Without Template",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EnvironmentApi.CreateEnvironmentWithoutTemplate.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.CreateEnvironmentWithoutTemplate.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/environment-outputs": {
            "get": {
                "operationId": "environments-get-environments-outputs",
                "summary": "Get Environments Outputs",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentApi.GetEnvironmentsOutputs.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Environments"
                ]
            }
        },
        "/module/{moduleId}/tests": {
            "get": {
                "operationId": "modules-get-module-test-runs",
                "summary": "List Module Test Runs",
                "parameters": [
                    {
                        "name": "moduleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of test runs per page. The maximum is 100, with the default value is set to maximum",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The offset of the first test returned. Defaults to 0",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleTestingApi.GetModuleTestRuns.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/module/tests/{testRunId}": {
            "get": {
                "operationId": "modules-get-module-test-run-by-id",
                "summary": "Get Module Test Run by ID",
                "parameters": [
                    {
                        "name": "testRunId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleTestingApi.FullModuleTestRun"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/module/{moduleId}/test": {
            "post": {
                "operationId": "modules-trigger-module-test-run",
                "summary": "Trigger Module Test Run",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ModuleTestingApi.TriggerModuleTestRun.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "moduleId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleTestingApi.TriggerModuleTestRun.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Modules"
                ]
            }
        },
        "/notifications/endpoints": {
            "post": {
                "operationId": "notifications-create-notification-endpoint",
                "summary": "Create Notification Endpoint",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationsApi.NotificationEndpointModel"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsApi.NotificationEndpoint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Notifications"
                ]
            },
            "get": {
                "operationId": "notifications-find-notification-endpoints",
                "summary": "List Notification Endpoints",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsApi.FindNotificationEndpoints.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/notifications/endpoints/{endpointId}": {
            "delete": {
                "operationId": "notifications-delete-notification-endpoint",
                "summary": "Delete Notification Endpoint",
                "parameters": [
                    {
                        "name": "endpointId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Notifications"
                ]
            },
            "patch": {
                "operationId": "notifications-update-notification-endpoint",
                "summary": "Update Notification Endpoint",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationsApi.UpdateNotificationEndpoint.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "endpointId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsApi.NotificationEndpoint"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/notifications/projects/{projectId}/endpoints/{endpointId}": {
            "put": {
                "operationId": "notifications-update-project-notification-settings",
                "summary": "Update Notification Settings",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationsApi.UpdateProjectNotificationSettings.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "endpointId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsApi.ProjectNotificationSetting"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/notifications/projects/{projectId}": {
            "get": {
                "operationId": "notifications-find-project-notification-settings",
                "summary": "Get Notification Endpoint settings",
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationsApi.FindProjectNotificationSettings.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Notifications"
                ]
            }
        },
        "/organizations": {
            "post": {
                "operationId": "organization-create-organization",
                "summary": "Create a new Organization",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationApi.CreateOrganization.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.OrganizationModel"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            },
            "get": {
                "operationId": "organization-find-organizations",
                "summary": "List Organizations",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.FindOrganizations.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}": {
            "get": {
                "operationId": "organization-find-organization-by-id",
                "summary": "Get Organization",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.Organization"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            },
            "put": {
                "operationId": "organization-update-organization",
                "summary": "Update Organization",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationApi.UpdateOrganization.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.Organization"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}/limits": {
            "get": {
                "operationId": "organization-get-organization-limits",
                "summary": "Get Organization Limits",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.OrganizationLimits"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}/policies": {
            "post": {
                "operationId": "organization-update-policy",
                "summary": "Update Policy",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationApi.OrganizationPolicy"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.Organization"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}/users": {
            "get": {
                "operationId": "organization-get-users",
                "summary": "List Users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "includeApiKeys",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.GetUsers.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}/users/{userId}": {
            "delete": {
                "operationId": "organization-remove-user-from-organization",
                "summary": "Remove User",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/invites": {
            "post": {
                "operationId": "organization-create-invite",
                "summary": "Invite User",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationApi.CreateInvite.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.CreateInvite.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/organizations/{id}/users/{userId}/role": {
            "put": {
                "operationId": "organization-update-role",
                "summary": "Update User's Organization Role Assignment",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationApi.UpdateRole.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrganizationApi.UpdateRole.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Organization"
                ]
            }
        },
        "/projects/modules/testing/{organizationId}": {
            "get": {
                "operationId": "projects-get-modules-testing-project",
                "summary": "Get Modules Testing Project for Organization",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.Project"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            }
        },
        "/projects/{id}": {
            "delete": {
                "operationId": "projects-archive",
                "summary": "Archive a Project",
                "description": "This can not be undone. Running Environments will NOT be destroyed and continuous and scheduled Deployments will NOT continue to occur.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Projects"
                ]
            },
            "put": {
                "operationId": "projects-update",
                "summary": "Update a Project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectApi.UpdateProjectRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.Project"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            },
            "get": {
                "operationId": "projects-find-by-id",
                "summary": "Get a Project By ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.Project"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            }
        },
        "/projects/{id}/move": {
            "post": {
                "operationId": "projects-move-project",
                "summary": "Move a project to be a sub-project of another project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectApi.MoveProject.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.MoveProject.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            }
        },
        "/projects": {
            "get": {
                "operationId": "projects-find-by-organization-id",
                "summary": "List Projects",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.FindByOrganizationId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            },
            "post": {
                "operationId": "projects-create-project",
                "summary": "Create a new Project",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProjectApi.CreateProjectRequest"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProjectApi.Project"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Projects"
                ]
            }
        },
        "/providers": {
            "post": {
                "operationId": "provider-registry-create-provider",
                "summary": "Create a new provider",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderRegistryApi.CreateProvider.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.Provider"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            },
            "get": {
                "operationId": "provider-registry-find-providers-by-organization-id",
                "summary": "Find all providers in an organization",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.FindProvidersByOrganizationId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/providers/{providerId}": {
            "put": {
                "operationId": "provider-registry-update-provider",
                "summary": "Update a provider",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderRegistryApi.UpdateProvider.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.Provider"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            },
            "get": {
                "operationId": "provider-registry-find-provider-by-id",
                "summary": "Find a provider by id",
                "parameters": [
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.ProviderWithVersions"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            },
            "delete": {
                "operationId": "provider-registry-delete-provider",
                "summary": "Delete a provider",
                "parameters": [
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/providers/v1/{namespace}/{type}/versions": {
            "get": {
                "operationId": "provider-registry-find-provider-by-type",
                "summary": "Find a provider by type",
                "parameters": [
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.ProviderVersions"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/gpg-keys": {
            "post": {
                "operationId": "provider-registry-create-gpg-key",
                "summary": "Create a new GPG key",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderRegistryApi.CreateGpgKey.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.CreateGpgKey.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            },
            "get": {
                "operationId": "provider-registry-find-gpg-keys-by-organization",
                "summary": "List all available GPG keys",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.FindGpgKeysByOrganization.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/gpg-keys/{id}": {
            "delete": {
                "operationId": "provider-registry-delete-gpg-key",
                "summary": "Delete a GPG key",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/providers/{providerId}/versions": {
            "post": {
                "operationId": "provider-registry-create-version",
                "summary": "Create a new provider version",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProviderRegistryApi.CreateVersion.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.CreateVersion.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/providers/v1/{namespace}/{type}/{version}/download/{os}/{architecture}": {
            "get": {
                "operationId": "provider-registry-download-version",
                "summary": "Get a download url for a specific version",
                "parameters": [
                    {
                        "name": "namespace",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "os",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "architecture",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProviderRegistryApi.TerraformTypes.FindProviderPackage.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Provider Registry"
                ]
            }
        },
        "/remote-backend/states/{environmentId}/access-control": {
            "delete": {
                "operationId": "remote-backend-service-delete-state-access-configuration",
                "summary": "Delete remote state access configuration",
                "description": "Deletes an existing environment state access configuration",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "RemoteBackendService"
                ]
            },
            "get": {
                "operationId": "remote-backend-service-get-state-access-configuration",
                "summary": "Get remote state access configuration",
                "description": "Describe which environments, or projects in the organization may access a given environment's state",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoteBackendApi.StateAccessConfiguration"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "RemoteBackendService"
                ]
            },
            "put": {
                "operationId": "remote-backend-service-put-state-access-configuration",
                "summary": "Create remote state access configuration",
                "description": "Creates configuration describing which environments, or projects in the organization may access a given environment's state",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RemoteBackendApi.PutStateAccessConfiguration.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RemoteBackendApi.StateAccessConfiguration"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "RemoteBackendService"
                ]
            }
        },
        "/roles/{id}": {
            "get": {
                "operationId": "roles-find-by-id",
                "summary": "Get a Role",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.Role"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "put": {
                "operationId": "roles-update",
                "summary": "Update a Role",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolesApi.Update.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.Role"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "delete": {
                "operationId": "roles-delete",
                "summary": "Delete a Role",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Roles"
                ]
            }
        },
        "/roles": {
            "post": {
                "operationId": "roles-create",
                "summary": "Create a Role",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolesApi.Create.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.Role"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "get": {
                "operationId": "roles-find-all",
                "summary": "Get All Roles",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.FindAll.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            }
        },
        "/roles/assignments/users": {
            "get": {
                "operationId": "roles-get-user-role-assignments",
                "summary": "Get User Role Assignments",
                "description": "Currently supports environment scope assignments only.",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "ID of an environment to fetch its user role assignments",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.GetUserRoleAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "delete": {
                "operationId": "roles-remove-user-role-assignment",
                "summary": "Remove a Role Assignment for a User",
                "description": "Currently supports environment scope assignments only.",
                "parameters": [
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "put": {
                "operationId": "roles-upsert-user-role-assignment",
                "summary": "Create or Update a Role Assignment for a User",
                "description": "Currently supports environment scope assignments only.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolesApi.UpsertUserRoleAssignment.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.UserRoleAssignment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            }
        },
        "/roles/assignments/teams": {
            "get": {
                "operationId": "roles-get-team-role-assignments",
                "summary": "Get Team Role Assignments",
                "description": "Specifying `environmentId`, `projectId` or `organizationId` is required.",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "ID of an organization to fetch its team role assignments",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "ID of a project to fetch its team role assignments",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "ID of an environment to fetch its team role assignments",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.GetTeamRoleAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "delete": {
                "operationId": "roles-remove-team-role-assignment",
                "summary": "Remove a Role Assignment for a Team",
                "description": "Specifying `environmentId`, `projectId` or `organizationId` is required.",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "teamId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Roles"
                ]
            },
            "put": {
                "operationId": "roles-upsert-team-role-assignment",
                "summary": "Create or Update a Role Assignment for a Team",
                "description": "Currently supports organization or environment scope assignments only. Specifying `environmentId` or `organizationId` is required.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolesApi.UpsertTeamRoleAssignment.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RolesApi.TeamRoleAssignment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Roles"
                ]
            }
        },
        "/scheduling/environments/{id}": {
            "get": {
                "operationId": "scheduling-get-schedule-by-environment-id",
                "summary": "Get Environment Scheduling",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulingApi.GetScheduleByEnvironmentId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scheduling"
                ]
            },
            "put": {
                "operationId": "scheduling-set-environment-schedule",
                "summary": "Set Environment Scheduling",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SchedulingApi.SetEnvironmentSchedule.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulingApi.GetScheduleByEnvironmentId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scheduling"
                ]
            }
        },
        "/scheduling/projects/{id}": {
            "get": {
                "operationId": "scheduling-get-schedule-by-project-id",
                "summary": "Get Project Scheduling",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulingApi.GetScheduleByProjectId.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scheduling"
                ]
            }
        },
        "/scheduling/drift-detection/environments/{id}": {
            "get": {
                "operationId": "scheduling-get-drift-detection-by-environment-id",
                "summary": "Get Drift Detection Environment Scheduling",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scheduling"
                ]
            },
            "patch": {
                "operationId": "scheduling-set-drift-detection",
                "summary": "Set Drift Detection Environment Scheduling",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SchedulingApi.SetDriftDetection.Request.ScheduledAction"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SchedulingApi.ScheduledAction"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Scheduling"
                ]
            }
        },
        "/teams": {
            "post": {
                "operationId": "teams-create-team",
                "summary": "Create Team",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamApi.CreateTeam.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.Team"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            }
        },
        "/teams/organizations/{organizationId}": {
            "get": {
                "operationId": "teams-get-teams",
                "summary": "List Teams",
                "parameters": [
                    {
                        "name": "organizationId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Number of teams per page. The maximum is 1000, the default is 50",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "The nextPageKey returned in the previous request",
                        "required": false,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.GetTeams.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            }
        },
        "/teams/{teamId}": {
            "get": {
                "operationId": "teams-get-team",
                "summary": "Get Team",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.Team"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            },
            "put": {
                "operationId": "teams-update-team",
                "summary": "Update Team",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamApi.UpdateTeam.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.Team"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            },
            "delete": {
                "operationId": "teams-delete-team",
                "summary": "Delete Team",
                "parameters": [
                    {
                        "name": "teamId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Teams"
                ]
            }
        },
        "/teams/assignments": {
            "get": {
                "operationId": "teams-deprecated-get-assignments",
                "summary": "List Project Teams Permissions",
                "description": "This API is deprecated. Please use \"Get Team Role Assignments\" instead.",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "projectId",
                        "in": "query",
                        "description": "",
                        "required": true,
                        "allowEmptyValue": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.DeprecatedGetAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            },
            "put": {
                "operationId": "teams-deprecated-update-assignments",
                "summary": "Update Teams Assignments",
                "description": "This API is deprecated. Please use \"Create or Update a Role Assignment for a Team\" instead.",
                "deprecated": true,
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamApi.DeprecatedUpdateAssignments.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.DeprecatedUpdateAssignments.Response"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            },
            "post": {
                "operationId": "teams-deprecated-create-or-update-single-assignment",
                "summary": "Create or Update a single Team to Project Assignment",
                "description": "This API is deprecated. Please use \"Create or Update a Role Assignment for a Team\" instead.",
                "deprecated": true,
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TeamApi.DeprecatedCreateOrUpdateSingleAssignment.Request.Body"
                            }
                        }
                    },
                    "description": ""
                },
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TeamApi.DeprecatedTeamProjectAssignment"
                                }
                            }
                        }
                    }
                },
                "tags": [
                    "Teams"
                ]
            }
        },
        "/teams/assignments/{assignmentId}": {
            "delete": {
                "operationId": "teams-deprecated-delete-single-assignment",
                "summary": "Delete a single Team to Project Assignment",
                "description": "This API is deprecated. Please use \"Remove a Role Assignment for a Team\" instead.",
                "deprecated": true,
                "parameters": [
                    {
                        "name": "assignmentId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Status 204 Response",
                        "content": {}
                    }
                },
                "tags": [
                    "Teams"
                ]
            }
        }
    },
    "tags": [
        {
            "name": "Getting Started"
        },
        {
            "name": "Users",
            "description": "This API covers management for user settings\n"
        },
        {
            "name": "Agents Settings",
            "description": ""
        },
        {
            "name": "Audit Events",
            "description": ""
        },
        {
            "name": "Templates",
            "description": "A template in env0 defines a type of environment that can be deployed.\nClick Run Now on a template to create a new environment.\nA template consists of a name, a description, a valid set of configuration files describing the deployment, and a set of Variables and Secrets.\nMore on https://docs.env0.com/docs/templates\n"
        },
        {
            "name": "Modules",
            "description": "Module Registry endpoints"
        },
        {
            "name": "Custom Flow",
            "description": "Project Custom Flow endpoints"
        },
        {
            "name": "Approval Policy",
            "description": "Approval Policy endpoints"
        },
        {
            "name": "Bulk Operations",
            "description": "Bulk Operations\n"
        },
        {
            "name": "Configuration",
            "description": "This API covers all deployment Configuration including: Variables, Tokens, SSH Keys and Deployment Credentials\n"
        },
        {
            "name": "Cost",
            "description": "With cost monitoring enabled in env0, you will be able to see how much each Environment you are running costs.\nMore on https://docs.env0.com/docs/cost-monitoring\n"
        },
        {
            "name": "Credentials",
            "description": "Authentication against the env0 API is done via API Keys.\n\nAn API Key is created by an organization administrator, but is not connected to any specific user when it's being used. \n\nMore on https://docs.env0.com/reference/authentication\n"
        },
        {
            "name": "Dashboard",
            "description": "This API covers all dashboard queries\n"
        },
        {
            "name": "Deployment Logs",
            "description": "env0 deployment consists of steps such as Init Variables\nusing this API you can retrieve information about those steps\n"
        },
        {
            "name": "Environments",
            "description": "An environment is an entity representing a deployment managed by env0.\n\nYour users manage their environments in env0 in Projects.\nThey can create, destroy, and redeploy environments.\n\nMore on https://docs.env0.com/docs/environments\n"
        },
        {
            "name": "Notifications",
            "description": "env0 can send notifications for deployment events to your Slack or Microsoft Teams workspace.\nYou can define several Notification Targets, corresponding to different channels.\nYou can also associate these Notification Targets to different env0 projects, controlling which events go to which channel.\nMore on https://docs.env0.com/docs/notifications\n"
        },
        {
            "name": "Organization",
            "description": "An Organization is the highest level logical entity in env0.\n\nAll Projects, Templates, Variable, Policies, and Environments, are defined for a specific organization. Organizations are logically separate from each other, and do not share any entities.\nMore on https://docs.env0.com/docs/organizations\n"
        },
        {
            "name": "Projects",
            "description": "Projects are used in env0 to provide granular access control to Environments.\nEvery environment in env0 exists under a project, and users are given access on a per-project basis.\nProjects are also useful for managing multiple cloud accounts within a single Organization.\nWe recommend using projects to separate dev environments from production environments, each with its own access rights and policies.\nMore on https://docs.env0.com/docs/projects\n"
        },
        {
            "name": "Provider Registry",
            "description": "Provider Registry allows you to store, version control and share your Terraform providers privately across your organization. More on https://docs.env0.com/docs/providers"
        },
        {
            "name": "RemoteBackendService",
            "description": "control remote access to remote terraform state\n"
        },
        {
            "name": "Roles",
            "description": "Roles are used to get a precise control over who can do what.\n"
        },
        {
            "name": "Scheduling",
            "description": "Scheduling allows you to automatically trigger destroys and deploys of your environments on a scheduled basis.\nScheduling is configured based on cron expressions, and can be attached to an already deployed environment only.\n\nMore on https://docs.env0.com/docs/scheduling\n"
        },
        {
            "name": "Teams",
            "description": "Teams allow you to more easily manage your project level permissions in env0 by setting the role for an entire group of users as a single entity.\nA team belongs to a single Organization, are managed at the Organization Settings level, and are not shared between multiple organizations\nMore on https://docs.env0.com/docs/teams\n"
        }
    ],
    "servers": [
        {
            "url": "https://api.env0.com"
        }
    ],
    "security": [
        {
            "env0_API_Key": []
        }
    ],
    "x-readme": {
        "proxy-enabled": true,
        "headers": [
            {
                "key": "content-type",
                "value": "application/json"
            }
        ],
        "samples-languages": [
            "curl",
            "javascript",
            "node",
            "http"
        ],
        "explorer-enabled": true
    },
    "info": {
        "title": "env0 API",
        "description": "This document describes the resources that make up the official env0 REST API\n\n### BaseURL\nhttps://api.env0.com/\n\n### Content Types\nAll requests should be in JSON format, and include the `accept: application/json` header\n",
        "version": "1.0.0",
        "x-logo": {
            "url": "https://github.com/env0/api/raw/gh-pages/env0-color.png",
            "altText": "env0 logo"
        }
    }
}